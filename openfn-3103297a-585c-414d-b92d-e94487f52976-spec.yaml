name: catalyst
description: null
collections: null
credentials:
  ymugenga@tns.org-Salesforce-Integration:
    name: Salesforce Integration
    owner: ymugenga@tns.org
workflows:
  Production---Coffee-ZIM---CommCare----SalesForce---Training-Observations:
    name: Production - Coffee ZIM - CommCare -- SalesForce - Training Observations
    jobs:
      Production---Coffee-ZIM---CommCare----SalesForce---Training-Observations:
        name: Production - Coffee ZIM - CommCare -- SalesForce - Training Observations
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |+
          //Training Observation

          each(
            "$.data",
            upsert("Observation__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.Observer")),
                field("Trainer__c", dataValue("form.trainer_salesforce_id")),
                field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
                field("Training_Session__c", dataValue("form.selected_session")),
                field("RecordTypeId", dataValue("form.Record_Type")),
                field("Date__c", dataValue("form.Date")),
                
                field("Male_Participants__c", function(state){
                  return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
                }),
                field("Female_Participants__c", function(state){
                  return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
                }),
                field("Number_of_Participants__c", function(state){
                  return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
                }),
                
                field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
                field("Shared_Action_Plan_Comments__c", function(state){
                  if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
                    return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
                  } else {
                    return '';
                  }
                }),
                field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
                field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
                
                field("Photo_of_Facilitator_URL__c", function(state) {
                  var photoUrl = '';
                  if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
                    photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
                  }
                  return photoUrl;
                }),
                field("Farmer_Trainer_Signature__c", function(state) {
                  var trainerSignatureUrl = '';
                  if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
                    trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
                  }
                  return trainerSignatureUrl;
                }),
                field("Observer_Signature__c", function(state) {
                  var observerSignatureUrl = '';
                  if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
                    observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
                  }
                  return observerSignatureUrl;
                }),
                
                field("Observation_Location__Latitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[0]; 
                  }
                }),
                field("Observation_Location__Longitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[1]; 
                  }
                }),
                field("Altitude__c", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[2]; 
                  }
                })
                
                
              )
            )),

          //CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
            
          each(
            "$.data",
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_prepare_and_implement_agronomy_practice-p1";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_prepare_and_implement_agronomy_practice"),
              field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
              field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_prepare_and_implement_agronomy_practice-p2";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_prepare_and_implement_agronomy_practice"),
              field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
              field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_prepare_and_implement_agronomy_practice-p3";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_prepare_and_implement_agronomy_practice"),
              field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
              field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
              ))),

          //CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_teaching_clarity_and_effectiveness-p1";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_teaching_clarity_and_effectiveness"),
              field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
              field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_teaching_clarity_and_effectiveness-p2";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_teaching_clarity_and_effectiveness"),
              field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
              field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_teaching_clarity_and_effectiveness-p3";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_teaching_clarity_and_effectiveness"),
              field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
              field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
              ))),

          //CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_knowledge_of_trainer_on_agronomy-p1";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_knowledge_of_trainer_on_agronomy"),
              field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
              field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_knowledge_of_trainer_on_agronomy-p2";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_knowledge_of_trainer_on_agronomy"),
              field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
              field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_knowledge_of_trainer_on_agronomy-p3";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_knowledge_of_trainer_on_agronomy"),
              field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
              field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
              ))),

          //CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_shows_professionalism";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_shows_professionalism"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_is_prepared_and_organized";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_is_prepared_and_organized"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
            ))),

          each(
            "$.data",   
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_engages_participants";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_engages_participants"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_facilitates_openings_and_closings";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_facilitates_openings_and_closings"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_leads_activities";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_leads_activities"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_leads_discussions";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_leads_discussions"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_follows_lesson_plans";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_follows_lesson_plans"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim_manages_time";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_manages_time"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
            )));
            
            // Version control
            
    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---CommCare----SalesForce---Training-Observations:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---CommCare----SalesForce---Training-Observations
        condition_type: js_expression
        condition_label: Production Coffee ZIM CommCare SalesForce Training Observations
        condition_expression: |
          state.data.form["survey_type"] == "Training Observation" && state.data["app_id"] == "b75286e874c74eb09b8da436709d7f3c"
        enabled: true
  Production---Attendance-Light---CommCare-----Salesforce---Training-Attendance:
    name: Production - Attendance Light - CommCare --- Salesforce - Training
      Attendance
    jobs:
      Production---Attendance-Light---CommCare-----Salesforce---Training-Attendance:
        name: Production - Attendance Light - CommCare --- Salesforce - Training
          Attendance
        adaptor: '@openfn/language-salesforce@5.0.4'
        credential: null
        body: |+
          //ATTENDANCE LIGHT JOB FOR ALL PROJECT USING ATTENDANCE LIGHT SURVEY


          each(
          	  "$.data",
          	  upsertIf(state.data.form.session === undefined || state.data.form.session === "first_session", "Training_Session__c", "CommCare_Case_Id__c",
          		fields(
          		  field("CommCare_Case_Id__c", dataValue("form.selected_training_module")),
          	    field("Updated_from_CommCare__c", true),
          	    field("Trainer__c", dataValue("form.trainer")),
          	    field("Date__c", dataValue("form.Current_session_participants.date")),
          		  field("Male_Attendance__c", dataValue("form.Current_session_participants.male_attendance")),
          		  field("Female_Attendance__c", dataValue("form.Current_session_participants.female_attendance")),
          		  field("Number_in_Attendance__c", dataValue("form.Current_session_participants.total_attendance")),
          				 
          		  field("Session_Photo_URL__c", function(state) {
          		  var photoUrl = '';
          		  if(dataValue("form.photo")(state) !== undefined && dataValue("form.photo")(state) !== '') {
                      photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);  
                    }
                    return photoUrl;
          		  }),
          				        
                  field('Location_GPS__Latitude__s', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                   if (coords) {
                      return coords.split(" ")[0];
                  }
                    // the 'else' is unnecessary, return '' if there are no coords
                    return '';
                  }), 
                  field('Location_GPS__Longitude__s', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                    // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                  }),
                  field('Altitude__c', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                    // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                  })				
          		))),
          		
          each(
          	 "$.data",
          	  upsertIf(state.data.form.session === "second_session", "Training_Session__c", "CommCare_Case_Id__c",
          		fields(
          		  field("CommCare_Case_Id__c", dataValue("form.selected_training_module")),
          	    field("Updated_from_CommCare__c", true),
          	    field("Trainer__c", dataValue("form.trainer")),
          	    field("Date_2__c", dataValue("form.Current_session_participants.date")),
          		  field("Second_Male_Attendance__c", dataValue("form.Current_session_participants.male_attendance")),
          		  field("Second_Female_Attendance__c", dataValue("form.Current_session_participants.female_attendance")),
          		  field("Second_Number_in_Attendance__c", dataValue("form.Current_session_participants.total_attendance")),
          				 
          		  field("Session_Photo_URL_2__c", function(state) {
          		  var photoUrl = '';
          		  if(dataValue("form.photo")(state) !== undefined && dataValue("form.photo")(state) !== '') {
                      photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);  
                    }
                    return photoUrl;
          		  }),
          				        
                  field('Second_Location_GPS__Latitude__s', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                   if (coords) {
                      return coords.split(" ")[0];
                  }
                    // the 'else' is unnecessary, return '' if there are no coords
                    return '';
                  }), 
                  field('Second_Location_GPS__Longitude__s', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                    // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                  }),
                  field('Second_Altitude__c', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                    // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                  })		
          	    )
          	  )
          );
          	    
    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Attendance-Light---CommCare-----Salesforce---Training-Attendance:
        source_trigger: webhook
        target_job: Production---Attendance-Light---CommCare-----Salesforce---Training-Attendance
        condition_type: js_expression
        condition_label: Production - Attendance Light - CommCare --> Salesforce -
          Training Attendance
        condition_expression: |
          state.data.form["survey_type"] == "Attendance Light"
        enabled: true
  Production---Coffee-DRC---SalesForce----CommCare---Project-Roles:
    name: Production - Coffee DRC - SalesForce -- CommCare - Project Roles
    jobs:
      Production---Coffee-DRC---SalesForce----CommCare---Project-Roles:
        name: Production - Coffee DRC - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Project Roles
          //Production - Coffee DRC | SalesForce --> CommCare | Project Roles


          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Staff",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_agr_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "mjuma",
                    "n1:userID": "f1ffc61aa02f30f7c078ddc5a95f48a9"
                  };
                })
              )
            )
          );// Your job goes here.

          // Version control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-DRC---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Production---Coffee-DRC---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Production Coffee DRC SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ca_svc"
        enabled: true
  Production-Training-Sessions-Regrow-Yirga-C2025-SalesForce-CommCare:
    name: Production Training Sessions Regrow Yirga C2025 SalesForce CommCare
    jobs:
      Production-Training-Sessions-Regrow-Yirga-C2025-SalesForce-CommCare:
        name: Production Training Sessions Regrow Yirga C2025 SalesForce CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee ET - Regrow Yirga Agronomy C2025
          // DATA FLOW :: SalesForce --> TO --> CommCare
          // TARGET APPS :: // JOB PURPOSE :: Coffee - ET Regrow Yirga (Ag) C2025
          // JOB NAME :: Production | Training Sessions - ET Regrow YG (Ag) C2025 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c4"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_et_regrow_ag_c4_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_et_regrow_ag_c4_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production-Training-Sessions-Regrow-Yirga-C2025-SalesForce-CommCare:
        source_trigger: webhook
        target_job: Production-Training-Sessions-Regrow-Yirga-C2025-SalesForce-CommCare
        condition_type: js_expression
        condition_label: Production Training Sessions Regrow Yirga C2025 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c4"
        enabled: true
  Production---Project-Role---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
    name: Production - Project Role - ET GAC CREW TFS C2025 - SalesForce -- CommCare
    jobs:
      Production---Project-Role---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
        name: Production - Project Role - ET GAC CREW TFS C2025 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending project roles
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET GAC CREW TFS C2025
          // JOB NAME :: Production | Project Role - ET GAC CREW TFS C2025 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_et_crew_gac_tfs_c2025"}
          // AUTHOR :: Emmanuel Mwaka | emwaka@tns.org

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_crew_gac_tfs_c2025_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:FFGs_Observed": null,
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Project-Role---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Project-Role---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Project Role ET GAC CREW TFS C2025 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_crew_gac_tfs_c2025"
        enabled: true
  Coffee-DRC-GCA-Kabare-C2023---SalesForce----CommCare---Training-Sessions:
    name: Coffee DRC GCA Kabare C2023 - SalesForce -- CommCare - Training Sessions
    jobs:
      Coffee-DRC-GCA-Kabare-C2023---SalesForce----CommCare---Training-Sessions:
        name: Coffee DRC GCA Kabare C2023 - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.
          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_drc_gca_kabare_c2023_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_drc_gca_kabare_c2023_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee-DRC-GCA-Kabare-C2023---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Coffee-DRC-GCA-Kabare-C2023---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee DRC GCA Kabare C2023 SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gca_kabare_c2023"
        enabled: true
  Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Groups:
    name: Coffee - ZW Nespresso -Ag- - c2 - SalesForce -- CommCare - Training Groups
    jobs:
      Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Groups:
        name: Coffee - ZW Nespresso -Ag- - c2 - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW Nespresso (Ag) - c2 | SalesForce --> CommCare | Training Groups
          //coffee_zim_c2_agronomy
          //{"uniqueProjectKey":"coffee_zim_c2_agronomy","source":"SF","jobType":"Training Group"}

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zim_c2_ag_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_zim_c2_ag_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee ZW Nespresso Ag c2 SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zim_c2_ag"
        enabled: true
  Coffee---PR-2022---Salesforce----CommCare---Project-Roles:
    name: Coffee - PR 2022 - Salesforce -- CommCare - Project Roles
    jobs:
      Coffee---PR-2022---Salesforce----CommCare---Project-Roles:
        name: Coffee - PR 2022 - Salesforce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Project Role Job
          //Coffee:: PR C2020 | SalesForce --> CommCare | Project Roles
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_puerto_rico_2022"}

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Staff",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_pr_2022_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---PR-2022---Salesforce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Coffee---PR-2022---Salesforce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee PR 2022 Salesforce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_puerto_rico_2022"
        enabled: true
  Production---Coffee-DRC---CommCare----Salesforce---Training-Attendance:
    name: Production - Coffee DRC - CommCare -- Salesforce - Training Attendance
    jobs:
      Production---Coffee-DRC---CommCare----Salesforce---Training-Attendance:
        name: Production - Coffee DRC - CommCare -- Salesforce - Training Attendance
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Training Attendance
          //Production - Coffee DRC | CommCare --> Salesforce | Training Attendance


          each(
            "$.data",
            upsert("Training_Session__c", "CommCare_Case_Id__c",
              fields(
                field("CommCare_Case_Id__c", dataValue("form.selected_training_module")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Male_Attendance__c", dataValue("form.Current_session_participants.male_attendance")),
                field("Female_Attendance__c", dataValue("form.Current_session_participants.female_attendance")),
                field("Number_in_Attendance__c", dataValue("form.Current_session_participants.total_attendance")),

                field("Date__c", dataValue("form.Current_session_participants.date")),
                field("Location_GPS__Latitude__s", function(state) {
                    if(dataValue("form.meta.location.#text")(state) !== undefined) {
                      var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                      return coordinates[0]; 
                    }
                }),
                field("Location_GPS__Longitude__s", function(state) {
                    if(dataValue("form.meta.location.#text")(state) !== undefined) {
                      var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                      return coordinates[1]; 
                    }
                }),
                field("Altitude__c", function(state) {
                    if(dataValue("form.meta.location.#text")(state) !== undefined) {
                      var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                      return coordinates[2]; 
                    }
                })
                
              )
            )
          );

          // Version control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-DRC---CommCare----Salesforce---Training-Attendance:
        source_trigger: webhook
        target_job: Production---Coffee-DRC---CommCare----Salesforce---Training-Attendance
        condition_type: js_expression
        condition_label: Production Coffee DRC CommCare Salesforce Training Attendance
        condition_expression: |
          state.data.form["survey_type"] == "Attendance Light" && state.data["app_id"] == "eeddc901b4aa4652b7252240152b20d5"
        enabled: true
  Production---Project-Role---ET-Regrow-YG--Ag--C2025---SalesForce----CommCare:
    name: Production - Project Role - ET Regrow YG -Ag- C2025 - SalesForce --
      CommCare
    jobs:
      Production---Project-Role---ET-Regrow-YG--Ag--C2025---SalesForce----CommCare:
        name: Production - Project Role - ET Regrow YG -Ag- C2025 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending project roles for Coffee ET Yirga Regrow 2025C
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET Regrow Yirga (Ag) C2025
          // JOB NAME :: Production | Project Role - ET Regrow YG (Ag) C2025 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c4"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org
          // EDITED :: Emmanuel Mwaka | emwaka@tns.org

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_regrow_ag_c4_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:FFGs_Observed": null,
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Project-Role---ET-Regrow-YG--Ag--C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Project-Role---ET-Regrow-YG--Ag--C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Project Roles Regrow Yirga C2025 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c4"
        enabled: true
  Production---Participants---ET-HWG-JCP-C2023---SalesForce----CommCare:
    name: Production - Participants - ET HWG JCP C2023 - SalesForce -- CommCare
    jobs:
      Production---Participants---ET-HWG-JCP-C2023---SalesForce----CommCare:
        name: Production - Participants - ET HWG JCP C2023 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee - ET HWG JCP C2023
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET HWG JCP C2023
          // JOB NAME :: Production | Participants - ET HWG JCP C2023 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_c2023"}
          // AUTHOR :: Yves Mugenga | ymugenga@tns.org

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_c2023_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_hwg_jcp_c2023_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---ET-HWG-JCP-C2023---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---ET-HWG-JCP-C2023---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Participants HWG JCP C2023 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_c2023"
        enabled: true
  Production---Coffee-ZIM---CommCare----Salesforce---Training-Attendance:
    name: Production - Coffee ZIM - CommCare -- Salesforce - Training Attendance
    jobs:
      Production---Coffee-ZIM---CommCare----Salesforce---Training-Attendance:
        name: Production - Coffee ZIM - CommCare -- Salesforce - Training Attendance
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Attendance Light

          each(
            "$.data",
            upsert("Training_Session__c", "CommCare_Case_Id__c",
              fields(
                field("CommCare_Case_Id__c", dataValue("form.selected_training_module")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Male_Attendance__c", dataValue("form.Current_session_participants.male_attendance")),
                field("Female_Attendance__c", dataValue("form.Current_session_participants.female_attendance")),
                field("Number_in_Attendance__c", dataValue("form.Current_session_participants.total_attendance")),

                field("Date__c", dataValue("form.Current_session_participants.date")),
                field("Location_GPS__Latitude__s", function(state) {
                    if(dataValue("form.meta.location.#text")(state) !== undefined) {
                      var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                      return coordinates[0]; 
                    }
                }),
                field("Location_GPS__Longitude__s", function(state) {
                    if(dataValue("form.meta.location.#text")(state) !== undefined) {
                      var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                      return coordinates[1]; 
                    }
                }),
                field("Altitude__c", function(state) {
                    if(dataValue("form.meta.location.#text")(state) !== undefined) {
                      var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                      return coordinates[2]; 
                    }
                })
                
              )
            )
          );

          // Version control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---CommCare----Salesforce---Training-Attendance:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---CommCare----Salesforce---Training-Attendance
        condition_type: js_expression
        condition_label: Production Coffee ZIM CommCare Salesforce Training Attendance
        condition_expression: |
          state.data.form["survey_type"] == "Attendance Light" && state.data["app_id"] == "b75286e874c74eb09b8da436709d7f3c"
        enabled: true
  Production---Farm-Visit---PR-2022---CommCare----Salesforce:
    name: Production - Farm Visit - PR 2022 - CommCare -- Salesforce
    jobs:
      Production---Farm-Visit---PR-2022---CommCare----Salesforce:
        name: Production - Farm Visit - PR 2022 - CommCare -- Salesforce
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |+
          //FARM VISIT JOB FOR ALL PUERTO RICO PROJECTS
          //Production - Farm Visit :: PR 2022 | CommCare --> Salesforce | Farm Visit Full
          //PR C2020, PR C2019
          //if (state.data.app_id == "e16e09252eb942a788bd6600e6ceeb28") {

          //loop through participants and insert in database
          /*    beta.each(

                  function(state) {
                      if (state.data.form.present_participants) {
                          return state.data.form.present_participants.split(" ").map(
                              function(pId) {
                                  return {
                                      participant: pId,
                                      session: dataValue("form.training_session")(state),
                                      att_submission: dataValue("form.training_session")(state) + pId,
                                      fv_submission: "FV-" + dataValue("id")(state),
                                      sessionPhoto: dataValue("form.photo")(state)
                                  };
                              }
                          );
                      }
                  },
                  upsert("FV_Attendance__c", "Submission_ID__c",
                      fields(
                          field("Submission_ID__c", dataValue("att_submission")), //attendance submission_id
                          field("FV_Submission_ID__c", dataValue("fv_submission")), //farm visit submission_id
                          field("Status__c", "Present"),
                          relationship("Training_Session__r", "CommCare_Case_Id__c", dataValue("session")),
                          relationship("Participant__r", "CommCare_Case_Id__c", dataValue("participant"))
                      )
                  )

              );
          */
          // Register new participants if they exist

          //insert household object
            beta.each(
              function(substate){
                var createdObject = [];
                  
                var form = dataValue('form')(substate);
                
                if(!form.hasOwnProperty("new_farmer")){
                  console.log("Not Upserting Household: No New Farmer!");
                  return [];
                }
                
                if(dataValue('form.new_farmer')(substate) === "1"){
                  createdObject.push(state);
                }
                
                return createdObject;
              },
              // Insert Household for New Farmer New Household OR New Farmer Existing Household but for Primary Member OR Existing Farmer Change in FFG but for Primary Member
              upsert(
                "Household__c",
                "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue("form.participant_data.farmer_registration_details.Household_Id")(state)),
                  field("Name", dataValue("form.participant_data.farmer_registration_details.Household_Number")(state)),
                  field("Training_Group__c", dataValue("form.participant_data.farmer_registration_details.Training_Group_Id")(state)),
                  field("Farm_Size__c", dataValue("form.participant_data.farmer_registration_details.Farm_Size")(state)),
                  field(
                    "Farm_Size_Before__c",
                    dataValue("form.participant_data.farm_size_3_years_and_older")(state)
                  ),
                  field(
                    "Farm_Size_After__c",
                    dataValue("form.participant_data.farm_size_under_3_years")(state)
                  )
                )
              )
            );
              //insert || update :: participant object :: new household created || existing household updated
            beta.each(
                function(substate){
                  var createdObject = [];
                  
                  var form = dataValue('form')(substate);
                  
                  if(!form.hasOwnProperty("new_farmer")){
                    console.log("Not Upserting Participant: No New Farmer!");
                    return [];
                  }
                  
                  if(dataValue('form.new_farmer')(substate) === "1"){
                    createdObject.push(state);
                  }
                  
                  return createdObject;
                },
                upsert(
                  "Participant__c",
                  "CommCare_Case_Id__c",
                  fields(
                    field("CommCare_Case_Id__c", substate => {
                        var result = '';
                        if(1==1){
                          // console.log("1st Value: " + dataValue("form['subcase_0'].case['@case_id']")(state));
                          // console.log("2nd Value: " + dataValue("form.subcase_0.case['@case_id']")(state));
                          // console.log("3rd Value: " + dataValue("form['subcase_0'].case['@case_id']")(substate));
                          // console.log("4th Value: " + dataValue("form.subcase_0.case['@case_id']")(substate));
                          // console.log("5th Value: " + state.data.form.subcase_0.case['@case_id']);
                          result = state.data.form['subcase_0'].case['@case_id'];
                        }
                        return result;
                      }),
                    field("TNS_Id__c", dataValue("form.participant_data.farmer_registration_details.Farmer_Id")(state)),
                    field("Age__c", dataValue("form.participant_data.farmer_registration_details.Age")(state)),
                    field("Name", dataValue("form.participant_data.farmer_registration_details.First_Name")(state)),
                    field("Middle_Name__c", dataValue("form.participant_data.farmer_registration_details.Middle_Name")(state)),
                    field("Last_Name__c", dataValue("form.participant_data.farmer_registration_details.Last_Name")(state)),
                    field("Gender__c", dataValue("form.participant_data.farmer_registration_details.Gender")(state)),
                    field("Status__c", dataValue("form.participant_data.farmer_registration_details.Status")(state)),
                    field("Farm_Size__c", dataValue("form.participant_data.farmer_registration_details.Farm_Size")(state)),
                    field("Sent_to_OpenFn_Status__c", "Complete"),
                    field("Phone_Number__c", dataValue("form.participant_data.farmer_registration_details.Phone_Number")(state)),
                    field(
                      "Primary_Household_Member__c",
                      dataValue("form.participant_data.farmer_registration_details.Primary_Household_Member")(state)
                    ),
                    field("Registration_Date__c", dataValue("form.participant_data.farmer_registration_details.registration_date")(state)),
                    field("Create_In_CommCare__c", false),
                    relationship(
                      "Household__r",
                      "Household_ID__c",
                      dataValue("form.participant_data.farmer_registration_details.Household_Id")(state)
                    ),
                    relationship(
                      "Training_Group__r",
                      "CommCare_Case_Id__c",
                      dataValue("form.participant_data.farmer_registration_details.Training_Group_Id")(state)
                    )
                  )
                )
              );

          //insert the farm visit record
            each(
              "$.data",
              upsert(
                "Farm_Visit__c",
                "FV_Submission_ID__c",
                fields(
                  field("Name__c", "FV-" + dataValue("id")(state)),
                  field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                  field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                  field("Training_Group__c", dataValue("form.case.@case_id")),
                  relationship("Farm_Visited__r", "CommCare_Case_Id__c", function(state){
                    var result = "";
                    if(!state.data.form.hasOwnProperty("new_farmer")){
                      result = dataValue("form.farm_being_visted")(state);
                      return result;
                    }
                    if(state.data.form.new_farmer == "0"){
                      result = dataValue("form.farm_being_visted")(state);
                    } else if(state.data.form.new_farmer == "1") {
                      result = state.data.form['subcase_0'].case['@case_id'];
                    }
                    return result;
                  }),
                  field("Primary_Farmer_PIMA_ID__c", dataValue("form.farm_being_visted")),
                  field(
                    "Visit_Has_Training__c",
                    dataValue("form.is_this_a_farm_training_visit")
                  ),
                  //  field("Training_Session__c", dataValue("form.training_session")),
                  field(
                    "Other_Participants_Present__c",
                    dataValue("form.any_other_participants_present")
                  ),
                  field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                  field("Date_Visited__c", dataValue("form.date_of_visit")),
                  field("visit_comments__c", dataValue("form.farm_visit_comments")),
                  field("Farmer_Trainer__c", dataValue("form.trainer")),
                  field(
                    "No_of_curedas__c",
                    dataValue("form.opening_questions.number_of_curedas")
                  ),
                  field(
                    "No_of_separate_coffee_fields__c",
                    dataValue("form.opening_questions.number_of_separate_coffee_fields")
                  ),
                  field("Field_Age__c", dataValue("form.field_age")),
                  field("Field_Size__c", function (state) {
                    var fieldSize = "";
                    if (
                      dataValue("form.field_size")(state) !== undefined &&
                      dataValue("form.field_size")(state) !== ""
                    ) {
                      fieldSize = dataValue("form.field_size");
                    } else if (
                      dataValue("form.field_size1")(state) !== undefined &&
                      dataValue("form.field_size1")(state) !== ""
                    ) {
                      fieldSize = dataValue("form.field_size1");
                    }
            
                    return fieldSize;
                  }),
                  field("Farm_Visit_Photo_Url__c", function (state) {
                    var farmVisitPhotoUrl = "";
                    if (
                      dataValue("form.farm_visit_photo")(state) !== undefined &&
                      dataValue("form.farm_visit_photo")(state) !== ""
                    ) {
                      farmVisitPhotoUrl =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue("form.farm_visit_photo")(state);
                    }
                    return farmVisitPhotoUrl;
                  }),
                  field("Signature__c", function (state) {
                    var recorderSignatureUrl = "";
                    if (
                      dataValue("form.signature_of_farmer_trainer")(state) !== undefined &&
                      dataValue("form.signature_of_farmer_trainer")(state) !== ""
                    ) {
                      recorderSignatureUrl =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue("form.signature_of_farmer_trainer")(state);
                    }
                    return recorderSignatureUrl;
                  }),
                  field("Location_GPS__Latitude__s", (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                    if (coords) {
                      return coords.split(" ")[0];
                    }
                    // the 'else' is unnecessary, return '' if there are no coords
                    return "";
                  }),
                  field("Location_GPS__Longitude__s", (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                    if (coords) {
                      return coords.split(" ")[1];
                    }
                    // the 'else' is unnecessary, return '' if there are no coords
                    return "";
                  }),
                  field("Altitude__c", (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                    if (coords) {
                      return coords.split(" ")[2];
                    }
                    // the 'else' is unnecessary, return '' if there are no coords
                    return "";
                  })
                )
              )
            );
            
              // update FV with secondary Farmer
              each(
                "$.data",
                upsertIf(
                  state.data.form.secondary_farmer !== "" && state.data.form.secondary_farmer_available == 'yes',
                  "Farm_Visit__c",
                  "FV_Submission_ID__c",
                  fields(
                    field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                    relationship("Secondary_Farmer__r", "CommCare_Case_Id__c", dataValue("form.secondary_farmer")),
                    field("Secondary_Farmer_PIMA_ID__c", dataValue("form.secondary_farmer"))
                    )
                  )
                );

           //Best Practices :: Main Stem && Weeding &&  Shade Control && Record Keeping && Compost && Erosion Control && Nutrition
            each(
              "$.data",
              upsert(
                "FV_Best_Practices__c",
                "FV_Submission_ID__c",
                fields(
                  relationship("Farm_Visit__r", "FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                  field("Name__c", "FV-" + dataValue("id")(state)),
                  field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
            
                  //main stems
                  field(
                    "number_of_main_stems_on_majority_trees__c",
                    dataValue(
                      "form.best_practice_questions.main_stems.number_of_main_stems_on_majority_trees"
                    )
                  ),
            
                  /*    field("number_of_main_stems_on_majority_trees__c", function(state){
                              
                              var numberOfMainStems = dataValue("form.best_practice_questions.main_stems.number_of_main_stems_on_majority_trees")(state);
                              var returnNumberOfMainStems = 0;
                              
                              if (numberOfMainStems !== undefined && numberOfMainStems !== '') {
                                  returnNumberOfMainStems = numberOfMainStems;
                              }
                              
                              return returnNumberOfMainStems;
                              
                            }),
                            
                        */
                  field("photo_of_trees_and_average_main_stems__c", function (state) {
                    var mainStemsPhotoURL = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.main_stems.trees_and_main_stems_photo"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.main_stems.trees_and_main_stems_photo"
                      )(state) !== ""
                    ) {
                      mainStemsPhotoURL =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.main_stems.trees_and_main_stems_photo"
                        )(state);
                    }
                    return mainStemsPhotoURL;
                  }),
            
                  //nutrition
                  field("Color_of_coffee_tree_leaves__c", function (state) {
                    var colorOfCoffeeLeaves = dataValue(
                      "form.best_practice_questions.nutrition.are_the_leave_green_or_yellow_pale_green"
                    )(state);
                    var returnColorOfCoffeeLeaves = "";
            
                    if (
                      colorOfCoffeeLeaves !== undefined &&
                      colorOfCoffeeLeaves !== "" &&
                      colorOfCoffeeLeaves == 0
                    ) {
                      returnColorOfCoffeeLeaves =
                        "5% or more (5 or more in 100) of the leaves are yellow, pale green or brown.";
                    }
            
                    if (
                      colorOfCoffeeLeaves !== undefined &&
                      colorOfCoffeeLeaves !== "" &&
                      colorOfCoffeeLeaves == 1
                    ) {
                      returnColorOfCoffeeLeaves =
                        "Nearly all leaves are dark green and less than 5% (less than 5 in 100) are yellow, pale green, or brown.";
                    }
            
                    return returnColorOfCoffeeLeaves;
                  }),
            
                  //weeding
                  field("how_many_weeds_under_canopy_and_how_big__c", function (state) {
                    var weedsUnderCanopy = dataValue(
                      "form.best_practice_questions.weeding.how_many_weeds_under_canopy_and_how_big_are_they"
                    )(state);
                    var returnWeedsUnderCanopy = "";
            
                    if (weedsUnderCanopy == 1) {
                      returnWeedsUnderCanopy =
                        "Few small weeds (less than 30cm) under the tree canopy";
                    }
            
                    if (weedsUnderCanopy == 2) {
                      returnWeedsUnderCanopy =
                        "Many small weeds under the tree canopy (ground is covered with weeds)";
                    }
            
                    if (weedsUnderCanopy == 3) {
                      returnWeedsUnderCanopy =
                        "Many large weeds under the tree canopy (ground is covered with weeds)";
                    }
            
                    return returnWeedsUnderCanopy;
                  }),
            
                  field(
                    "Have_herbicides_been_used_on_the_field__c",
                    dataValue("form.best_practice_questions.weeding.used_herbicides")
                  ),
                  
                  field(
                    "Do_you_need_to_spray_to_manage_leaf_rust__c",
                    dataValue("form.best_practice_questions.pesticide_use.do_you_need_to_spray_to_manage_leaf_rust")
                  ),
                  // field("Herbicide_products_used_on_farm__c", function(state){
            
                  //   var herbicideUsed = dataValue("form.best_practice_questions.weeding.which_product_have_you_used");
                  //   var returnHerbicideUsed = "";
            
                  //   if(herbicideUsed == 1){
            
                  //     returnHerbicideUsed = "Glyphosate (Honcho Plus, Round Up Ultra, GlyStar Plus, Credit, Compare and Save, TouchDown)";
            
                  //   }
            
                  //   if(herbicideUsed == 2){
            
                  //     returnHerbicideUsed = "Paraquat (Gramaxon, Parazone, Parashot)";
            
                  //   }
            
                  //   return returnHerbicideUsed;
            
                  // }),
            
                  field("photo_of_weeds_under_the_canopy__c", function (state) {
                    var weedsPhotoUrl = dataValue(
                      "form.best_practice_questions.weeding.weeds_under_the_canopy_photo"
                    )(state);
                    var returnWeedsPhotoUrl = "";
            
                    if (weedsPhotoUrl !== undefined && weedsPhotoUrl !== "") {
                      returnWeedsPhotoUrl =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        weedsPhotoUrl;
                    }
            
                    return returnWeedsPhotoUrl;
                  }),
            
                  //shade management
                  field("level_of_shade_present_on_the_farm__c", function (state) {
                    var levelOfShadeOnPlot = dataValue(
                      "form.best_practice_questions.shade_control.level_of_shade_present_on_the_farm"
                    )(state);
                    var returnLevelOfShadeOnPlot = "";
            
                    if (levelOfShadeOnPlot == 0) {
                      returnLevelOfShadeOnPlot = "NO shade, less than 5%";
                    }
            
                    if (levelOfShadeOnPlot == 1) {
                      returnLevelOfShadeOnPlot = "Light shade, 5 to 20%";
                    }
            
                    if (levelOfShadeOnPlot == 2) {
                      returnLevelOfShadeOnPlot = "Medium shade, 20 to 40%";
                    }
            
                    if (levelOfShadeOnPlot == 3) {
                      returnLevelOfShadeOnPlot = "Heavy shade, over 40%";
                    }
            
                    return returnLevelOfShadeOnPlot;
                  }),
            
                  field("have_new_shade_been_planted_last_3_years__c", function (state) {
                    var newShadePlanted = dataValue(
                      "form.best_practice_questions.shade_control.new_shade_trees_in_the_last_3_years"
                    )(state);
                    var returnNewShadePlanted = "";
            
                    if (newShadePlanted == 0 || newShadePlanted == 2) {
                      returnNewShadePlanted = "No";
                    }
            
                    if (newShadePlanted == 1) {
                      returnNewShadePlanted = "Yes";
                    }
            
                    return returnNewShadePlanted;
                  }),
            
                  field("photo_of_level_of_shade_on_the_plot__c", function (state) {
                    var shadePhotoUrl = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot"
                      )(state) !== ""
                    ) {
                      shadePhotoUrl =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue("form.photo")(state);
                    }
            
                    return shadePhotoUrl;
                  }),
            
                  //compost manure
                  field("do_you_have_compost_manure__c", function (state) {
                    var haveCompostManure = dataValue(
                      "form.best_practice_questions.compost.do_you_have_compost_manure"
                    )(state);
                    var returnHaveCompostManure = "";
            
                    if (
                      haveCompostManure !== undefined &&
                      haveCompostManure !== "" &&
                      haveCompostManure == 0
                    ) {
                      returnHaveCompostManure = "No";
                    }
            
                    if (
                      haveCompostManure !== undefined &&
                      haveCompostManure !== "" &&
                      haveCompostManure == 1
                    ) {
                      returnHaveCompostManure = "Yes";
                    }
            
                    return returnHaveCompostManure;
                  }),
            
                  field("photo_of_the_compost_manure__c", function (state) {
                    var compostPhotoUrl = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.compost.photo_of_the_compost_manure"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.compost.photo_of_the_compost_manure"
                      )(state) !== ""
                    ) {
                      compostPhotoUrl =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.compost.photo_of_the_compost_manure"
                        )(state);
                    }
            
                    return compostPhotoUrl;
                  }),
            
                  //erosion control
                  /*    field("take_a_photo_of_erosion_control__c", function(state) {
                              
                              var erosionPhotoUrl = '';
                              if(dataValue("form.best_practice_questions.erosion_control.photo_of_erosion_control_method")(state) !== undefined && dataValue("form.best_practice_questions.erosion_control.photo_of_erosion_control_method")(state) !== '') {
                                erosionPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.erosion_control.photo_of_erosion_control_method")(state);
                                
                              }
                              
                              return erosionPhotoUrl;
                              
                            }),
                        */
                  field("Stabilizing_Grasses_Photo_URL__c", function (state) {
                    var sgPhotoURL = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.erosion_control.stabilizing_grasses_image"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.erosion_control.stabilizing_grasses_image"
                      )(state) !== ""
                    ) {
                      sgPhotoURL =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.erosion_control.stabilizing_grasses_image"
                        )(state);
                    }
            
                    return sgPhotoURL;
                  }),
                  field("Mulch_Photo_URL__c", function (state) {
                    var mulchPhotoURL = "";
                    if (
                      dataValue("form.best_practice_questions.erosion_control.mulch_image")(
                        state
                      ) !== undefined &&
                      dataValue("form.best_practice_questions.erosion_control.mulch_image")(
                        state
                      ) !== ""
                    ) {
                      mulchPhotoURL =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.erosion_control.mulch_image"
                        )(state);
                    }
            
                    return mulchPhotoURL;
                  }),
                  field("Water_Traps_Photo_URL__c", function (state) {
                    var wtPhotoURL = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.erosion_control.water_traps_or_trenches_image"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.erosion_control.water_traps_or_trenches_image"
                      )(state) !== ""
                    ) {
                      wtPhotoURL =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.erosion_control.water_traps_or_trenches_image"
                        )(state);
                    }
            
                    return wtPhotoURL;
                  }),
                  field("Physical_Barriers_Photo_URL__c", function (state) {
                    var pbPhotoURL = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.erosion_control.physical_barriers_image"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.erosion_control.physical_barriers_image"
                      )(state) !== ""
                    ) {
                      pbPhotoURL =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.erosion_control.physical_barriers_image"
                        )(state);
                    }
            
                    return pbPhotoURL;
                  }),
                  field("Terraces_Photo_URL__c", function (state) {
                    var terracesPhotoURL = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.erosion_control.terraces_image"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.erosion_control.terraces_image"
                      )(state) !== ""
                    ) {
                      terracesPhotoURL =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.erosion_control.terraces_image"
                        )(state);
                    }
            
                    return terracesPhotoURL;
                  }),
                  field("Contour_Planting_Photo_URL__c", function (state) {
                    var cpPhotoURL = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.erosion_control.contour_planting_image"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.erosion_control.contour_planting_image"
                      )(state) !== ""
                    ) {
                      cpPhotoURL =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.erosion_control.contour_planting_image"
                        )(state);
                    }
            
                    return cpPhotoURL;
                  }),
                  field("Cover_Crop_Photo_URL__c", function (state) {
                    var ccPhotoURL = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image"
                      )(state) !== ""
                    ) {
                      ccPhotoURL =
                        "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image"
                        )(state);
                    }
            
                    return ccPhotoURL;
                  }),
            
                  //record keeping
                  field("do_you_have_a_record_book__c", function (state) {
                    var haveRecordBook = dataValue(
                      "form.best_practice_questions.record_keeping.do_you_have_a_record_book"
                    )(state);
                    var returnHaveRecordBook = "";
            
                    if (haveRecordBook == 0) {
                      returnHaveRecordBook = "No";
                    }
            
                    if (haveRecordBook == 1) {
                      returnHaveRecordBook = "Yes";
                    }
            
                    return returnHaveRecordBook;
                  }),
            
                  field("are_there_records_on_the_record_book__c", function (state) {
                    var recordsOnRecordBook = dataValue(
                      "form.best_practice_questions.record_keeping.are_there_records_on_the_record_book"
                    )(state);
                    var returnRecordsOnRecordBook = "";
            
                    if (
                      recordsOnRecordBook !== undefined &&
                      recordsOnRecordBook !== "" &&
                      recordsOnRecordBook == 0
                    ) {
                      returnRecordsOnRecordBook = "No";
                    }
            
                    if (
                      recordsOnRecordBook !== undefined &&
                      recordsOnRecordBook !== "" &&
                      recordsOnRecordBook == 1
                    ) {
                      returnRecordsOnRecordBook = "Yes";
                    }
            
                    return returnRecordsOnRecordBook;
                  }),
            
                  field("take_a_photo_of_the_record_book__c", function (state) {
                    var recordBookPhotoUrl = "";
                    if (
                      dataValue(
                        "form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book"
                      )(state) !== undefined &&
                      dataValue(
                        "form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book"
                      )(state) !== ""
                    ) {
                      recordBookPhotoUrl =
                        "https://www.commcarehq.org/a/" +
                          dataValue("domain")(state) +
                          "/api/form/attachment/" +
                          dataValue("form.meta.instanceID")(state) +
                          "/" +
                          dataValue(
                            "form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book"
                          )(state) !==
                          undefined &&
                        dataValue(
                          "form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book"
                        )(state);
                    }
            
                    return recordBookPhotoUrl;
                  })
                )
              )
            );

          //Farm Visit Best Practice Results
          //loop through methods of erosion control and insert into database :: Erosion Control BP
          beta.each(
              function (state) {
                //incoming erosion data
                var best_practice_results_data = dataValue(
                  "form.best_practice_questions.erosion_control.methods_of_erosion_control"
                )(state);
            
                if (best_practice_results_data !== undefined) {
                  return best_practice_results_data.split(" ").map(function (resultId) {
                    return {
                      result_data: resultId,
                      best_result_submission:
                        "FVBPN-" + dataValue("id")(state) + "_erosion_" + resultId,
                      farm_visit_submission: "FV-" + dataValue("id")(state)
                    };
                  });
                }
              },
              upsert(
                "FV_Best_Practice_Results__c",
                "Best_Practice_Result_Submission_ID__c",
                fields(

                  field(
                    "Best_Practice_Result_Submission_ID__c",
                    dataValue("best_result_submission")
                  ), //best result submission ID
                  relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                  field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                  field("Best_Practice_Result_Type__c", "Erosion Control"), //this is the actual result type
                  field("Best_Practice_Result_Description__c", function (state) {
                    var returnResults = "";
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "1"
                    ) {
                      returnResults = "Stabilizing grasses";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "2"
                    ) {
                      returnResults = "Mulch";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "3"
                    ) {
                      returnResults = "Water traps or trenches";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "4"
                    ) {
                      returnResults = "Physical barriers. (e.g. rocks)";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "5"
                    ) {
                      returnResults = "Terraces";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "6"
                    ) {
                      returnResults = "Contour planting";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "7"
                    ) {
                      returnResults = "Bean or Arachis cover crop between the rows";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "0"
                    ) {
                      returnResults = "No erosion control method seen";
                    }
            
                    return returnResults;
                  })
                )
              )
            );
            
            //loop through chemical/fertilizier applied and insert into database :: Nutrition BP
            beta.each(
              function (state) {
                //incoming chemical/fertilizer used data
                var best_practice_results_data = dataValue(
                  "form.best_practice_questions.nutrition.type_chemical_applied_on_coffee_last_12_months"
                )(state);
            
                if (best_practice_results_data !== undefined) {
                  return best_practice_results_data.split(" ").map(function (resultId) {
                    return {
                      result_data: resultId,
                      best_result_submission:
                        "FVBPN-" + dataValue("id")(state) + "_fertilizer_" + resultId,
                      farm_visit_submission: "FV-" + dataValue("id")(state),
                    };
                  });
                }
              },
              upsert(
                "FV_Best_Practice_Results__c",
                "Best_Practice_Result_Submission_ID__c",
                fields(
                  field(
                    "Best_Practice_Result_Submission_ID__c",
                    dataValue("best_result_submission")
                  ), //best result submission ID
                  relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                  field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                  field(
                    "Best_Practice_Result_Type__c",
                    "Chemicals and Fertilizers Applied"
                  ), //this is the actual result type
                  field("Best_Practice_Result_Description__c", function (state) {
                    var returnResults = "";
            
                    if (
                      dataValue("result_data")(state) !== undefined && 
                      (dataValue("result_data")(state) == "1" || 
                      dataValue("result_data")(state) == "2")
                    ) {
                      returnResults = "NPK 10:10:5-10";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      (dataValue("result_data")(state) == "3" ||
                      dataValue("result_data")(state) == "4" ||
                      dataValue("result_data")(state) == "5" ||
                      dataValue("result_data")(state) == "6" ||
                      dataValue("result_data")(state) == "7")
                    ) {
                      returnResults = "NPK 10:5:15-20";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      (dataValue("result_data")(state) == "8" ||
                      dataValue("result_data")(state) == "9" ||
                      dataValue("result_data")(state) == "10")
                    ) {
                      returnResults = "NPK 15:5:10-19";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "11"
                    ) {
                      returnResults = "NPK 15:15:15";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      (dataValue("result_data")(state) == "12" ||
                      dataValue("result_data")(state) == "13")
                    ) {
                      returnResults = "NPK 20:5:10-20";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "14"
                    ) {
                      returnResults = "DAP";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "15"
                    ) {
                      returnResults = "Urea";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "16"
                    ) {
                      returnResults = "Compost or Manure";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "17"
                    ) {
                      returnResults = "Agricultural lime - Calcium Carbonate";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "18"
                    ) {
                      returnResults = "Nutrical (cal dolomita)";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "19"
                    ) {
                      returnResults = "Foliar Zinc or Boron";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "20"
                    ) {
                      returnResults = "General Foliar Feed (Nurish, Ferquido Ferqan)";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "0"
                    ) {
                      returnResults = "Did NOT apply any fertilizer in past 12 months";
                    }
            
                    return returnResults;
                  })
                )
              )
            );
            
            //loop through methods of controlling coffee berry borer :: Integrated Pest and Disease Management BP
            beta.each(
              function (state) {
                //incoming coffee berry borer data
                var best_practice_results_data = dataValue(
                  "form.best_practice_questions.pest_disease_management.methods_of_controlling_coffee_berry_borer"
                )(state);
            
                if (best_practice_results_data !== undefined) {
                  return best_practice_results_data.split(" ").map(function (resultId) {
                    return {
                      result_data: resultId,
                      best_result_submission:
                        "FVBPN-" + dataValue("id")(state) + "_cbb_" + resultId,
                      farm_visit_submission: "FV-" + dataValue("id")(state),
                    };
                  });
                }
              },
              upsert(
                "FV_Best_Practice_Results__c",
                "Best_Practice_Result_Submission_ID__c",
                fields(
                  field(
                    "Best_Practice_Result_Submission_ID__c",
                    dataValue("best_result_submission")
                  ), //best result submission ID
                  relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                  field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                  field(
                    "Best_Practice_Result_Type__c",
                    "Management of Coffee Berry Borer (CBB)"
                  ), //this is the actual result type
                  field("Best_Practice_Result_Description__c", function (state) {
                    var returnResults = "";
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "1"
                    ) {
                      returnResults =
                        "Reduce pesticide use and encourage natural predators";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "2"
                    ) {
                      returnResults = "Strip all berries at the end of harvest";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "3"
                    ) {
                      returnResults = "Harvest ripe cherries regularly";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "4"
                    ) {
                      returnResults = "Collect fallen berries";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "5"
                    ) {
                      returnResults = "Use berry borer traps";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "6"
                    ) {
                      returnResults = "Spray pesticides";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "0"
                    ) {
                      returnResults = "Does not know any methods";
                    }
            
                    return returnResults;
                  })
                )
              )
            );
            
            //loop through methods of controlling leaf rust :: Integrated Pest and Disease Management
            beta.each(
              function (state) {
                //incoming coffee leaf rust data
                var best_practice_results_data = dataValue(
                  "form.best_practice_questions.pest_disease_management.methods_of_controlling_coffee_leaf_rust"
                )(state);
            
                if (best_practice_results_data !== undefined) {
                  return best_practice_results_data.split(" ").map(function (resultId) {
                    return {
                      result_data: resultId,
                      best_result_submission:
                        "FVBPN-" + dataValue("id")(state) + "_clr_" + resultId,
                      farm_visit_submission: "FV-" + dataValue("id")(state),
                    };
                  });
                }
              },
              upsert(
                "FV_Best_Practice_Results__c",
                "Best_Practice_Result_Submission_ID__c",
                fields(
                  field(
                    "Best_Practice_Result_Submission_ID__c",
                    dataValue("best_result_submission")
                  ), //best result submission ID
                  relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                  field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                  field(
                    "Best_Practice_Result_Type__c",
                    "Management of Coffee Leaf Rust (CLR)"
                  ), //this is the actual result type
                  field("Best_Practice_Result_Description__c", function (state) {
                    var returnResults = "";
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "1"
                    ) {
                      returnResults = "Feed the tree well to keep it healthy";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "2"
                    ) {
                      returnResults =
                        "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "3"
                    ) {
                      returnResults = "Prune or keep canopy open";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "4"
                    ) {
                      returnResults = "Spray fungicides";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "5"
                    ) {
                      returnResults = "Grow resistant varieties";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "0"
                    ) {
                      returnResults = "Does not know any methods";
                    }
            
                    return returnResults;
                  })
                )
              )
            );
            
            // pesticide use
            
            // Loop through pests that cause problems on coffee farm
            
             beta.each(
              function (state) {
                //incoming pesticide use data
                var best_practice_results_data =
                  dataValue(
                    "form.best_practice_questions.pesticide_use.which_pests_cause_you_problems"
                  )(state) || "";
            
                if (best_practice_results_data !== undefined) {
                  return best_practice_results_data.split(" ").map(function (resultId) {
                    return {
                      result_data: resultId,
                      best_result_submission:
                        "FVBPN-" + dataValue("id")(state) + "_pesticide_use_" + resultId,
                      farm_visit_submission: "FV-" + dataValue("id")(state),
                    };
                  });
                }
              },
              upsert(
                "FV_Best_Practice_Results__c",
                "Best_Practice_Result_Submission_ID__c",
                fields(
                  field(
                    "Best_Practice_Result_Submission_ID__c",
                    dataValue("best_result_submission")
                  ), //best result submission ID
                  relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                  field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                  field("Best_Practice_Result_Type__c", "Pest Problems"), //this is the actual result type
                  field("Best_Practice_Result_Description__c", function (state) {
                    var returnResults = "";
                    
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "1"
                    ) {
                      returnResults = "Leaf miner";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "2"
                    ) {
                      returnResults = "Coffee Berry Borer";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "3"
                    ) {
                      returnResults = "Scles and Mealy bugs";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "4"
                    ) {
                      returnResults = "None pest issue";
                    }

                    return returnResults;
                  })
                )
              )
            );
            
            // Loop through leaf miner or rust sprays
            
            beta.each(
              function (state) {
                //incoming pesticide use data
                var best_practice_results_data =
                  dataValue(
                    "form.best_practice_questions.pesticide_use.do_you_spray_any_of_the_following_on_your_farm_for_leaf_miner_or_rust"
                  )(state) || "";
            
                if (best_practice_results_data !== undefined) {
                  return best_practice_results_data.split(" ").map(function (resultId) {
                    return {
                      result_data: resultId,
                      best_result_submission:
                        "FVBPN-" + dataValue("id")(state) + "_pesticide_use_" + resultId,
                      farm_visit_submission: "FV-" + dataValue("id")(state),
                    };
                  });
                }
              },
              upsert(
                "FV_Best_Practice_Results__c",
                "Best_Practice_Result_Submission_ID__c",
                fields(
                  field(
                    "Best_Practice_Result_Submission_ID__c",
                    dataValue("best_result_submission")
                  ), //best result submission ID
                  relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                  field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                  field("Best_Practice_Result_Type__c", "Pesticide Sprays"), //this is the actual result type
                  field("Best_Practice_Result_Description__c", function (state) {
                    var returnResults = "";
                    
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "1"
                    ) {
                      returnResults = "Products containing Imidacloprid";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "2"
                    ) {
                      returnResults = "Products containing Propiconazole";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "3"
                    ) {
                      returnResults = "None of the products used";
                    }
            

                    return returnResults;
                  })
                )
              )
            );
            
            
            //loop through pruning methods :: Pruning BP
            beta.each(
              function (state) {
                //incoming pruning data
                var best_practice_results_data =
                  dataValue(
                    "form.best_practice_questions.pruning.pruning_method_on_majority_trees"
                  )(state) || "";
            
                if (best_practice_results_data !== undefined) {
                  return best_practice_results_data.split(" ").map(function (resultId) {
                    return {
                      result_data: resultId,
                      best_result_submission:
                        "FVBPN-" + dataValue("id")(state) + "_pruning_" + resultId,
                      farm_visit_submission: "FV-" + dataValue("id")(state),
                      field_age: dataValue("form.field_age")(state)
                    };
                  });
                }
              },
              upsert(
                "FV_Best_Practice_Results__c",
                "Best_Practice_Result_Submission_ID__c",
                fields(
                  field(
                    "Best_Practice_Result_Submission_ID__c",
                    dataValue("best_result_submission")
                  ), //best result submission ID
                  relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                  field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                  field("Best_Practice_Result_Type__c", "Pruning"), //this is the actual result type
                  field("Best_Practice_Result_Description__c", function (state) {
                    var returnResults = "";
                    
                    var field_age = dataValue("field_age")(state);
                    var numeric_field_age = parseInt(field_age);
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "1"
                    ) {
                      returnResults = "Centers opened";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "2"
                    ) {
                      returnResults = "Unwanted suckers removed";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "3"
                    ) {
                      returnResults = "Dead branches removed";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "4"
                    ) {
                      returnResults = "Branches touching the ground removed";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "5"
                    ) {
                      returnResults = "Broken / unproductive stems and/or branches removed";
                    }
            
                    if (
                      dataValue("result_data")(state) !== undefined &&
                      dataValue("result_data")(state) == "0"
                    ) {
                      returnResults = "No pruning methods used";
                    }
                    else if (numeric_field_age < 3){
                      returnResults = "N/A";
                    }
            
                    return returnResults;
                  })
                )
              )
            );
            
            beta.each(
                function (state) {
                  //incoming pruning data
                  var best_practice_results_data =
                    dataValue(
                      "form.best_practice_questions.weeding.which_product_have_you_used"
                    )(state) || "";
                  // var otherProduct = dataValue("form.weeding.ask_which_other_product_have_you_used")(state);
                  if (best_practice_results_data !== undefined) {
                    return best_practice_results_data.split(" ").map(function (resultId) {
                      return {
                        result_data: resultId,
                        best_result_submission:
                          "FVBPN-" + dataValue("id")(state) + "_weeding_" + resultId,
                        farm_visit_submission: "FV-" + dataValue("id")(state),
                        // other_submission: otherProduct
                      };
                    });
                  }
                },
                upsert(
                  "FV_Best_Practice_Results__c",
                  "Best_Practice_Result_Submission_ID__c",
                  fields(
                    field(
                      "Best_Practice_Result_Submission_ID__c",
                      dataValue("best_result_submission")
                    ), //best result submission ID
                    relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                    field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                    field("Best_Practice_Result_Type__c", "Weeding"), //this is the actual result type
                    field("Best_Practice_Result_Description__c", function (state) {
                      var returnResults = "";
              
                      if (
                        dataValue("result_data")(state) !== undefined &&
                        dataValue("result_data")(state) == "1"
                      ) {
                        returnResults =
                          "Glyphosate (Honcho Plus, Round Up Ultra, GlyStar Plus, Credit, Compare and Save, TouchDown)";
                      }
              
                      if (
                        dataValue("result_data")(state) !== undefined &&
                        dataValue("result_data")(state) == "2"
                      ) {
                        returnResults = "Paraquat (Gramaxon, Parazone, Parashot)";
                      }
              
                      // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){
              
                      //     returnResults = dataValue("other_submission");
                      //console.log("debug", dataValue("result_data")(state));
                      // }
                      return returnResults;
                    })
                  )
                )
              );
            
            //upsert training session
            /*    each(
                    "$.data",
                    upsert("Training_Session__c", "CommCare_Case_Id__c",
                        fields(
                            field("CommCare_Case_Id__c", dataValue("form.training_session")),
                            field("Updated_from_CommCare__c", true)
                        )
                    )
                );
            */
            
            //}
            
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Production---Farm-Visit---PR-2022---CommCare----Salesforce:
        source_trigger: webhook
        target_job: Production---Farm-Visit---PR-2022---CommCare----Salesforce
        condition_type: js_expression
        condition_label: Production - Farm Visit PR 2022 CommCare Salesforce
        condition_expression: |
          state.data.form["survey_type"] == "Farm Visit Full - PR"
        enabled: true
  Coffee-DRC-GCA-Kalehe-C2023---SalesForce----CommCare---Training-Sessions:
    name: Coffee DRC GCA Kalehe C2023 - SalesForce -- CommCare - Training Sessions
    jobs:
      Coffee-DRC-GCA-Kalehe-C2023---SalesForce----CommCare---Training-Sessions:
        name: Coffee DRC GCA Kalehe C2023 - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.
          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_drc_gca_kalehe_c2023_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_drc_gca_kalehe_c2023_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee-DRC-GCA-Kalehe-C2023---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Coffee-DRC-GCA-Kalehe-C2023---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee DRC GCA Kalehe C2023 SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gca_kalehe_c2023"
        enabled: true
  Production---Participants---ET-Regrow-TG--Ag--C2024---SalesForce----CommCare:
    name: Production - Participants - ET Regrow TG -Ag- C2024 - SalesForce --
      CommCare
    jobs:
      Production---Participants---ET-Regrow-TG--Ag--C2024---SalesForce----CommCare:
        name: Production - Participants - ET Regrow TG -Ag- C2024 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee ET - Regrow Yirga Agronomy C2024
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET Regrow Yirga (Ag) C2024
          // JOB NAME :: Production | Participants - ET Regrow YG (Ag) C2024 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c3"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_regrow_ag_c3_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_regrow_ag_c3_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---ET-Regrow-TG--Ag--C2024---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---ET-Regrow-TG--Ag--C2024---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Participants Regrow Yirga C2024 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c3"
        enabled: true
  "x-[archived]-Production---Farm-Visit---AI---CommCare----Salesforce---Farm-Visit-Full---AI":
    name: 'x [archived] Production - Farm Visit - AI - CommCare -- Salesforce - Farm
      Visit Full - AI'
    jobs:
      Production---Farm-Visit---AI---CommCare----Salesforce---Farm-Visit-Full---AI:
        name: Production - Farm Visit - AI - CommCare -- Salesforce - Farm Visit Full -
          AI
        adaptor: '@openfn/language-salesforce@5.0.4'
        credential: null
        body: |
          //FARM VISIT JOB FOR ALL ZIMBABWE PROJECTS
          //Production - Farm Visit :: ZM 2022 | CommCare --> Salesforce | Farm Visit Full
          //ZM ZM C2018
          //if (state.data.app_id == "e16e09252eb942a788bd6600e6ceeb28") {

              //loop through participants and insert in database
          /*    beta.each(

                  function(state) {
                      if (state.data.form.present_participants) {
                          return state.data.form.present_participants.split(" ").map(
                              function(pId) {
                                  return {
                                      participant: pId,
                                      session: dataValue("form.training_session")(state),
                                      att_submission: dataValue("form.training_session")(state) + pId,
                                      fv_submission: "FV-" + dataValue("id")(state),
                                      sessionPhoto: dataValue("form.photo")(state)
                                  };
                              }
                          );
                      }
                  },
                  upsert("FV_Attendance__c", "Submission_ID__c",
                      fields(
                          field("Submission_ID__c", dataValue("att_submission")), //attendance submission_id
                          field("FV_Submission_ID__c", dataValue("fv_submission")), //farm visit submission_id
                          field("Status__c", "Present"),
                          relationship("Training_Session__r", "CommCare_Case_Id__c", dataValue("session")),
                          relationship("Participant__r", "CommCare_Case_Id__c", dataValue("participant"))
                      )
                  )

              );
          */
          	//Farm Visit Best Practice Results
              //loop through methods of erosion control and insert into database :: Erosion Control BP
              beta.each(

                function(state) {

                    //incoming erosion data
                    var best_practice_results_data = dataValue("form.erosion_control.methods_of_erosion_control")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_erosion_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        field("Best_Practice_Result_Type__c", "Erosion Control"),//this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Stabilizing grasses";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Mulch";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Water traps or trenches";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Physical barriers. (e.g. rocks)";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Terraces";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Contour planting";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Bean or Arachis cover crop between the rows";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "No erosion control method seen";

                            }
                            
                            return returnResults;
                          
                        })                
                    )
                )
            );


            //loop through chemical/fertilizier applied and insert into database :: Nutrition BP
            beta.each(

                function(state) {

                    //incoming chemical/fertilizer used data
                    var best_practice_results_data = dataValue("form.nutrition.type_chemical_applied_on_coffee_last_12_months")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_fertilizer_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        field("Best_Practice_Result_Type__c", "Chemicals and Fertilizers Applied"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Compost";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Manure";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Lime";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Compound S";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Compound J";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Single Super Phosphate (SSP)";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Zinc/Boron Foliar Feed (Tracel)";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "8"){

                                returnResults = "Ammonium Nitrate";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "Did NOT apply any fertilizer in past 12 months";

                            }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "9"){

                            //     returnResults = "Agricultural lime - Calcium Carbonate";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "10"){

                            //     returnResults = "Foliar Zinc or Boron";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "11"){

                            //     returnResults = "General Foliar Feed (Nurish, Ferquido Ferqan)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "12"){

                            //     returnResults = "Nutrical (cal dolomita)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "13"){

                            //     returnResults = "15-5-10+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "14"){

                            //     returnResults = "20-5-10+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "15"){

                            //     returnResults = "15-15-15+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "16"){

                            //     returnResults = "10-5-20+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "17"){

                            //     returnResults = "20-5-20+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "18"){

                            //     returnResults = "12-5-15+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "19"){

                            //     returnResults = "14-7-19+3MGO+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "20"){

                            //     returnResults = "Caldo bordeles";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "21"){

                            //     returnResults = "Foliar - lixiviado de bioinsumo (lombricomposta o equivalente)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "22"){

                            //     returnResults = "Urea";

                            // }

                            return returnResults;
                          
                        })
                    )
                )

            );


            //loop through methods of controlling coffee berry borer :: Integrated Pest and Disease Management BP
            beta.each(

                function(state) {

                    //incoming coffee berry borer data
                    var best_practice_results_data = dataValue("form.pest_disease_management.methods_of_controlling_coffee_berry_borer")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_cbb_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        field("Best_Practice_Result_Type__c", "Management of Coffee Berry Borer (CBB)"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Reduce pesticide use and/or encourage natural predators and parasites - beneficial insects.";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Strip all berries at the end of harvest, known as crop hygiene";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Harvest ripe cherries regularly - to reduce pest and disease levels";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Use berry borer traps";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Collect fallen berries at the end of the season - crop hygiene";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Feed the tree well to keep it healthy";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "8"){

                                returnResults = "Prune to keep the canopy open";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "9"){

                                returnResults = "Renovate (new planting) or rejuvenate regularly to keep main stems less than 8 years old";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "10"){

                                returnResults = "Plant and grow disease resistant varieties";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "11"){

                                returnResults = "Smooth the bark to reduce egg laying sites for While Coffee Borer";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "12"){

                                returnResults = "Spray regular pesticides";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "13"){

                                returnResults = "Spray homemade herbal or botanical pesticides";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "Does not know any methods";

                            }

                            return returnResults;
                          
                        })
                    )
                )

            );


            //loop through methods of controlling leaf rust :: Integrated Pest and Disease Management
            // beta.each(

            //     function(state) {

            //         //incoming coffee leaf rust data
            //         var best_practice_results_data = dataValue("form.pest_disease_management.methods_of_controlling_coffee_leaf_rust")(state);

            //         if (best_practice_results_data !== undefined) {

            //             return best_practice_results_data.split(" ").map(
                          
            //                 function(resultId) {
            //                     return {
            //                         result_data: resultId,
            //                         best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_clr_" + resultId,
            //                         farm_visit_submission: "FV-" + dataValue("id")(state)
            //                     };
            //                 }
                            
            //             );

            //         }
            //     },
            //     upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
            //         fields(
            //             field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
            //             field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
            //             field("Best_Practice_Result_Type__c", "Management of Coffee Leaf Rust (CLR)"), //this is the actual result type
            //             field("Best_Practice_Result_Description__c", function(state){
                          
            //                 var returnResults = "";
                          
            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

            //                     returnResults = "Feed the tree well to keep it healthy";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

            //                     returnResults = "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

            //                     returnResults = "Prune or keep canopy open";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

            //                     returnResults = "Spray fungicides";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

            //                     returnResults = "Grow resistant varieties";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

            //                     returnResults = "Does not know any methods";

            //                 }

            //                 return returnResults;
                          
            //             })
            //         )
            //     )

            // );
            

            //loop through pruning methods :: Pruning BP  
              beta.each(

                function(state) {

                    //incoming pruning data
                    var best_practice_results_data = dataValue("form.pruning.pruning_method_on_majority_trees")(state) || "";

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_pruning_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state),
                                    field_age: dataValue("form.field_age")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        field("Best_Practice_Result_Type__c", "Pruning"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                            var field_age = dataValue("field_age")(state);
                            console.log("The string field age is: ");
                            console.log(field_age);
                            const numeric_field_age = parseInt(field_age);
                            console.log("The numeric field age is: ");
                            console.log(numeric_field_age);
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Centers opened";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Unwanted suckers removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Dead branches removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Branches touching the ground removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Broken / unproductive stems and/or branches removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "No pruning methods used";

                            }
                            else if(numeric_field_age < 3) {
                                returnResults = 'N/A'
                            }

                            return returnResults;
                          
                        })
                    )
                )

            );

            beta.each(

              function(state) {

                  //incoming pruning data
                  var best_practice_results_data = dataValue("form.weeding.which_product_have_you_used")(state) || "";
                  var otherProduct = dataValue("form.weeding.ask_which_other_product_have_you_used")(state);
                  console.log("debug", otherProduct);
                  if (best_practice_results_data !== undefined) {

                      return best_practice_results_data.split(" ").map(
                        
                          function(resultId) {
                              return {
                                  result_data: resultId,
                                  best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_weeding_" + resultId,
                                  farm_visit_submission: "FV-" + dataValue("id")(state),
                                  other_submission: otherProduct
                              };
                          }
                          
                      );

                  }
              },
              upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                  fields(
                      field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                      field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                      field("Best_Practice_Result_Type__c", "Weeding"), //this is the actual result type
                      field("Best_Practice_Result_Description__c", function(state){
                        
                          var returnResults = "";
                        
                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                              returnResults = "Glyphosate (Eg Round Up)";

                          }

                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                              returnResults = "Paraquat (Eg. Gramoxone)";

                          }

                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                              returnResults = dataValue("other_submission");
                              console.log("debug", dataValue("other_submission"));
                          }
                          return returnResults;
                        
                      })
                  )
              )

          );
            
           
            //Best Practices :: Main Stem && Weeding &&  Shade Control && Record Keeping && Compost && Erosion Control && Nutrition
            each(
                "$.data",
                upsert("FV_Best_Practices__c", "FV_Submission_ID__c",
                    fields(
                        field("Name__c", "FV-" + dataValue("id")(state)),
                        field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),

                        //main stems
                          field("number_of_main_stems_on_majority_trees__c", dataValue("form.main_stems.number_of_main_stems_on_majority_trees")),
                    
                    /*    field("number_of_main_stems_on_majority_trees__c", function(state){
                          
                          var numberOfMainStems = dataValue("form.main_stems.number_of_main_stems_on_majority_trees")(state);
                          var returnNumberOfMainStems = 0;
                          
                          if (numberOfMainStems !== undefined && numberOfMainStems !== '') {
                              returnNumberOfMainStems = numberOfMainStems;
                          }
                          
                          return returnNumberOfMainStems;
                          
                        }),
                        
                    */    
                        field("photo_of_trees_and_average_main_stems__c", function(state){
                          
                          var mainStemsPhotoURL = "";
                          if(dataValue("form.main_stems.trees_and_main_stems_photo")(state) !== undefined && dataValue("form.main_stems.trees_and_main_stems_photo")(state) !== '') {
                            mainStemsPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.main_stems.trees_and_main_stems_photo")(state);  
                           }
                           return mainStemsPhotoURL;
                           
                        }),

                        //nutrition
                        field("Color_of_coffee_tree_leaves__c", function(state){
                          
                          var colorOfCoffeeLeaves = dataValue("form.nutrition.are_the_leave_green_or_yellow_pale_green")(state);
                          var returnColorOfCoffeeLeaves = "";
                          
                          if(colorOfCoffeeLeaves !== undefined && colorOfCoffeeLeaves !== '' && colorOfCoffeeLeaves == 0){
                            
                            returnColorOfCoffeeLeaves = "5% or more (5 or more in 100) of the leaves are yellow, pale green or brown.";
                            
                          }

                          if(colorOfCoffeeLeaves !== undefined && colorOfCoffeeLeaves !== '' && colorOfCoffeeLeaves == 1){
                            
                            returnColorOfCoffeeLeaves = "Nearly all leaves are dark green and less than 5% (less than 5 in 100) are yellow, pale green, or brown.";
                            
                          }

                          return returnColorOfCoffeeLeaves;

                        }),

                        //weeding
                        field("how_many_weeds_under_canopy_and_how_big__c", function(state){
                          
                          var weedsUnderCanopy = dataValue("form.weeding.how_many_weeds_under_canopy_and_how_big_are_they")(state);
                          var returnWeedsUnderCanopy = "";
                  
                          if(weedsUnderCanopy == 1){
                  
                            returnWeedsUnderCanopy = "Few small weeds (less than 30cm) under the tree canopy";
                  
                          }
                  
                          if(weedsUnderCanopy == 2){
                  
                            returnWeedsUnderCanopy = "Many small weeds under the tree canopy (ground is covered with weeds)";
                  
                          }
                  
                          if(weedsUnderCanopy == 3){
                  
                            returnWeedsUnderCanopy = "Many large weeds under the tree canopy (ground is covered with weeds)";
                  
                          }

                            return returnWeedsUnderCanopy;

                        }),

                        //Health of New Planting (Yves might need to add a new Object for this)
                        field("health_of_new_planting_choice__c", function(state){
            
                            var healthNewPlanting = dataValue("form.health_of_new_planting.health_of_new_planting_choice")(state);
                            var returnhealthNewPlanting = "";
            
                            if(healthNewPlanting == 1){
            
                                returnhealthNewPlanting = "The majority of trees are green and healthy and have grown well";
            
                            }
            
                            if(healthNewPlanting == 2){
            
                                returnhealthNewPlanting = "The majority of trees look stressed and growth is slow";
            
                            }
            
                            if(healthNewPlanting == 3){
            
                                returnhealthNewPlanting = "The majority of trees have dried up or died";
            
                            }

                        return returnhealthNewPlanting;

                    }),

                    field("photo_of_trees_and_average_main_stems__c", function(state){
                          
                        var healthPhotoURL = "";
                        if(dataValue("form.main_stems.health_of_trees_photo")(state) !== undefined && dataValue("form.main_stems.health_of_trees_photo")(state) !== '') {
                            healthPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.main_stems.trees_and_main_stems_photo")(state);  
                         }
                         return healthPhotoURL;
                         
                      }),

                       field("Have_herbicides_been_used_on_the_field__c", dataValue("form.weeding.used_herbicides")),
                        // field("Herbicide_products_used_on_farm__c", function(state){
                          
                        //   var herbicideUsed = dataValue("form.weeding.which_product_have_you_used")(state);
                        //   var returnHerbicideUsed = "EMPTY";
                          
                        //   if(herbicideUsed !== undefined && herbicideUsed == 1){
                            
                        //     returnHerbicideUsed = "Glyphosate (Eg Round Up)";
                            
                        //   }
                          
                        //   if(herbicideUsed !== undefined && herbicideUsed == 2){
                            
                        //     returnHerbicideUsed = "Paraquat (Eg. Gramoxone)";
                            
                        //   }

                        //   if(herbicideUsed !== undefined && herbicideUsed == 3){
                            
                        //     returnHerbicideUsed = dataValue("form.weeding.ask_which_other_product_have_you_use")(state);
                            
                        //   }                  

                        //   return returnHerbicideUsed;
                          
                        // }),
                        
                        field("photo_of_weeds_under_the_canopy__c", function(state){
                          
                          var weedsPhotoUrl = dataValue("form.weeding.weeds_under_the_canopy_photo")(state);
                          var returnWeedsPhotoUrl = "";
                          
                          if (weedsPhotoUrl !== undefined && weedsPhotoUrl !== '') {
                              returnWeedsPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + weedsPhotoUrl;
                          }
                          
                          return returnWeedsPhotoUrl;
                          
                        }),

                        //shade management
                        field("level_of_shade_present_on_the_farm__c", function(state){
                          
                          var levelOfShadeOnPlot = dataValue("form.shade_control.level_of_shade_present_on_the_farm")(state);
                          var returnLevelOfShadeOnPlot = "";
                          
                          if(levelOfShadeOnPlot == 0){
                            
                            returnLevelOfShadeOnPlot = "NO shade, less than 5%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 1){
                            
                            returnLevelOfShadeOnPlot = "Light shade, 5 to 20%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 2){
                            
                            returnLevelOfShadeOnPlot = "Medium shade, 20 to 40%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 3){
                            
                            returnLevelOfShadeOnPlot = "Heavy shade, over 40%";
                            
                          }
                          
                          return returnLevelOfShadeOnPlot;

                        }),
                        
                        // field("have_new_shade_been_planted_last_3_years__c", function(state){
                          
                        //   var newShadePlanted = dataValue("form.shade_control.new_shade_trees_in_the_last_3_years")(state);
                        //   var returnNewShadePlanted = "";
                          
                        //   if(newShadePlanted == 0){
                            
                        //     returnNewShadePlanted = "No";
                            
                        //   }

                        //   if(newShadePlanted == 1){
                            
                        //     returnNewShadePlanted = "Yes";
                            
                        //   }

                        //   return returnNewShadePlanted;

                        // }),
                        
                        field("photo_of_level_of_shade_on_the_plot__c", function(state) {
                          
                          var shadePhotoUrl = '';
                          if(dataValue("form.shade_control.photo_of_level_of_shade_on_the_plot")(state) !== undefined && dataValue("form.shade_control.photo_of_level_of_shade_on_the_plot")(state) !== '') {
                            shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);
                            
                          }
                          
                          return shadePhotoUrl;
                          
                        }),
                        
                        // Yves needs to Add Object
                        field("planted_intercrop_bananas__c", function(state){
                          
                            var bananaShadePlanted = dataValue("form.shade_control.planted_intercrop_bananas")(state);
                            var returnbananaShadePlanted = "";
                            
                            if(bananaShadePlanted == "no"){
                              
                                returnbananaShadePlanted = "No";
                              
                            }

                            if(bananaShadePlanted == "yes"){
                              
                                returnbananaShadePlanted = "Yes";
                              
                            }

                            return returnbananaShadePlanted;

                          }),
                          
                          //Yves needs to add object
                          field("photograph_intercrop_bananas__c", function(state) {
                            
                            var bananashadePhotoUrl = '';
                            if(dataValue("form.shade_control.photograph_intercrop_bananas")(state) !== undefined && dataValue("form.shade_control.photograph_intercrop_bananas")(state) !== '') {
                                bananashadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);
                              
                            }
                            
                            return bananashadePhotoUrl;
                            
                          }),


                        //compost manure
                        field("do_you_have_compost_manure__c", function(state){
                          
                          var haveCompostManure = dataValue("form.compost.do_you_have_compost_manure")(state);
                          var returnHaveCompostManure = "";
                          
                          if(haveCompostManure !== undefined && haveCompostManure !== '' && haveCompostManure == 0){
                            
                            returnHaveCompostManure = "No";
                            
                          }
                          
                          if(haveCompostManure !== undefined && haveCompostManure !== '' && haveCompostManure == 1){
                            
                            returnHaveCompostManure = "Yes";
                            
                          }
                          
                          return returnHaveCompostManure;

                        }),

                        field("photo_of_the_compost_manure__c", function(state) {
                          
                          var compostPhotoUrl = '';
                          if(dataValue("form.compost.photo_of_the_compost_manure")(state) !== undefined && dataValue("form.compost.photo_of_the_compost_manure")(state) !== '') {
                            compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.compost.photo_of_the_compost_manure")(state);
                            
                          }
                          
                          return compostPhotoUrl;
                          
                        }),

                        //erosion control
                    /*    field("take_a_photo_of_erosion_control__c", function(state) {
                          
                          var erosionPhotoUrl = '';
                          if(dataValue("form.erosion_control.photo_of_erosion_control_method")(state) !== undefined && dataValue("form.erosion_control.photo_of_erosion_control_method")(state) !== '') {
                            erosionPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.photo_of_erosion_control_method")(state);
                            
                          }
                          
                          return erosionPhotoUrl;
                          
                        }),
                    */
                        field("Stabilizing_Grasses_Photo_URL__c", function(state){                    

                            var sgPhotoURL = "";
                            if(dataValue("form.erosion_control.stabilizing_grasses_image")(state) !== undefined && dataValue("form.erosion_control.stabilizing_grasses_image")(state) !== '') {
                                sgPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.stabilizing_grasses_image")(state); 
                            } 

                            return sgPhotoURL;                
                        }),
                        field("Mulch_Photo_URL__c", function(state){                    

                            var mulchPhotoURL = "";
                            if(dataValue("form.erosion_control.mulch_image")(state) !== undefined && dataValue("form.erosion_control.mulch_image")(state) !== '') {
                                mulchPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.mulch_image")(state); 
                            } 

                            return mulchPhotoURL;                
                        }),
                        field("Water_Traps_Photo_URL__c", function(state){                    

                            var wtPhotoURL = "";
                            if(dataValue("form.erosion_control.water_traps_or_trenches_image")(state) !== undefined && dataValue("form.erosion_control.water_traps_or_trenches_image")(state) !== '') {
                                wtPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.water_traps_or_trenches_image")(state); 
                            } 

                            return wtPhotoURL;                
                        }),
                        field("Physical_Barriers_Photo_URL__c", function(state){                    

                            var pbPhotoURL = "";
                            if(dataValue("form.erosion_control.physical_barriers_image")(state) !== undefined && dataValue("form.erosion_control.physical_barriers_image")(state) !== '') {
                                pbPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.physical_barriers_image")(state); 
                            } 

                            return pbPhotoURL;                
                        }),
                        field("Terraces_Photo_URL__c", function(state){                    

                            var terracesPhotoURL = "";
                            if(dataValue("form.erosion_control.terraces_image")(state) !== undefined && dataValue("form.erosion_control.terraces_image")(state) !== '') {
                                terracesPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.terraces_image")(state); 
                            } 

                            return terracesPhotoURL;                
                        }),
                        field("Contour_Planting_Photo_URL__c", function(state){                    

                            var cpPhotoURL = "";
                            if(dataValue("form.erosion_control.contour_planting_image")(state) !== undefined && dataValue("form.erosion_control.contour_planting_image")(state) !== '') {
                                cpPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.contour_planting_image")(state); 
                            } 

                            return cpPhotoURL;                
                        }),
                        field("Cover_Crop_Photo_URL__c", function(state){                    

                            var ccPhotoURL = "";
                            if(dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state) !== undefined && dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state) !== '') {
                                ccPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state); 
                            } 

                            return ccPhotoURL;                
                        }),

                        //record keeping
                        field("do_you_have_a_record_book__c", function(state){
                          
                          var haveRecordBook = dataValue("form.record_keeping.do_you_have_a_record_book")(state);
                          var returnHaveRecordBook = "";
                          
                          if(haveRecordBook == 0){
                            
                            returnHaveRecordBook = "No";
                            
                          }
                          
                          if(haveRecordBook == 1){
                            
                            returnHaveRecordBook = "Yes";
                            
                          }
                          
                          return returnHaveRecordBook;

                        }),

                        field("are_there_records_on_the_record_book__c", function(state){
                          
                          var recordsOnRecordBook = dataValue("form.record_keeping.are_there_records_on_the_record_book")(state);
                          var returnRecordsOnRecordBook = "";
                          
                          if(recordsOnRecordBook !== undefined && recordsOnRecordBook !== '' && recordsOnRecordBook == 0){
                            
                            returnRecordsOnRecordBook = "No";
                            
                          }
                          
                          if(recordsOnRecordBook !== undefined && recordsOnRecordBook !== '' && recordsOnRecordBook == 1){
                            
                            returnRecordsOnRecordBook = "Yes";
                            
                          }
                          
                          return returnRecordsOnRecordBook;
                          
                        }),

                        field("take_a_photo_of_the_record_book__c", function(state){
                          
                          var recordBookPhotoUrl = '';
                          if(dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== undefined && dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== '') {
                            recordBookPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== undefined && dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state);
                         
                          }
                          
                          return recordBookPhotoUrl;
                          
                        })
                    )
                )
            );


            //insert the farm visit record
            each(
                "$.data",
                upsert("Farm_Visit__c", "FV_Submission_ID__c",
                    fields(
                        field("Name__c", "FV-" + dataValue("id")(state)),
                        field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                        field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                        field("Training_Group__c", dataValue("form.training_group")),
                        field("Farm_Visited__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          if(visitedFarmers){
                            return visitedFarmers.split(" ")[0];
                          }
                        }),
                        field("Primary_Farmer_PIMA_ID__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          if(visitedFarmers){
                            return visitedFarmers.split(" ")[0];
                          }
                        }),
                        
                        field("Secondary_Farmer__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          var result = '';
                          if(visitedFarmers.length > 1){
                            result = visitedFarmers.split(" ")[1];
                          }
                          return result;
                        }),
                        
                        field("Secondary_Farmer_PIMA_ID__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          var result = '';
                          if(visitedFarmers.length > 1){
                            result = visitedFarmers.split(" ")[1];
                          }
                          return result;
                        }),
                        
                        // field("Primary_Farmer_PIMA_ID__c", dataValue("form.farm_being_visted")),
                        // field("Secondary_Farmer__c", function(state){
                        //     var secondaryFarmer = '';
                        //     if(dataValue("form.secondary_farmer_available")(state) == 'yes' && dataValue("form.secondary_farmer")(state) !== ''){
                        //       secondaryFarmer = dataValue("form.secondary_farmer");
                        //     }
                        //     return secondaryFarmer;
                        // }),
                        // field("Secondary_Farmer_PIMA_ID__c", function(state){
                        //     var secondaryFarmer = '';
                        //     if(dataValue("form.secondary_farmer_available")(state) == 'yes' && dataValue("form.secondary_farmer")(state) !== ''){
                        //       secondaryFarmer = dataValue("form.secondary_farmer");
                        //     }
                        //     return secondaryFarmer;
                        // }),
                        field("Visit_Has_Training__c", dataValue("form.is_this_a_farm_training_visit")),
                      //  field("Training_Session__c", dataValue("form.training_session")),
                        field("Other_Participants_Present__c", dataValue("form.any_other_participants_present")),
                        field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                        field("Date_Visited__c", dataValue("form.date_of_visit")),
                        field("visit_comments__c", dataValue("form.farm_visit_comments")),
                        field("Farmer_Trainer__c", dataValue("form.trainer")),
                        field("No_of_curedas__c", dataValue("form.opening_questions.number_of_curedas")),
                        field("No_of_separate_coffee_fields__c", dataValue("form.opening_questions.number_of_separate_coffee_fields")),
                        field("Field_Age__c", dataValue("form.field_age")),
                        field("Field_Size__c", function(state){
                            var fieldSize = '';
                            if(dataValue("form.field_size")(state) !== undefined && dataValue("form.field_size")(state) !== ''){
                              fieldSize = dataValue("form.field_size");
                            }
                            else if(dataValue("form.field_size1")(state) !== undefined && dataValue("form.field_size1")(state) !== ''){
                              fieldSize = dataValue("form.field_size1");
                            }
                            
                            return fieldSize;
                            
                        }),
                        field("Farm_Visit_Photo_Url__c", function(state) {
                            var farmVisitPhotoUrl = '';
                            if (dataValue("form.farm_visit_photo")(state) !== undefined && dataValue("form.farm_visit_photo")(state) !== '') {
                                farmVisitPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.farm_visit_photo")(state);
                            }
                            return farmVisitPhotoUrl;
                        }),
                        field("Signature__c", function(state) {
                            var recorderSignatureUrl = '';
                            if (dataValue("form.signature_of_farmer_trainer")(state) !== undefined && dataValue("form.signature_of_farmer_trainer")(state) !== '') {
                                recorderSignatureUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.signature_of_farmer_trainer")(state);
                            }
                            return recorderSignatureUrl;
                        }),
                        field('Location_GPS__Latitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[0];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Location_GPS__Longitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[1];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Altitude__c', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[2];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                        return '';
                        })
                    )
                )
            );
            
            // Update Household Record 
            each("$.data", 
              upsert("Household__c", "Id",
                fields(
                  field("Id", state.data.form.case["@case_id"]),
                  field("FV_AA_Visited__c", dataValue("form.case.update.FV_AA_Visited")(state)),
                  relationship(
                    "Latest_Farm_Visit_Record__r",
                    "FV_Submission_ID__c",
                    "FV-" + dataValue("id")(state)
                    )
                  )
                )
            );
            


            //upsert training session
          /*    each(
                "$.data",
                upsert("Training_Session__c", "CommCare_Case_Id__c",
                    fields(
                        field("CommCare_Case_Id__c", dataValue("form.training_session")),
                        field("Updated_from_CommCare__c", true)
                    )
                )
            );
          */

          //}

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Farm-Visit---AI---CommCare----Salesforce---Farm-Visit-Full---AI:
        source_trigger: webhook
        target_job: Production---Farm-Visit---AI---CommCare----Salesforce---Farm-Visit-Full---AI
        condition_type: js_expression
        condition_label: Production - Farm Visit AI - CommCare Salesforce
        condition_expression: |
          state.data.form["survey_type"] == "Farm Visit Full - AI" && state.data["app_id"] == "5096d2fa0ab840ffaaa62e7736cfecdd"
        enabled: true
  Production---Coffee-ZIM---CommCare----Salesforce---Participant-Registration-and-Update:
    name: Production - Coffee ZIM - CommCare -- Salesforce - Participant
      Registration and Update
    jobs:
      Production---Coffee-ZIM---CommCare----Salesforce---Participant-Registration-and-Update:
        name: Production - Coffee ZIM - CommCare -- Salesforce - Participant
          Registration and Update
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Production - Coffee ZIM | CommCare --> Salesforce | Participant Registration and Update
          //{"form":{"survey_type":"Participant"},"app_id":"b75286e874c74eb09b8da436709d7f3c"}

          beta.each(
            "$.data",
            upsertIf(
              state.data.form.survey_detail == "New Household",
              "Household__c", "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue("form.Household_Id")),
                  field("Name", dataValue("form.Household_Number")),
                  field("Training_Group__c", dataValue("form.Training_Group_Id")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees"))
                )
              )
            ),

            beta.each(
              "$.data",
              upsertIf(
              state.data.form.survey_detail == "New Household",
              "Training_Group__c", "CommCare_Case_Id__c",
                fields(
                  field("Household_Counter__c", dataValue("form.Update_Household_Counter")), 
                  field("CommCare_Case_Id__c", dataValue("form.Training_Group_Id"))     
                )
              )
            ),
            
            beta.each(
              "$.data",
              upsertIf(
              state.data.form.survey_detail == "New Household",
              "Participant__c", "CommCare_Case_Id__c",
                fields(
                  field("CommCare_Case_Id__c", dataValue("form.subcase_0.case.@case_id")),
                  field("TNS_Id__c", dataValue("form.Farmer_Id")),
                  field("Age__c", dataValue("form.Age")),
                  field("Name", dataValue("form.First_Name")),
                  field("Middle_Name__c", dataValue("form.Middle_Name")),
                  field("Last_Name__c", dataValue("form.Last_Name")),
                  field("Gender__c", dataValue("form.Gender")),
                  field("Status__c", dataValue("form.Status")),
                  field("Sent_to_OpenFn_Status__c", "Complete"),
                  field("Phone_Number__c", dataValue("form.Phone_Number")),
                  field("Other_ID_Number__c", dataValue("form.Cooperative_Membership_Number")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees")),
                  field("Primary_Household_Member__c", dataValue("form.Primary_Household_Member")),
                  relationship("Household__r", "Household_ID__c", dataValue("form.Household_Id")),
                  relationship("Training_Group__r", "CommCare_Case_Id__c", dataValue("form.Training_Group_Id"))
                )
              )
            ),

          //Existing household use this section.
          beta.each(
            "$.data",
            upsertIf(
              state.data.form.survey_detail == "Existing Household",
              "Household__c", "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue("form.Household_Id")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees"))
                )
              )
            ),

            beta.each(
              "$.data",
              upsertIf(
              state.data.form.survey_detail == "Existing Household",
              "Participant__c", "CommCare_Case_Id__c",
                fields(
                  field("CommCare_Case_Id__c", dataValue("form.subcase_0.case.@case_id")),
                  field("TNS_Id__c", dataValue("form.Farmer_Id")),
                  field("Age__c", dataValue("form.Age")),
                  field("Name", dataValue("form.First_Name")),
                  field("Middle_Name__c", dataValue("form.Middle_Name")),
                  field("Last_Name__c", dataValue("form.Last_Name")),
                  field("Gender__c", dataValue("form.Gender")),
                  field("Status__c", dataValue("form.Status")),
                  field("Sent_to_OpenFn_Status__c", "Complete"),
                  field("Phone_Number__c", dataValue("form.Phone_Number")),
                  field("Other_ID_Number__c", dataValue("form.Cooperative_Membership_Number")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees")),
                  field("Primary_Household_Member__c", dataValue("form.Primary_Household_Member")),
                  relationship("Household__r", "Household_ID__c", dataValue("form.Household_Id")),
                  relationship("Training_Group__r", "CommCare_Case_Id__c", dataValue("form.Training_Group_Id"))
                )
              )
            ),

          //Update participants use this section.
          beta.each(
            "$.data",
            upsertIf(
              state.data.form.survey_detail == "Participant Update",
              "Household__c", "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue("form.Household_Id")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees"))
                )
              )
            ),

            beta.each(
              "$.data",
              upsertIf(
              state.data.form.survey_detail == "Participant Update",
              "Participant__c", "CommCare_Case_Id__c",
                fields(
                  field("CommCare_Case_Id__c", dataValue("form.case.@case_id")),
                  field("Age__c", dataValue("form.Age")),
                  field("Name", dataValue("form.First_Name")),
                  field("Middle_Name__c", dataValue("form.Middle_Name")),
                  field("Last_Name__c", dataValue("form.Last_Name")),
                  field("Gender__c", dataValue("form.Gender")),
                  field("Phone_Number__c", dataValue("form.Phone_Number")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees")),
                  field("Other_ID_Number__c", dataValue("form.Cooperative_Membership_Number"))
                )
              )
            );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---CommCare----Salesforce---Participant-Registration-and-Update:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---CommCare----Salesforce---Participant-Registration-and-Update
        condition_type: js_expression
        condition_label: Production Coffee ZIM CommCare Salesforce Participant
          Registration and Update
        condition_expression: |
          state.data.form["survey_type"] == "Participant" && state.data["app_id"] == "b75286e874c74eb09b8da436709d7f3c"
        enabled: true
  Production---Coffee-KE-Nespresso-C2023---Demo-Plot-Observations---CommCare----SalesForce:
    name: Production - Coffee KE Nespresso C2023 - Demo Plot Observations - CommCare
      -- SalesForce
    jobs:
      Production---Coffee-KE-Nespresso-C2023---Demo-Plot-Observations---CommCare----SalesForce:
        name: Production - Coffee KE Nespresso C2023 - Demo Plot Observations - CommCare
          -- SalesForce
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //Demo Plot Observations
          //Production - Coffee KE Nespresso 2023C | Demo Plot Observations | CommCare --> SalesForce

          each(
            "$.data",
            upsert(
              "Observation__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function (state) {
                  var demoPlotPhotoUrl = "";
                  if (
                    dataValue("form.Demo_Plot_Photo")(state) !== undefined &&
                    dataValue("form.Demo_Plot_Photo")(state) !== ""
                  ) {
                    demoPlotPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.Demo_Plot_Photo")(state);
                  }
                  return demoPlotPhotoUrl;
                }),

                field("Observer_Signature__c", function (state) {
                  var observerSignatureUrl = "";
                  if (
                    dataValue("form.agronomy_advisor_signature")(state) !== undefined &&
                    dataValue("form.agronomy_advisor_signature")(state) !== ""
                  ) {
                    observerSignatureUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.agronomy_advisor_signature")(state);
                  }
                  return observerSignatureUrl;
                }),

                field("Observation_Location__Latitude__s", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[0];
                  }
                }),
                field("Observation_Location__Longitude__s", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[1];
                  }
                }),
                field("Altitude__c", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[2];
                  }
                })
              )
            )
          );

          // Pruning data handler
          beta.each(
            function (state) {
              //incoming pruning data
              var pruning_data = dataValue(
                "form.best_practice_questions.pruning.pruning_methods"
              )(state);

              if (pruning_data !== undefined) {
                return pruning_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    dpo_submission: dataValue("id")(state) + "coffee_global__pruning" + resultId,
                  };
                });
              }
            },
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("dpo_submission")),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__pruning"
                ),
                field("Result__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Centers opened";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Unwanted suckers removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "Dead branches removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "4"
                  ) {
                    returnResults = "Branches touching the ground removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "5"
                  ) {
                    returnResults = "Broken/unproductive stems and/or branches removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "No pruning methods used";
                  }

                  return returnResults;
                })
              )
            )
          );

          // //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS

          // // Create results for Pruning
          // beta.each(
          //   //"$.data",
          //   function (state) {
          //     var pruningData = dataValue(
          //       "form.best_practice_questions.pruning.pruning_methods"
          //     )(state);
          //     if (pruningData !== undefined) {
          //       return pruningData.split(" ").map(function (resultId) {
          //         return {
          //         result_data: resultId,
          //         };
          //         console.log(resultId);
          //       });
          //     }
          //   },
          //   upsert(
          //     "Observation_Result__c",
          //     "Submission_ID__c",
          //     fields(
          //       field("Submission_ID__c", function (state) {
          //         return dataValue("id")(state) + "coffee_global__pruning";
          //       }),
          //       field("Observation__c", function (state) {
          //         return state.references[state.references.length - 1].id;
          //       }),
          //       field("RecordTypeId", "01224000000gQe5AAE"),
          //       relationship(
          //         "Observation_Criterion__r",
          //         "Unique_Name__c",
          //         "coffee_global__pruning"
          //       ),
          //       field("Result__c", function (state) {
          //         var returnPruning = "";

          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "1"
          //         ) {
          //           returnPruning = "Centers opened";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "2"
          //         ) {
          //           returnPruning = "Unwanted suckers removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "3"
          //         ) {
          //           returnPruning = "Dead branches removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "4"
          //         ) {
          //           returnPruning = "Branches touching the ground removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "5"
          //         ) {
          //           returnPruning = "Broken/unproductive stems and/or branches removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "0"
          //         ) {
          //           returnPruning = "No pruning methods used";
          //         }
          //         return returnPruning;
          //       })
          //     )
          //   )
          // ),

          // Create results for Compost Heap
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__compost_heap";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__compost_heap"
                ),
                field("Result__c", function (state) {
                  var returnCompost = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) !== undefined
                  ) {
                    returnCompost = "Yes, compost or manure heap seen";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) !== undefined
                  ) {
                    returnCompost = "No compost or manure heap seen";
                  }
                  return returnCompost;
                }),
                field("Compost_Photo__c", function (state) {
                  var compostPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.compost_heap_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.compost_heap_photo"
                    )(state) !== ""
                  ) {
                    compostPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.compost_heap.compost_heap_photo"
                      )(state);
                  }
                  return compostPhotoUrl;
                })
              )
            )
          );

          // Create results for Weed Management
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__weed_management";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__weed_management"
                ),

                //Q1
                field("Result__c", function (state) {
                  var returnWeeds = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) !== undefined
                  ) {
                    returnWeeds = "Yes, field dug";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) !== undefined
                  ) {
                    returnWeeds = "No sign of digging";
                  }
                  return returnWeeds;
                }),

                //Q2
                field("Result_Text__c", function (state) {
                  var returnWeeds2 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "No weeds under the tree canopy";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "Few weeds under the tree canopy";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "2" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "Many weeds under the tree canopy";
                  }

                  return returnWeeds2;
                }),

                //Q3
                field("Result_Text_Two__c", function (state) {
                  var returnWeeds3 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) == "1"
                  ) {
                    returnWeeds3 =
                      "Weeds are less than 30cm tall or 30cm spread for grasses";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) == "2"
                  ) {
                    returnWeeds3 =
                      "Weeds are more than 30cm tall or 30cm spread for grasses";
                  }
                  return returnWeeds3;
                }),

                field("Weed_Management_Photo__c", function (state) {
                  var weedsPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.weed_management_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.weed_management_photo"
                    )(state) !== ""
                  ) {
                    weedsPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.weed_management.weed_management_photo"
                      )(state);
                  }
                  return weedsPhotoUrl;
                })
              )
            )
          );

          // Create results for Shade Management
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__shade_management";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__shade_management"
                ),
                field("Result__c", function (state) {
                  var returnShade = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "0"
                  ) {
                    returnShade = "NO shade, less than 5%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "1"
                  ) {
                    returnShade = "Light shade, 5 to 20%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "2"
                  ) {
                    returnShade = "Medium shade, 20 to 40%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "3"
                  ) {
                    returnShade = "Heavy shade, over 40%";
                  }
                  return returnShade;
                }),
                field("Shade_Management_Photo__c", function (state) {
                  var shadePhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.shade_management_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.shade_management_photo"
                    )(state) !== ""
                  ) {
                    shadePhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.shade_management.shade_management_photo"
                      )(state);
                  }
                  return shadePhotoUrl;
                })
              )
            )
          );

          // Create results for Mulch
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__mulch";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__mulch"
                ),
                field("Result__c", function (state) {
                  var returnMulch = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) == "1"
                  ) {
                    returnMulch = "Yes, Some mulch seen";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) == "0"
                  ) {
                    returnMulch = "No mulch seen";
                  }
                  return returnMulch;
                }),
                field("Result_Text__c", function (state) {
                  var returnMulch2 = "";
                  if (
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) == "1"
                  ) {
                    returnMulch2 = "Soil can be seen clearly, less than 2cm of mulch";
                  } else if (
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) == "2"
                  ) {
                    returnMulch2 = "Soil can not be seen, more than 2cm of mulch";
                  }
                  return returnMulch2;
                })
              )
            )
          );

          // Create results for Vetiver Planted
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__vetiver_planted";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__vetiver_planted"
                ),
                field("Result__c", function (state) {
                  var returnVetiver = "";
                  if (
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) == "1"
                  ) {
                    returnVetiver = "Yes. Row of vetiver planted";
                  } else if (
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) == "0"
                  ) {
                    returnVetiver = "No. Vetiver not planted";
                  }
                  return returnVetiver;
                })
              )
            )
          );

          // Create results for Rejuvenation
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__rejuvenation";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__rejuvenation"
                ),
                field("Result__c", function (state) {
                  var returnRejuventation = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) == 1
                  ) {
                    returnRejuventation = "Yes. There is a rejuvenated plot";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) == 0
                  ) {
                    returnRejuventation = "No rejuvenated plot";
                  }
                  return returnRejuventation;
                }),
                field("Result_Text__c", function (state) {
                  var returnRejuventation2 = "";
                  if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) == 1
                  ) {
                    returnRejuventation2 = "Yes. Sucker selection is complete";
                  } else if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) == 0
                  ) {
                    returnRejuventation2 = "No. Sucker selection has not been done";
                  }
                  return returnRejuventation2;
                }),

                field("Rejuvenation_Photo__c", function (state) {
                  var RejuvenationPhotoUrl = "";
                  if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_photo")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_photo")(
                      state
                    ) !== ""
                  ) {
                    RejuvenationPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.rejuvenation.suckers_photo"
                      )(state);
                  }
                  return RejuvenationPhotoUrl;
                })
              )
            )
          );

          // Create results for Sucker Selection
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", function(state) {
                  return dataValue("id")(state) + "coffee_global__sucker_selection_taken_place";
                }),
                field("Observation__c",function(state){
                  return state.references[state.references.length-1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__sucker_selection_taken_place"),
                field("Result__c", function (state) {
                    var sucker_selection = "";
                    if (
                      dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                        state
                      ) !== undefined &&
                      dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                        state
                      ) == 1
                    ) {
                      sucker_selection = "Yes. Sucker selection is complete";
                    } else if (
                      dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                        state
                      ) !== undefined &&
                      dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                        state
                      ) == 0
                    ) {
                      sucker_selection = "No. Sucker selection has not been done";
                    }
                    return sucker_selection;
                  }
                ),
                field("Result_number__c","2")
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-Nespresso-C2023---Demo-Plot-Observations---CommCare----SalesForce:
        source_trigger: webhook
        target_job: Production---Coffee-KE-Nespresso-C2023---Demo-Plot-Observations---CommCare----SalesForce
        condition_type: js_expression
        condition_label: Coffee KE Nespresso C2023 Demo Plot Observations CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "ae6ad2d1fb104da5be0dbb1d431db8b4"
        enabled: true
  Production---Coffee-ZIM---SalesForce----CommCare---Training-Sessions:
    name: Production - Coffee ZIM - SalesForce -- CommCare - Training Sessions
    jobs:
      Production---Coffee-ZIM---SalesForce----CommCare---Training-Sessions:
        name: Production - Coffee ZIM - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW C1 - C2018 | SalesForce --> CommCare | Training Sessions
          //{"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_zim"}


          each(
              "$.data.trainingSessions[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Session",
                      "uiVersion": "1",
                      "version": "148",
                      "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Session_1_Date", dataValue("sessionOneDate")),
                  field("Session_2_Date", dataValue("sessionTwoDate")),
                  field("Training_Group_Name", dataValue("trainingGroupName")),
                  field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                  field("Module_Name", dataValue("trainingModuleName")),
                  field("Module_Number", dataValue("trainingModuleNumber")),
                  field("Current_Previous_Name", function(state){
                    return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                  }),
                  field("Training_Session_Name", function(state) {
                    return (
                      dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                    );
                  }),
                  field("Current_Previous", dataValue("currentPrevious")),
                  field("Case_Id", dataValue("sessionId")),
                  field("Parent_Id", dataValue("trainingGroupCommCareId")),
                  field("subcase_0", function(state) {
                    return {
                      "n0:case": {
                        "@": {
                          "case_id": dataValue("sessionId")(state),
                          "date_modified": new Date().toISOString(),
                          "user_id": "e926526fc13b126fffdb6d001f25b269",
                          "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                        },
                        "n0:create": {
                          "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                          "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                          "n0:case_type": "coffee_zim_training_session"
                        },
                        "n0:update": {
                          "n0:Case_Id": dataValue("sessionId")(state),
                          "n0:Date": new Date().toISOString(),
                          "n0:Module_Name": dataValue("trainingModuleName")(state),
                          "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                          "n0:Current_Previous": dataValue("currentPrevious")(state),
                          "n0:Current_Previous_Name": function(){
                            return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                          },
                          "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                          "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                          "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                          "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                          "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                        },
                        "n0:index":  {
                          "n0:parent" : {
                            "@": {
                              "case_type": "coffee_zim_training_group"
                            },
                            "#": dataValue("trainingGroupCommCareId")(state)
                          }
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "867066029216796",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: 'Production - Coffee ZIM | SalesForce --> CommCare | Training Sessions'
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zim"
        enabled: true
  Production---Training-Sessions---ET-GAC-CREW-C2025---SalesForce----CommCare:
    name: Production - Training Sessions - ET GAC CREW C2025 - SalesForce -- CommCare
    jobs:
      Production---Training-Sessions---ET-GAC-CREW-C2025---SalesForce----CommCare:
        name: Production - Training Sessions - ET GAC CREW C2025 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee - ET HWG JCP CREW C2024
          // DATA FLOW :: SalesForce --> TO --> CommCare
          // TARGET APPS :: // JOB PURPOSE :: Coffee - ET HWG JCP CREW C2024
          // JOB NAME :: Production | Training Sessions - ET HWG JCP CREW C2024 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_crew_c2024"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_et_hwg_jcp_crew_c2025_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_et_hwg_jcp_crew_c2025_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Sessions---ET-GAC-CREW-C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Sessions---ET-GAC-CREW-C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Sessions ET GAC CREW C2025 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_crew_c2025"
        enabled: true
  Production---Coffee-KE-2024AC---SalesForce----CommCare---Project-Roles:
    name: Production - Coffee KE 2024AC - SalesForce -- CommCare - Project Roles
    jobs:
      Production---Coffee-KE-2024AC---SalesForce----CommCare---Project-Roles:
        name: Production - Coffee KE 2024AC - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |+
          // Project Roles Job = Coffee - Kenya Nespresso 2024ac
          each(
              "$.data.projectRoles[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Project Role",
                      "uiVersion": "1",
                      "version": "1",
                      "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Name", function(state){
                    var name = '';
                    if(dataValue("staffName")(state) !== null) {
                      name = dataValue("staffName")(state);
                    }
                    return name;
                  }),
                  field("TNS_Id", dataValue("tnsId")),
                  field("City", dataValue("locationName")),
                  field("Role", dataValue("roleForCommCare")),
                  field("Case_Id", dataValue("commCareCaseId")),
                  field("Current_Module", dataValue("currentModule")),
                  field("Current_Module_Name", dataValue("currentModuleName")),
                  field("Previous_Module", dataValue("previousModule")),
                  field("Previous_Module_Name", dataValue("previousModuleName")),
                  field("FFGs_Observed", null),
                  field("Name_id_concat", function(state){
                    var name = '';
                    if(dataValue("staffName")(state) !== null) {
                      name = dataValue("staffName")(state);
                    }
                    if(dataValue("tnsId")(state) !== null) {
                      name = name+' '+dataValue("tnsId")(state);
                    }
                    return name;
                  }),
                  field("Salesforce_Staff_Id", dataValue("staffId")),
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("commCareCaseId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": function(){
                          var name = '';
                          if(dataValue("staffName")(state) !== null) {
                            name = dataValue("staffName")(state);
                          }
                          return name;
                        },
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2024ac_staff"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("commCareCaseId")(state),
                        "n0:Name_Id_Concat": function() {
                          var name = '';
                          if(dataValue("staffName")(state) !== null) {
                            name = dataValue("staffName")(state);
                          }
                          if(dataValue("tnsId")(state) !== null) {
                            name = name+' '+dataValue("tnsId")(state);
                          }
                          return name;
                        },
                        "n0:Role": dataValue("roleForCommCare")(state),
                        "n0:City": dataValue("locationName")(state),
                        "n0:TNS_Id": dataValue("tnsId")(state),
                        "n0:Current_Module": dataValue("currentModule")(state),
                        "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                        "n0:Previous_Module": dataValue("previousModule")(state),
                        "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                        "n0:FFGs_Observed": null,
                        "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                      }
                    };
                  }),
                  field("n1:meta", function(state) {
                    return {
                      "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                      "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                      "n1:timeStart": new Date().toISOString(),
                      "n1:timeEnd": new Date().toISOString(),
                      "n1:username": "api",
                      "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );// Your job goes here.
            
            // version control
            
    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024AC---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024AC---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee KE 2024AC SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024ac"
        enabled: true
  "x-[archived]-CC----SQL---Regenerate-Rwanda":
    name: 'x [archived] CC -- SQL - Regenerate Rwanda'
    jobs:
      CC----SQL---Regenerate-Rwanda:
        name: CC -- SQL - Regenerate Rwanda
        adaptor: '@openfn/language-mysql@v1.4.7'
        credential: null
        body: |
          

          each(
            fn((substate) => {
                
                var createdObjects = [];
                
                if(substate.data.form.survey_type == "Partner Registration"){
                  const enumerator = substate.data.form.enumerator;
                  var data_collection_date ="";
                  
                  if(substate.data.form.data_collection_date ==""){
                    data_collection_date = '2024-01-01';
                  }
                  else{
                    data_collection_date = substate.data.form.data_collection_date;
                  }
                  const partnership_start_date = state.data.form.partnership_start_date;
                  const partner_name = state.data.form.partner_name;
                  const establishment_date = state.data.form.establishment_date;
                  const registration_number = state.data.form.registration_number;
                  var sector_portfolio_raw = state.data.form.sector_portfolio;
                  sector_portfolio_raw = sector_portfolio_raw.replace(" ", ", ");
                  const other_portfolio = state.data.form.specify_sector_portfolio;
                  const sector_portfolio = sector_portfolio_raw.replace("other", other_portfolio);
                  
                  var business_type_raw = state.data.form.business_type;
                  business_type_raw = business_type_raw.replace(" ", ", ");
                  const other_business = state.data.form.specify_business_type;
                  const business_type = business_type_raw.replace("other", other_business);
                  
                  const legal_rep = state.data.form.legal_rep;
                  const legal_rep_sex = state.data.form.legal_rep_sex;
                  const partner_district = state.data.form.partner_district;
                  const partner_sector = state.data.form.partner_sector;
                  const gps_location = state.data.form.gps_location;
                  const email = state.data.form.email;
                  const contact = state.data.form.contact;
                  const provinces_of_operation = state.data.form.provinces_of_operation;
                  const districts_of_operation = state.data.form.districts_of_operation;
                  const partner_id = state.data.form.partner_id;
                  
                  
                   var createdObject = {
                      enumerator : enumerator,
                      data_collection_date: data_collection_date,
                      partnership_start_date: partnership_start_date,
                      partner_name: partner_name,
                      establishment_date: establishment_date,
                      registration_number: registration_number,
                      sector_portfolio: sector_portfolio,
                      business_type: business_type,
                      legal_rep: legal_rep,
                      legal_rep_sex: legal_rep_sex,
                      partner_district: partner_district,
                      partner_sector: partner_sector,
                      gps_location: gps_location,
                      email: email,
                      contact: contact,
                      provinces_of_operation: provinces_of_operation,
                      districts_of_operation: districts_of_operation,
                      partner_id: partner_id
                  };
                  createdObjects.push(createdObject);
                }
                
                console.log(createdObjects);

                return createdObjects;
            }),
          upsertMany(
            '1_partner_register', // the DB table
            [
              {enumerator: dataValue("enumerator"),
                data_collection_date: dataValue("data_collection_date"),
                partnership_start_date: dataValue("partnership_start_date"),
                partner_name: dataValue("partner_name"),
                establishment_date: dataValue("establishment_date"),
                registration_number: dataValue("registration_number"),
                sector_portfolio: dataValue("sector_portfolio"),
                business_type: dataValue("business_type"),
                legal_rep: dataValue("legal_rep"),
                legal_rep_sex: dataValue("legal_rep_sex"),
                partner_district: dataValue("partner_district"),
                partner_sector: dataValue("partner_sector"),
                gps_location: dataValue("gps_location"),
                email: dataValue("email"),
                contact: dataValue("contact"),
                provinces_of_operation: dataValue("provinces_of_operation"),
                districts_of_operation: dataValue("districts_of_operation"),
                partner_id: dataValue("partner_id")
              }
            ]
          )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->CC----SQL---Regenerate-Rwanda:
        source_trigger: webhook
        target_job: CC----SQL---Regenerate-Rwanda
        condition_type: js_expression
        condition_label: CC MySQL Regenerate Rwanda
        condition_expression: |
          state.data["app_id"] == "a5282084af264f5f8f310bd7e57ce3ac"
        enabled: true
  Coffee-PR-2022---Field-Day-Attendance-Full---CommCare----Salesforce:
    name: Coffee PR 2022 - Field Day Attendance Full - CommCare -- Salesforce
    jobs:
      Coffee-PR-2022---Field-Day-Attendance-Full---CommCare----Salesforce:
        name: Coffee PR 2022 - Field Day Attendance Full - CommCare -- Salesforce
        adaptor: '@openfn/language-salesforce@4.8.6'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          
          beta.each(
              fn((substate) => {
                  // Initialize an empty array to store items with training sessions
                  const itemsWithTrainingSession = [];

                  // Iterate over each item in the data
                  substate.data.form.barrios_repeat_group.item.forEach((item) => {
                      // Check if the item has a training session
                      if (item.hasOwnProperty("training_session")) {
                          // If it does, push it to the itemsWithTrainingSession array
                          itemsWithTrainingSession.push(item);
                      }
                  });

                  return itemsWithTrainingSession;
              }),
              upsert(
                  "Training_Session__c",
                  "CommCare_Case_Id__c",
                  fields(
                      field("CommCare_Case_Id__c", dataValue("training_session")),
                      field("Trainer__c", state.data.form.trainer),
                      field("Session_Photo_URL__c", function (substate) {
                          var photoUrl = "";
                          // console.log("Here is the main state:");
                          // console.log(state);

                          // console.log("Here's the Sub-state: ");
                          // console.log(substate);
                          if (
                              state.data.form.photo !== undefined &&
                              state.data.form.photo !== ""
                          ) {
                              photoUrl =
                                  "https://www.commcarehq.org/a/" +
                                  state.data.domain +
                                  "/api/form/attachment/" +
                                  state.data.form.meta.instanceID +
                                  "/" +
                                  state.data.form.photo;
                          }
                          return photoUrl;
                      }),
                      field("Date__c", state.data.form.date),
                      field("Location_GPS__Latitude__s", function (substate) {
                          const coords = state.data.form.gps_coordinates;
                          if (coords) {
                              return coords.split(" ")[0];
                          }
                          return "";
                      }),
                      field("Location_GPS__Longitude__s", function (substate) {
                          const coords = state.data.form.gps_coordinates;
                          if (coords) {
                              return coords.split(" ")[1];
                          }
                          return "";
                      }),
                      field("Altitude__c", function (substate) {
                          const coords = state.data.form.gps_coordinates;
                          if (coords) {
                              return coords.split(" ")[2];
                          }
                          return "";
                      }),
                      field("Updated_from_CommCare__c", true)
                  )
              )
          );

          beta.each(
              fn((substate) => {
                  // Initialize an empty array to store items with training sessions
                  var attendanceList = [];
                  // const session = "";

                  // Iterate over each item in the data
                  substate.data.form.barrios_repeat_group.item.forEach((item) => {
                      // Check if the item has a training session
                          if (item.hasOwnProperty("training_session")) {
                          var participantsList = item.present_participants_repeat.split(" ");
                          var trainingSession = item.training_session;
                          var createdObjects = []; // Array to store the created objects
                          participantsList.forEach((participant) => {
                              // Create the participantAttendanceData object
                              var createdObject = {
                                  id: participant,
                                  sessionId: trainingSession,
                                  submissionId: trainingSession + participant
                              };
                              // Push the created object into the array
                              createdObjects.push(createdObject);
                              // Create the participantAttendanceData record
                              create('participantAttendanceData', createdObject);
                          });
                          // Concatenate the created objects with participantsList
                          attendanceList = attendanceList.concat(createdObjects);
                      }
                  });

                  return attendanceList;
              }),
              upsert(
                  "Attendance__c",
                  "Submission_ID__c",
                  fields(
                      field("Submission_ID__c", dataValue("submissionId")),
                      field("Status__c", "Present"),
                      relationship(
                          "Training_Session__r",
                          "CommCare_Case_Id__c",
                          dataValue("sessionId")
                      ),
                      relationship(
                          "Participant__r",
                          "CommCare_Case_Id__c",
                          dataValue("id")
                      )
                  )
              )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Coffee-PR-2022---Field-Day-Attendance-Full---CommCare----Salesforce:
        source_trigger: webhook
        target_job: Coffee-PR-2022---Field-Day-Attendance-Full---CommCare----Salesforce
        condition_type: js_expression
        condition_label: Coffee PR 2022C Field Day Attendance Full CommCare Salesforce
        condition_expression: |
          state.data.form["@name"] == "Field Day Attendance Full"
        enabled: true
  Production---Training-Sessions---ET-HWG-JCP-C2023---SalesForce----CommCare:
    name: Production - Training Sessions - ET HWG JCP C2023 - SalesForce -- CommCare
    jobs:
      Production---Training-Sessions---ET-HWG-JCP-C2023---SalesForce----CommCare:
        name: Production - Training Sessions - ET HWG JCP C2023 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee - ET HWG JCP C2023
          // DATA FLOW :: SalesForce --> TO --> CommCare
          // TARGET APPS :: // JOB PURPOSE :: Coffee - ET HWG JCP C2023
          // JOB NAME :: Production | Training Sessions - ET HWG JCP C2022 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_c2023"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_et_hwg_jcp_c2023_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_et_hwg_jcp_c2023_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Sessions---ET-HWG-JCP-C2023---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Sessions---ET-HWG-JCP-C2023---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Sessions HWG JCP C2023 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_c2023"
        enabled: true
  Production---Training-Sessions---ET-Regrow-YG--Ag--C2024---SalesForce----CommCare:
    name: Production - Training Sessions - ET Regrow YG -Ag- C2024 - SalesForce --
      CommCare
    jobs:
      Production---Training-Sessions---ET-Regrow-YG--Ag--C2024---SalesForce----CommCare:
        name: Production - Training Sessions - ET Regrow YG -Ag- C2024 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee ET - Regrow Yirga Agronomy C2022
          // DATA FLOW :: SalesForce --> TO --> CommCare
          // TARGET APPS :: // JOB PURPOSE :: Coffee - ET Regrow Yirga (Ag) C2024
          // JOB NAME :: Production | Training Sessions - ET Regrow YG (Ag) C2024 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c3"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_et_regrow_ag_c3_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_et_regrow_ag_c3_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Sessions---ET-Regrow-YG--Ag--C2024---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Sessions---ET-Regrow-YG--Ag--C2024---SalesForce----CommCare
        condition_type: js_expression
        condition_label: 'Production | Training Sessions - Regrow Yirga C2024 |
          SalesForce --> CommCare'
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c3"
        enabled: true
  Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Training-Groups:
    name: Production - Coffee KE 2024AC - Dummy - SalesForce -- CommCare - Training
      Groups
    jobs:
      Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Training-Groups:
        name: Production - Coffee KE 2024AC - Dummy - SalesForce -- CommCare - Training
          Groups
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |
          // Your job goes here.
          each(
              "$.data.trainingGroups[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Group",
                      "uiVersion": "1",
                      "version": "1",
                      "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Name", dataValue("trainingGroupName")),
                  field("FFG_Number", dataValue("tnsId")),
                  field("Location", dataValue("locationName")),
                  field("Measurement_Group", dataValue("measurementGroup")),
                  field("Cooperative_ID", dataValue("cooperative")),
                  field("Household_Counter", dataValue("householdCounter")),
                  field("Name_Id_Concat", function(state) {
                    return (
                      //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                      dataValue("trainingGroupName")(state)
                    );
                  }),
                  field("Parent_Id", dataValue("staffId")),
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("trainingGroupId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingGroupName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2024ac_dummy_training_group"
                      },
                      "n0:update": {
                        "n0:Location": dataValue("locationName")(state),
                        "n0:Market": dataValue("market")(state),
                        "n0:Household_Counter": dataValue("householdCounter")(state),
                        "n0:Name_Id_Concat": function(){
                          //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                          var name = dataValue("trainingGroupName")(state);
                          return name;
                        },
                        "n0:Parent_Id": dataValue("staffId")(state),
                        "n0:FFG_Number": dataValue("tnsId")(state),
                        "n0:Measurement_Group": dataValue("measurementGroup")(state),
                        "n0:Cooperative_ID": dataValue("cooperative")(state)
                      },
                      "n0:index": {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_ke_2024ac_dummy_staff"
                          },
                          "#": dataValue("staffId")(state)
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("trainingGroupId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "PIMA API",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee KE 2024AC Dummy SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024ac_dummy"
        enabled: true
  Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Training-Sessions:
    name: Production - Coffee KE 2024AC - Dummy - SalesForce -- CommCare - Training
      Sessions
    jobs:
      Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Training-Sessions:
        name: Production - Coffee KE 2024AC - Dummy - SalesForce -- CommCare - Training
          Sessions
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |
          // Your job goes here.
          each(
              "$.data.trainingSessions[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Session",
                      "uiVersion": "1",
                      "version": "148",
                      "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Session_1_Date", dataValue("sessionOneDate")),
                  field("Session_2_Date", dataValue("sessionTwoDate")),
                  field("Training_Group_Name", dataValue("trainingGroupName")),
                  field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                  field("Module_Name", dataValue("trainingModuleName")),
                  field("Module_Number", dataValue("trainingModuleNumber")),
                  field("Current_Previous_Name", function(state){
                    return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                  }),
                  field("Training_Session_Name", function(state) {
                    return (
                      dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                    );
                  }),
                  field("Current_Previous", dataValue("currentPrevious")),
                  field("Case_Id", dataValue("sessionId")),
                  field("Parent_Id", dataValue("trainingGroupCommCareId")),
                  field("subcase_0", function(state) {
                    return {
                      "n0:case": {
                        "@": {
                          "case_id": dataValue("sessionId")(state),
                          "date_modified": new Date().toISOString(),
                          "user_id": "e926526fc13b126fffdb6d001f25b269",
                          "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                        },
                        "n0:create": {
                          "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                          "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                          "n0:case_type": "coffee_ke_2024ac_dummy_training_session"
                        },
                        "n0:update": {
                          "n0:Case_Id": dataValue("sessionId")(state),
                          "n0:Date": new Date().toISOString(),
                          "n0:Module_Name": dataValue("trainingModuleName")(state),
                          "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                          "n0:Current_Previous": dataValue("currentPrevious")(state),
                          "n0:Current_Previous_Name": function(){
                            return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                          },
                          "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                          "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                          "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                          "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                          "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                        },
                        "n0:index":  {
                          "n0:parent" : {
                            "@": {
                              "case_type": "coffee_ke_2024ac_dummy_training_group"
                            },
                            "#": dataValue("trainingGroupCommCareId")(state)
                          }
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "867066029216796",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee KE 2024AC Dummy SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024ac_dummy"
        enabled: true
  Production---Training-Sessions---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
    name: Production - Training Sessions - ET HWG JCP CREW C2024 - SalesForce --
      CommCare
    jobs:
      Production---Training-Sessions---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
        name: Production - Training Sessions - ET HWG JCP CREW C2024 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee - ET HWG JCP CREW C2024
          // DATA FLOW :: SalesForce --> TO --> CommCare
          // TARGET APPS :: // JOB PURPOSE :: Coffee - ET HWG JCP CREW C2024
          // JOB NAME :: Production | Training Sessions - ET HWG JCP CREW C2024 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_crew_c2024"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_et_hwg_jcp_crew_c2024_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_et_hwg_jcp_crew_c2024_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Sessions---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Sessions---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Sessions ET HWG JCP CREW C2024 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_crew_c2024"
        enabled: true
  Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Participants:
    name: Production - Coffee BDI TNS 2024C - SalesForce -- CommCare - Training
      Participants
    jobs:
      Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Participants:
        name: Production - Coffee BDI TNS 2024C - SalesForce -- CommCare - Training
          Participants
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //PARTICIPANTS REGISTRATION JOB {SALESFORCE TO COMMCARE}
          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/22A693D2-7F34-4B8D-AE12-8A4A57C8868F",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("National_ID_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("HHID")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("HHID")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_bdi_tns_2024c_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:National_ID_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("HHID")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("HHID")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_bdi_tns_2024c_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Participants:
        source_trigger: webhook
        target_job: Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Participants
        condition_type: js_expression
        condition_label: Coffee BDI TNS 2024C SalesForce CommCare Training Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_bdi_tns_2024c"
        enabled: true
  Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Project-Roles:
    name: Production - Coffee BDI TNS 2024C - SalesForce -- CommCare - Project Roles
    jobs:
      Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Project-Roles:
        name: Production - Coffee BDI TNS 2024C - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Project Roles Job = Coffee Burundi USDA TNS 2024C
          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_bdi_tns_2024c_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );// Your job goes here.

          // version control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee BDI TNS 2024C SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_bdi_tns_2024c"
        enabled: true
  Production---Coffee-KE-2024BC---SalesForce----CommCare---Training-Groups:
    name: Production - Coffee KE 2024BC - SalesForce -- CommCare - Training Groups
    jobs:
      Production---Coffee-KE-2024BC---SalesForce----CommCare---Training-Groups:
        name: Production - Coffee KE 2024BC - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.
          each(
              "$.data.trainingGroups[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Group",
                      "uiVersion": "1",
                      "version": "1",
                      "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Name", dataValue("trainingGroupName")),
                  field("FFG_Number", dataValue("tnsId")),
                  field("Location", dataValue("locationName")),
                  field("Measurement_Group", dataValue("measurementGroup")),
                  field("Cooperative_ID", dataValue("cooperative")),
                  field("Household_Counter", dataValue("householdCounter")),
                  field("Name_Id_Concat", function(state) {
                    return (
                      //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                      dataValue("trainingGroupName")(state)
                    );
                  }),
                  field("Parent_Id", dataValue("staffId")),
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("trainingGroupId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingGroupName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2024bc_training_group"
                      },
                      "n0:update": {
                        "n0:Location": dataValue("locationName")(state),
                        "n0:Market": dataValue("market")(state),
                        "n0:Household_Counter": dataValue("householdCounter")(state),
                        "n0:Name_Id_Concat": function(){
                          //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                          var name = dataValue("trainingGroupName")(state);
                          return name;
                        },
                        "n0:Parent_Id": dataValue("staffId")(state),
                        "n0:FFG_Number": dataValue("tnsId")(state),
                        "n0:Measurement_Group": dataValue("measurementGroup")(state),
                        "n0:Cooperative_ID": dataValue("cooperative")(state)
                      },
                      "n0:index": {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_ke_2024bc_staff"
                          },
                          "#": dataValue("staffId")(state)
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("trainingGroupId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "PIMA API",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024BC---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024BC---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Production - Coffee KE 2024BC - SalesForce -- CommCare -
          Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024bc"
        enabled: true
  Global---Training-Attendance---CommCare----SalesForce:
    name: Global - Training Attendance - CommCare -- SalesForce
    jobs:
      Global---Training-Attendance---CommCare----SalesForce:
        name: Global - Training Attendance - CommCare -- SalesForce
        adaptor: '@openfn/language-salesforce@5.0.5'
        credential: null
        body: |
          //Coffee - ZW C2021 | Training Attendance | CommCare --> SalesForce

          //ATTENDANCE REGISTRATION JOB {COMMCARE TO SALESFORCE}
          each(
            "$.data",
            upsert("Training_Session__c", "CommCare_Case_Id__c",
              fields(
                field("CommCare_Case_Id__c", dataValue("form.training_session")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Number_in_Attendance__c", dataValue("form.attendance_count")),
                field("Session_Photo_URL__c", function(state) {
                    var photoUrl = '';
                    if(dataValue("form.photo")(state) !== undefined && dataValue("form.photo")(state) !== '') {
                      photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);  
                    }
                    return photoUrl;
                }),
                field("Date__c", dataValue("form.date")),
                field('Location_GPS__Latitude__s', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[0];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                }),
                field('Location_GPS__Longitude__s', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                }),
                field('Altitude__c', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                })
                )
              )
            );

          beta.each(
            function(state) {
              if (state.data.form.present_participants) {
                return state.data.form.present_participants.split(" ").map(
                  function(pId) {
                    return {
                      participant: pId,
                      session: dataValue("form.training_session")(state),
                      submission: dataValue("form.training_session")(state)+pId,
                      sessionPhoto: dataValue("form.photo")(state)
                    };
                  }
                );
              }
            },
            upsert("Attendance__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("submission")),
                field("Status__c", "Present"),
                relationship("Training_Session__r", "CommCare_Case_Id__c", dataValue("session")),
                relationship("Participant__r", "CommCare_Case_Id__c", dataValue("participant"))
              )
            )
          );
          each(
            "$.data",
            upsert("Training_Session__c", "CommCare_Case_Id__c",
              fields(
                field("CommCare_Case_Id__c", dataValue("form.training_session")),
                field("Updated_from_CommCare__c", true)
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Global---Training-Attendance---CommCare----SalesForce:
        source_trigger: webhook
        target_job: Global---Training-Attendance---CommCare----SalesForce
        condition_type: js_expression
        condition_label: Global Training Attendance CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Training Attendance" && state.data["app_id"] == "5096d2fa0ab840ffaaa62e7736cfecdd"
        enabled: true
  Production---Training-Groups---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
    name: Production - Training Groups - ET GAC CREW TFS C2025 - SalesForce --
      CommCare
    jobs:
      Production---Training-Groups---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
        name: Production - Training Groups - ET GAC CREW TFS C2025 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.// JOB PURPOSE :: This is a job for sending training groups for Coffee - ET GAC CREW C2025
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET GAC CREW TFS C2025
          // JOB NAME :: Production | Training Groups - ET CREW GAC TFS C2025 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_crew_gac_tfs_c2025"}
          // AUTHOR :: Emmanuel Mwaka }| emwaka@tns.org

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_crew_gac_tfs_c2025_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_crew_gac_tfs_c2025_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Groups---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Groups---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Groups ET GAC CREW TFS C2025 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_crew_gac_tfs_c2025"
        enabled: true
  Coffee-PR-2022---Field-Day-Farmer-Registration---CommCare----Salesforce:
    name: Coffee PR 2022 - Field Day Farmer Registration - CommCare -- Salesforce
    jobs:
      Coffee-PR-2022---Field-Day-Farmer-Registration---CommCare----Salesforce:
        name: Coffee PR 2022 - Field Day Farmer Registration - CommCare -- Salesforce
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          // if (
          //   state.data.app_id == "99561e1da5c84a9e93d242af342dcaf5" // Puerto Rico 2022C
          // ) {
            //insert household object
            each(
              "$.data",

              // Insert Household for New Farmer New Household OR New Farmer Existing Household but for Primary Member OR Existing Farmer Change in FFG but for Primary Member
              upsertIf(
                state.data.form.survey_detail == "New Farmer New Household",
                "Household__c",
                "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue("form.Household_Id")(state)),
                  field("Name", dataValue("form.Household_Number")(state)),
                  field("Training_Group__c", dataValue("form.Training_Group_Id")(state)),
                  field("Farm_Size__c", dataValue("form.Farm_Size")(state)),
                  field(
                    "Farm_Size_Before__c",
                    dataValue("form.participant_data.farm_size_3_years_and_older")(state)
                  ),
                  field(
                    "Farm_Size_After__c",
                    dataValue("form.participant_data.farm_size_under_3_years")(state)
                  )
                )
              )
            ),
              //insert || update :: participant object :: new household created || existing household updated
              each(
                "$.data",
                upsertIf(
                  state.data.form.survey_detail == "New Farmer New Household" ||
                    state.data.form.survey_detail == "New Farmer Existing Household",
                  "Participant__c",
                  "CommCare_Case_Id__c",
                  fields(
                    field(
                      "CommCare_Case_Id__c",
                      state.data.form.subcase_0.case["@case_id"]
                    ),
                    field("TNS_Id__c", dataValue("form.Farmer_Id")),
                    field("Age__c", dataValue("form.Age")),
                    field("Name", dataValue("form.First_Name")),
                    field("Middle_Name__c", dataValue("form.Middle_Name")),
                    field("Last_Name__c", dataValue("form.Last_Name")),
                    field("Gender__c", dataValue("form.Gender")),
                    field("Status__c", dataValue("form.Status")),
                    field("Farm_Size__c", dataValue("form.Farm_Size")),
                    field("Sent_to_OpenFn_Status__c", "Complete"),
                    field("Phone_Number__c", dataValue("form.Phone_Number")),
                    field(
                      "Primary_Household_Member__c",
                      dataValue("form.Primary_Household_Member")
                    ),
                    field("Registration_Date__c", dataValue("form.registration_date")),
                    field("Create_In_CommCare__c", false),
                    relationship(
                      "Household__r",
                      "Household_ID__c",
                      dataValue("form.Household_Id")
                    ),
                    relationship(
                      "Training_Group__r",
                      "CommCare_Case_Id__c",
                      dataValue("form.Training_Group_Id")
                    )
                  )
                )
              ),
              // Update Training Session

              each(
                "$.data",
                upsert(
                  "Training_Session__c",
                  "CommCare_Case_Id__c",
                  fields(
                    field("CommCare_Case_Id__c", dataValue("form.training_session")),
                    field("Trainer__c", dataValue("form.trainer")),
                    field("Updated_from_CommCare__c", true),
                    field("Date__c", dataValue("form.registration_date"))
                  )
                )
              ),
              // Update Attendance

              each(
                "$.data",
                upsert(
                  "Attendance__c",
                  "Submission_ID__c",
                  fields(
                    field(
                      "Submission_ID__c",
                      dataValue("form.training_session")(state) +
                        state.data.form.subcase_0.case["@case_id"]
                    ),
                    field("Status__c", "Present"),
                    relationship(
                      "Training_Session__r",
                      "CommCare_Case_Id__c",
                      dataValue("form.training_session")
                    ),
                    relationship(
                      "Participant__r",
                      "CommCare_Case_Id__c",
                      state.data.form.subcase_0.case["@case_id"]
                    )
                  )
                )
              ),
              //update :: participant object :: participant details updated
              each(
                "$.data",
                upsertIf(
                  state.data.form.survey_detail == "Participant Update",
                  "Participant__c",
                  "CommCare_Case_Id__c",
                  fields(
                    field("CommCare_Case_Id__c", state.data.form.case["@case_id"]),
                    field("Farm_Size__c", dataValue("form.Number_of_Trees")),
                    field("Phone_Number__c", dataValue("form.Phone_Number")),
                    field("Updated_Date__c", dataValue("form.date"))
                  )
                )
              );
          // }

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Coffee-PR-2022---Field-Day-Farmer-Registration---CommCare----Salesforce:
        source_trigger: webhook
        target_job: Coffee-PR-2022---Field-Day-Farmer-Registration---CommCare----Salesforce
        condition_type: js_expression
        condition_label: Coffee PR 2022 Field Day Farmer Registration CommCare Salesforce
        condition_expression: |
          state.data.form["survey_type"] == "Participant Registration" && state.data["app_id"] == "99561e1da5c84a9e93d242af342dcaf5"
        enabled: true
  Production---Participant-Registration-and-Update---CommCare----SalesForce:
    name: Production - Participant Registration and Update - CommCare -- SalesForce
    jobs:
      Production---Participant-Registration-and-Update---CommCare----SalesForce:
        name: Production - Participant Registration and Update - CommCare -- SalesForce
        adaptor: '@openfn/language-salesforce@5.0.4'
        credential: null
        body: |
          // JOB PURPOSE :: This is a consolidated job used for farmer registeration and update
          // DATA FLOW :: Commcare --> TO --> Salesforce
          // TARGET APPS :: Puerto_Rico_Ag_C1 | Uganda_Ag_C1 | Uganda_Ag_C2 | Uganda C2020| Zimbabwe_Ag_C1 | Zimbabwe_Ag_C2 | Kenya_Ag_C1
          // JOB NAME :: Production | Participant Registration and Update | CommCare --> SalesForce
          // JOB TRIGGER :: {"form":{"survey_type":"Participant"}}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

              //insert :: training group object :: new training group - household relationship created
              each(
                  "$.data",
                  upsertIf(
                      dataValue('form.survey_detail')(state) === "New Farmer New Household" ||
                      dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG",
                      "Training_Group__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field("Household_Counter__c", dataValue("form.Update_Household_Counter")),
                          field("CommCare_Case_Id__c", dataValue("form.Training_Group_Id"))
                      )
                  )
              ),
              // //insert household object
              each(
                  "$.data",

                  // Insert Household for New Farmer New Household OR New Farmer Existing Household but for Primary Member OR Existing Farmer Change in FFG but for Primary Member
                  upsertIf(
                      dataValue('form.survey_detail')(state) === "New Farmer New Household" ||
                      (dataValue('form.survey_detail')(state) === "New Farmer Existing Household" &&
                          state.data.form.Primary_Household_Member === "Yes") ||
                      dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG",
                      "Household__c",
                      "Household_ID__c",
                      fields(
                          field("Household_ID__c", dataValue("form.Household_Id")(state)),
                          field("Name", dataValue("form.Household_Number")),
                          field("Training_Group__c", dataValue("form.Training_Group_Id")),
                          field("Farm_Size__c", function (state) {
                              var result = "";
                              if (
                                  dataValue('form.survey_detail')(state) !== "Existing Farmer Change in FFG"
                              ) {
                                  result = dataValue("form.Number_of_Trees")(state);
                                  if(result === ""){
                                    result = null;
                                  }
                              } else if (
                                  dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG" &&
                                  state.data.form.existing_farmer_change_in_ffg
                                      .former_farmer_primary_secondary_yn === "Yes"
                              ) {
                                  result = dataValue(
                                      "form.existing_farmer_change_in_ffg.former_farmer_coffeetrees"
                                  )(state);
                                  if(result === ""){
                                    result = null;
                                  }
                              } else if (
                                  dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG" &&
                                  state.data.form.existing_farmer_change_in_ffg
                                      .former_farmer_primary_secondary_yn === "No"
                              ) {
                                  result = null;
                              }
                              return result;
                          }),
                          field("Number_of_Coffee_Plots__c", function (state) {
                              var result = "";
                              if (
                                  dataValue('form.survey_detail')(state) !== "Existing Farmer Change in FFG"
                              ) {
                                  result = dataValue("form.Number_of_Plots")(state);
                                  if(result === ""){
                                    result = null;
                                  }
                              } else if (
                                  dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG" &&
                                  state.data.form.existing_farmer_change_in_ffg.former_farmer_primary_secondary_yn === "Yes" &&
                                  dataValue('form.coffee_project_country')(state) === 'Burundi'
                              ) {
                                  result = dataValue(
                                      "form.existing_farmer_change_in_ffg.former_farmer_coffeeplots"
                                  )(state);
                                  if(result === ""){
                                    result = null;
                                  }
                              } else if (
                                  dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG" &&
                                  state.data.form.existing_farmer_change_in_ffg
                                      .former_farmer_primary_secondary_yn === "No"
                              ) {
                                  result = null;
                              }
                              return result;
                          })
                      )
                  )
              ),
              // Insert Household for New Farmer Existing Household but for Secondary Member OR Existing Farmer Change in FFG but for Secondary Member
              each(
                  "$.data",
                  upsertIf(
                      (dataValue('form.survey_detail')(state) === "New Farmer Existing Household" &&
                          state.data.form.Primary_Household_Member === "No") ||
                      (dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG" &&
                          state.data.form.existing_farmer_change_in_ffg
                              .former_farmer_primary_secondary_yn === "No"),
                      "Household__c",
                      "Household_ID__c",
                      fields(
                          field("Household_ID__c", dataValue("form.Household_Id")(state)),
                          field("Name", dataValue("form.Household_Number")),
                          field("Training_Group__c", dataValue("form.Training_Group_Id"))
                      )
                  )
              ),
              
              
              // //insert || update :: participant object :: new household created || existing household updated
             each(
                  "$.data",
                  upsertIf((dataValue('form.survey_detail')(state) === "New Farmer New Household" || 
                      dataValue('form.survey_detail')(state) === "New Farmer Existing Household"),
                      "Participant__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field("CommCare_Case_Id__c", state => {
                            var result = '';
                            if(1==1){
                              result = state.data.form['subcase_0'].case['@case_id'];
                            }
                            return result;
                          }),
                          field("TNS_Id__c", dataValue("form.Farmer_Id")),
                          field("Age__c", dataValue("form.Age")),
                          field("Name", dataValue("form.First_Name")),
                          field("Middle_Name__c", dataValue("form.Middle_Name")),
                          field("Last_Name__c", dataValue("form.Last_Name")),
                          field("Gender__c", dataValue("form.Gender")),
                          field("Status__c", dataValue("form.Status")),
                          field("Farm_Size__c", state=>{
                            var result = dataValue("form.Number_of_Trees")(state);
                            if(result === ""){
                                result = null;
                              }
                            return result;
                          }),
                          field("Number_of_Coffee_Plots__c", state=>{
                            var result = dataValue("form.Number_of_Plots")(state);
                            if(result === ""){
                                result = null;
                              }
                            return result;
                          }),
                          field("Sent_to_OpenFn_Status__c", "Complete"),
                          field("Phone_Number__c", dataValue("form.Phone_Number")),
                          field("Primary_Household_Member__c", dataValue("form.Primary_Household_Member")),
                          field("Registration_Date__c", dataValue("form.registration_date")),
                          field("Create_In_CommCare__c", false),
                          relationship("Household__r", "Household_ID__c", dataValue("form.Household_Id")),
                          relationship("Training_Group__r", "CommCare_Case_Id__c", dataValue("form.Training_Group_Id"))
                      )
                  )
              ),
              // Deactivating replaced farmer

              each(
                  "$.data",
                  upsertIf(
                      dataValue('form.survey_detail')(state) === "New Farmer Existing Household" &&
                      (dataValue("form.existing_household.both_filled.replaced_member_full")(
                          state
                      ) === "1" ||
                          dataValue(
                              "form.existing_household.primary_spot_filled.primary_replace_adding"
                          )(state) === "2" ||
                          dataValue("form.existing_household.both_filled.replaced_member_full")(
                              state
                          ) === "2"),
                      "Participant__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field("CommCare_Case_Id__c", function (state) {
                              var result = "";
                              if (
                                  dataValue(
                                      "form.existing_household.both_filled.replaced_member_full"
                                  )(state) === "1" ||
                                  dataValue(
                                      "form.existing_household.primary_spot_filled.primary_replace_adding"
                                  )(state) === "2"
                              ) {
                                  result = dataValue(
                                      "form.existing_household.existing_primary_farmer_id"
                                  )(state);
                              } else if (
                                  dataValue(
                                      "form.existing_household.both_filled.replaced_member_full"
                                  )(state) === "2"
                              ) {
                                  result = dataValue(
                                      "form.existing_household.existing_secondary_farmer_id"
                                  )(state);
                              }
                              return result;
                          }),
                          field("Updated_Date__c", dataValue("form.registration_date")),
                          field("Status__c", "Inactive"),
                          field("Create_In_CommCare__c", true),
                          relationship(
                              "Household__r",
                              "Household_ID__c",
                              dataValue("form.Household_Id")
                          ),
                          relationship(
                              "Training_Group__r",
                              "CommCare_Case_Id__c",
                              dataValue("form.Training_Group_Id")
                          )
                      )
                  )
              ),
              // update farmer for existing farmer change in FFG

              each(
                  "$.data",
                  upsertIf(
                      dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG",
                      "Participant__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field(
                              "CommCare_Case_Id__c",
                              dataValue("form.existing_farmer_change_in_ffg.old_farmer_id")
                          ),
                          field("Updated_Date__c", dataValue("form.registration_date")),
                          field(
                              "Former_Training_Group__c",
                              dataValue("form.existing_farmer_change_in_ffg.old_farmer_ffg")
                          ),
                          field("Create_In_CommCare__c", true),
                          field("TNS_Id__c", dataValue("form.Farmer_Id")),
                          relationship(
                              "Household__r",
                              "Household_ID__c",
                              dataValue("form.Household_Id")
                          ),
                          relationship(
                              "Training_Group__r",
                              "CommCare_Case_Id__c",
                              dataValue("form.Training_Group_Id")
                          )
                      )
                  )
              ),
              // Update Training Session

              each(
                  "$.data",
                  upsertIf(
                      dataValue('form.survey_detail')(state) === "New Farmer New Household" ||
                      dataValue('form.survey_detail')(state) === "New Farmer Existing Household" ||
                      dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG",
                      "Training_Session__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field("CommCare_Case_Id__c", dataValue("form.training_session")),
                          field("Trainer__c", dataValue("form.trainer")),
                          field("Updated_from_CommCare__c", true),
                          field("Date__c", dataValue("form.registration_date"))
                      )
                  )
              ),
              // Update Attendance

              each(
                  "$.data",
                  upsertIf(
                      dataValue('form.survey_detail')(state) === "New Farmer New Household" ||
                      dataValue('form.survey_detail')(state) === "New Farmer Existing Household" ||
                      dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG",
                      "Attendance__c",
                      "Submission_ID__c",
                      fields(
                          field("Submission_ID__c", function (state) {
                              var result = "";
                              if (
                                  dataValue('form.survey_detail')(state) !== "Existing Farmer Change in FFG"
                              ) {
                                  result = state.data.form.subcase_0.case['@case_id'];
                              } else if (
                                  dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG"
                              ) {
                                  result = dataValue(
                                      "form.existing_farmer_change_in_ffg.old_farmer_id"
                                  )(state);
                              }
                              return dataValue("form.training_session")(state) + result;
                          }),
                          field("Status__c", "Present"),
                          relationship(
                              "Training_Session__r",
                              "CommCare_Case_Id__c",
                              dataValue("form.training_session")
                          ),
                          relationship("Participant__r", "CommCare_Case_Id__c", function (state) {
                              var result = "";
                              if (
                                  dataValue('form.survey_detail')(state) !== "Existing Farmer Change in FFG"
                              ) {
                                  result = state.data.form.subcase_0.case['@case_id'];
                              } else if (
                                  dataValue('form.survey_detail')(state) === "Existing Farmer Change in FFG"
                              ) {
                                  result = dataValue(
                                      "form.existing_farmer_change_in_ffg.old_farmer_id"
                                  )(state);
                              }
                              return result;
                          })
                      )
                  )
              ),
              
              //update :: participant object :: participant details updated
              each(
                  "$.data",
                  upsertIf(
                      dataValue('form.survey_detail')(state) == "Participant Update",
                      "Participant__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field("CommCare_Case_Id__c", dataValue("form.case['@case_id']")),
                          field("Farm_Size__c", state=>{
                            var result = dataValue("form.Number_of_Trees")(state);
                            if(result === ""){
                                result = null;
                              }
                            return result;
                          }),
                          field("Phone_Number__c", dataValue("form.Phone_Number")),
                          field("Number_of_Coffee_Plots__c", state=>{
                            var result = dataValue("form.Number_of_Plots")(state);
                            if(result === ""){
                                result = null;
                              }
                            return result;
                          }),
                          field("Updated_Date__c", dataValue("form.date")),
                      )
                  )
              ),

              // // Update participant Other ID for KE
              each(
                  "$.data",
                  upsertIf(
                      (dataValue('app_id')(state) === "30cee26f064e403388e334ae7b0c403b" ||
                       dataValue('app_id')(state) === "073280bab3b743769796dfc04a926d4a" || 
                       dataValue('app_id')(state) === "812728b8b35644dabb51561420938ee0"
                      )&&
                      dataValue('form.survey_detail')(state) != "Existing Farmer Change in FFG",
                      "Participant__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field("CommCare_Case_Id__c", state=>{
                              var result = '';
                              if (dataValue('form.survey_detail')(state) === 'Participant Update') {
                                  result = dataValue("form.case['@case_id']")(state);
                                  console.log("This is the result 1: " + result);
                              }
                              else if (dataValue('form.survey_detail')(state) === 'New Farmer New Household' || dataValue('form.survey_detail')(state) === 'New Farmer Existing Household') {
                                  result = state.data.form.subcase_0.case['@case_id'];
                                  console.log("This is the result 2: " + result);
                              }
                              return result;
                          }),
                          field(
                              "Other_ID_Number__c",
                              dataValue("form.Cooperative_Membership_Number")
                          )
                      )
                  )
              ),

              // // Update Participant Other ID for BDI
              each(
                  "$.data",
                  upsertIf(
                      (dataValue('app_id')(state) === "6022048efa7a44629cf2d5448561e9f1" ||
                      dataValue('app_id')(state) === "8cb70ae22b874a6d8ccd8006a525ac8e" ) &&
                      dataValue('form.survey_detail')(state) != "Existing Farmer Change in FFG",
                      "Participant__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field("CommCare_Case_Id__c", state => {
                              var result = '';
                              if (dataValue('form.survey_detail')(state) === 'Participant Update') {
                                  result = state.data.form.case['@case_id'];
                              }
                              else if (dataValue('form.survey_detail')(state) === 'New Farmer New Household' || dataValue('form.survey_detail')(state) === 'New Farmer Existing Household') {
                                  result = state.data.form.subcase_0.case['@case_id'];
                              }
                              return result;
                          }),
                          field(
                              "Other_ID_Number__c",
                              dataValue("form.National_ID_Number")
                          )
                      )
                  )
              ),
              // // Update Participant Other ID for Zimbabwe
              each(
                  "$.data",
                  upsertIf(
                      dataValue('app_id')(state) === "8e8e5df7294548e6a4b55ca1a3a05f61" &&
                      dataValue('form.survey_detail')(state) != "Existing Farmer Change in FFG",
                      "Participant__c",
                      "CommCare_Case_Id__c",
                      fields(
                          field("CommCare_Case_Id__c", state => {
                              var result = '';
                              if (dataValue('form.survey_detail')(state) === 'Participant Update') {
                                  result = state.data.form.case['@case_id'];
                              }
                              else if (dataValue('form.survey_detail')(state) === 'New Farmer New Household' || dataValue('form.survey_detail')(state) === 'New Farmer Existing Household') {
                                  result = state.data.form.subcase_0.case['@case_id'];
                              }
                              return result;
                          }),
                          field(
                              "Other_ID_Number__c",
                              dataValue("form.Grower_Number")
                          )
                      )
                  )
              );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participant-Registration-and-Update---CommCare----SalesForce:
        source_trigger: webhook
        target_job: Production---Participant-Registration-and-Update---CommCare----SalesForce
        condition_type: js_expression
        condition_label: Production Participant Registration and Update CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Participant"
        enabled: true
  "x-[archived]-OpenFN-to-MySQL-Test":
    name: 'x [archived] OpenFN to MySQL Test'
    jobs:
      OpenFN-to-MySQL-Test:
        name: OpenFN to MySQL Test
        adaptor: '@openfn/language-mysql@latest'
        credential: null
        body: |
          // Your job goes here.
          console.log("Upserting data"),
            execute(
              upsert('connection_test', 
                fields(
                  field('session_id', dataValue('form.case.@case_id')(state)),
                  field('females_attended', dataValue('form.Current_session_participants.female_attendance')(state)),
                  field('males_attended', dataValue('form.Current_session_participants.male_attendance')(state))
                )
              )
            )(state);
          console.log("Upserting done!");

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->OpenFN-to-MySQL-Test:
        source_trigger: webhook
        target_job: OpenFN-to-MySQL-Test
        condition_type: js_expression
        condition_label: Attendance Light CommCare Salesforce Training Attendance
        condition_expression: |
          state.data.form["survey_type"] == "Attendance Light"
        enabled: true
  Global---Household-Sampling---SalesForce----CommCare:
    name: Global - Household Sampling - SalesForce -- CommCare
    jobs:
      Global---Household-Sampling---SalesForce----CommCare:
        name: Global - Household Sampling - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending sampled households
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: All Apps
          // JOB NAME ::  Global - Household Sampling - SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Household Sampling","source":"SF" }
          // AUTHOR :: Yves Mugenga | ymugenga@tns.org

          fn(state => {

            const uniqueProjectKey = state.data.uniqueProjectKey;

            return {
              ...state,
              uniqueProjectKey
            };
          });

          each(
            "$.data.households[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Household Sample",
                  };
                }),
                field("Name", dataValue("householdName")),
                field("Number_Of_Members", dataValue("numberOfMembers")),
                field("TNS_Id", dataValue("tnsId")),
                field("FV_AA_Visited", dataValue("fvAAVisited")),
                field("FV_AA_Sampled", dataValue("fvAASampled")),
                field("FV_AA_Current_Sampling_Round", dataValue("fvAACurrentSamplingRound")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("householdStatus")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Module_Name", dataValue("moduleName")),
                field("Module_Number", dataValue("moduleNumber")),
                field("Household_Participants", dataValue("householdParticipants")),

                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("householdName"),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": function(state){
                        return state.uniqueProjectKey + "_household_samples";
                      }
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name": dataValue("householdName")(state),
                      "n0:Number_Of_Members": dataValue("numberOfMembers")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:FV_AA_Visited": dataValue("fvAAVisited")(state),
                      "n0:FV_AA_Sampled": dataValue("fvAASampled")(state),
                      "n0:FV_AA_Current_Sampling_Round": dataValue("fvAACurrentSamplingRound")(state),
                      "n0:Status": dataValue("householdStatus")(state),
                      "n0:Module_Name": dataValue("moduleName")(state),
                      "n0:Module_Number": dataValue("moduleNumber")(state),
                      "n0:Household_Participants": dataValue("householdParticipants")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          //"case_type": "the_avengers_initiative_training_group",
                          "case_type": function(state){
                              // You might need to add conditions here for older projects
                              return state.uniqueProjectKey + "_training_group";
                          }
                          
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Global---Household-Sampling---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Global---Household-Sampling---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Global Households Sampling SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Household Sampling" && state.data.source == "SF"
        enabled: true
  "x-[archived]-DRC-2021-Ag---C1---Salesforce----CommCare---Training-Groups":
    name: 'x [archived] DRC 2021 Ag - C1 - Salesforce -- CommCare - Training Groups'
    jobs:
      DRC-2021-Ag---C1---Salesforce----CommCare---Training-Groups:
        name: DRC 2021 Ag - C1 - Salesforce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //DRC 2021 Ag :: C1 | Salesforce --> CommCare | Training Groups
          //coffee_drc_2021_agronomy_cohort_1
          //{"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_drc_2021_agronomy_cohort_1"}

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_2021_ag_c1_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_drc_2021_ag_c1_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->DRC-2021-Ag---C1---Salesforce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: DRC-2021-Ag---C1---Salesforce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee DRC USAID C2021 Salesforce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_usaid_2021"
        enabled: true
  Production---Coffee-KE-2023C---SalesForce----CommCare---Training-Groups:
    name: Production - Coffee KE 2023C - SalesForce -- CommCare - Training Groups
    jobs:
      Production---Coffee-KE-2023C---SalesForce----CommCare---Training-Groups:
        name: Production - Coffee KE 2023C - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@v1.5.1'
        credential: null
        body: |
          // Your job goes here.
          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_ke_2023c_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_ke_2023c_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2023C---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2023C---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee KE 2023C SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2023c"
        enabled: true
  Production---Farm-Visit---BU---CommCare----Salesforce:
    name: Production - Farm Visit - BU - CommCare -- Salesforce
    jobs:
      Production---Farm-Visit---BU---CommCare----Salesforce:
        name: Production - Farm Visit - BU - CommCare -- Salesforce
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //FARM VISIT JOB FOR ALL BURUNDI PROJECTS
          //Production - Farm Visit :: BU 2024 | CommCare --> Salesforce | Farm Visit Full
          //Farm Visit Best Practice Results
          //loop through methods of erosion control and insert into database :: Erosion Control BP

          //insert the farm visit record FT-Level
          each(
            "$.data",
            upsertIf(
              state.data.form["@name"] == "Farm Visit Full",
              "Farm_Visit__c",
              "FV_Submission_ID__c",
              fields(
                field("Name__c", "FV-" + dataValue("id")(state)),
                field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                field("Training_Group__c", dataValue("form.case.@case_id")),
                field("Primary_Farmer_PIMA_ID__c", dataValue("form.farm_being_visted")),
                field("Date_Visited__c", dataValue("form.date_of_visit")),
                field("visit_comments__c", dataValue("form.farm_visit_comments")),
                field("Farmer_Trainer__c", dataValue("form.trainer")),
                field("Shade_Tee_Species__c", dataValue("form.shade_tree_species")),
                field(
                  "No_of_separate_coffee_fields__c",
                  dataValue("form.number_of_fields")
                ),
                field("Field_Size__c", dataValue("form.field_size")),
                field("Farm_Visit_Photo_Url__c", function (state) {
                  var farmVisitPhotoUrl = "";
                  if (
                    dataValue("form.farm_visit_photo")(state) !== undefined &&
                    dataValue("form.farm_visit_photo")(state) !== ""
                  ) {
                    farmVisitPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.farm_visit_photo")(state);
                  }
                  return farmVisitPhotoUrl;
                }),
                field("Signature__c", function (state) {
                  var recorderSignatureUrl = "";
                  if (
                    dataValue("form.signature_of_farmer_trainer")(state) !== undefined &&
                    dataValue("form.signature_of_farmer_trainer")(state) !== ""
                  ) {
                    recorderSignatureUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.signature_of_farmer_trainer")(state);
                  }
                  return recorderSignatureUrl;
                }),
                field("Location_GPS__Latitude__s", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[0];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("Location_GPS__Longitude__s", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("Altitude__c", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                relationship(
                  "Farm_Visited__r",
                  "CommCare_Case_Id__c",
                  dataValue("form.farm_being_visted")
                )
                // relationship("Secondary_Farmer__r", "CommCare_Case_Id__c", function(state){
                //     var secondaryFarmer = '';
                //     if(dataValue("form.secondary_farmer_available")(state) == 'yes' && dataValue("form.secondary_farmer")(state) !== ''){
                //       secondaryFarmer = dataValue("form.secondary_farmer");
                //     }
                //     return secondaryFarmer;
                // })
              )
            )
          );

          each(
            "$.data",
            upsertIf(
              state.data.form["@name"] == "Farm Visit - AA",
              "Farm_Visit__c",
              "FV_Submission_ID__c",
              fields(
                field("Name__c", "FV-" + dataValue("id")(state)),
                field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                field("Training_Group__c", dataValue("form.training_group")),
                relationship("Farm_Visited__r", "CommCare_Case_Id__c", function (state) {
                  const visitedFarmers = dataValue("form.farm_being_visted")(state);
                  if (visitedFarmers) {
                    return visitedFarmers.split(" ")[0];
                  }
                }),
                field("Primary_Farmer_PIMA_ID__c", function (state) {
                  const visitedFarmers = dataValue("form.farm_being_visted")(state);
                  if (visitedFarmers) {
                    return visitedFarmers.split(" ")[0];
                  }
                }),

                // relationship("Secondary_Farmer__r", "CommCare_Case_Id__c", function(state){
                //   const visitedFarmers = dataValue("form.farm_being_visted")(state);
                //   var result = null;
                //   if(visitedFarmers.length > 1){
                //     result = visitedFarmers.split(" ")[1];
                //   }
                //   return result;
                // }),

                // field("Secondary_Farmer_PIMA_ID__c", function(state){
                //   const visitedFarmers = dataValue("form.farm_being_visted")(state);
                //   var result = null;
                //   if(visitedFarmers.length > 1){
                //     result = visitedFarmers.split(" ")[1];
                //   }
                //   return result;
                // }),
                field(
                  "Visit_Has_Training__c",
                  dataValue("form.is_this_a_farm_training_visit")
                ),
                //  field("Training_Session__c", dataValue("form.training_session")),
                // field("Other_Participants_Present__c", dataValue("form.any_other_participants_present")),
                field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                field("Date_Visited__c", dataValue("form.date_of_visit")),
                field("visit_comments__c", dataValue("form.farm_visit_comments")),
                field("Farmer_Trainer__c", dataValue("form.trainer")),
                field(
                  "No_of_separate_coffee_fields__c",
                  dataValue("form.opening_questions.number_of_separate_coffee_fields")
                ),
                field("Field_Age__c", dataValue("form.field_age")),
                field("Field_Size__c", function (state) {
                  var fieldSize = "";
                  if (
                    dataValue("form.field_size")(state) !== undefined &&
                    dataValue("form.field_size")(state) !== ""
                  ) {
                    fieldSize = dataValue("form.field_size");
                  } else if (
                    dataValue("form.field_size1")(state) !== undefined &&
                    dataValue("form.field_size1")(state) !== ""
                  ) {
                    fieldSize = dataValue("form.field_size1");
                  }

                  return fieldSize;
                }),
                field("Farm_Visit_Photo_Url__c", function (state) {
                  var farmVisitPhotoUrl = "";
                  if (
                    dataValue("form.farm_visit_photo")(state) !== undefined &&
                    dataValue("form.farm_visit_photo")(state) !== ""
                  ) {
                    farmVisitPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.farm_visit_photo")(state);
                  }
                  return farmVisitPhotoUrl;
                }),
                field("Signature__c", function (state) {
                  var recorderSignatureUrl = "";
                  if (
                    dataValue("form.signature_of_farmer_trainer")(state) !== undefined &&
                    dataValue("form.signature_of_farmer_trainer")(state) !== ""
                  ) {
                    recorderSignatureUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.signature_of_farmer_trainer")(state);
                  }
                  return recorderSignatureUrl;
                }),
                field("Location_GPS__Latitude__s", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[0];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("Location_GPS__Longitude__s", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("Altitude__c", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("FV_AA_Farmer_1_Attended_Any_Training__c", function (state) {
                  var result = "";
                  if (
                    dataValue("form.farmer_1_questions.attended_training")(state) == 1
                  ) {
                    result = "Yes";
                  } else if (
                    dataValue("form.farmer_1_questions.attended_training")(state) == 0
                  ) {
                    result = "No";
                  }
                  return result;
                }),
                field("FV_AA_Farmer_2_Attended_Any_Training__c", function (state) {
                  var result = "";
                  if (
                    dataValue("form.farmer_2_questions.attended_training")(state) == 1
                  ) {
                    result = "Yes";
                  } else if (
                    dataValue("form.farmer_2_questions.attended_training")(state) == 0
                  ) {
                    result = "No";
                  }
                  return result;
                }),
                field(
                  "FV_AA_Farmer_1_Trainings_Attended__c",
                  dataValue("form.farmer_1_questions.number_of_trainings")
                ),
                field(
                  "FV_AA_Farmer_2_Trainings_Attended__c",
                  dataValue("form.farmer_2_questions.number_of_trainings")
                ),
                field("FV_AA_Visit_Done_By_AA__c", "Yes"),
                field("Training_Session__c", dataValue("form.training_session"))
              )
            )
          );

          // Update Household Record - FV AA
          each(
            "$.data",
            upsertIf(
              state.data.form["@name"] == "Farm Visit - AA",
              "Household__c",
              "Id",
              fields(
                field("Id", state.data.form.case["@case_id"]),
                field(
                  "FV_AA_Visited__c",
                  dataValue("form.case.update.FV_AA_Visited")(state)
                ),
                relationship(
                  "Latest_Farm_Visit_Record__r",
                  "FV_Submission_ID__c",
                  "FV-" + dataValue("id")(state)
                )
              )
            )
          );

          // update FV with secondary Farmer
          each(
            "$.data",
            upsertIf(
              state.data.form.secondary_farmer !== "" &&
                state.data.form.secondary_farmer_available == "yes",
              "Farm_Visit__c",
              "FV_Submission_ID__c",
              fields(
                field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                relationship(
                  "Secondary_Farmer__r",
                  "CommCare_Case_Id__c",
                  dataValue("form.secondary_farmer")
                ),
                field("Secondary_Farmer_PIMA_ID__c", dataValue("form.secondary_farmer"))
              )
            )
          );

          //Best Practices :: Main Stem && Weeding &&  Shade Control && Record Keeping && Compost && Erosion Control && Nutrition && Safe Use of Pesticides
          each(
            "$.data",
            upsert(
              "FV_Best_Practices__c",
              "FV_Submission_ID__c",
              fields(
                field("Name__c", "FV-" + dataValue("id")(state)),
                field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                relationship("Farm_Visit__r", "FV_Submission_ID__c", "FV-" + dataValue("id")(state)),

                // 2.1 Main Stems
                field(
                  "number_of_main_stems_on_majority_trees__c",
                  dataValue(
                    "form.best_practice_questions.main_stems.number_of_main_stems_on_majority_trees"
                  )
                ),

                // 2.2 Main Stems Photo
                field("photo_of_trees_and_average_main_stems__c", function (state) {
                  var mainStemsPhotoURL = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.main_stems.trees_and_main_stems_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.main_stems.trees_and_main_stems_photo"
                    )(state) !== ""
                  ) {
                    mainStemsPhotoURL =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.main_stems.trees_and_main_stems_photo"
                      )(state);
                  }
                  return mainStemsPhotoURL;
                }),

                // 4.1 Nutrition
                field("Color_of_coffee_tree_leaves__c", function (state) {
                  var colorOfCoffeeLeaves = dataValue(
                    "form.best_practice_questions.nutrition.are_the_leave_green_or_yellow_pale_green"
                  )(state);
                  var returnColorOfCoffeeLeaves = "";

                  if (
                    colorOfCoffeeLeaves !== undefined &&
                    colorOfCoffeeLeaves !== "" &&
                    colorOfCoffeeLeaves == 0
                  ) {
                    returnColorOfCoffeeLeaves =
                      "5% or more (5 or more in 100) of the leaves are yellow, pale green or brown.";
                  }

                  if (
                    colorOfCoffeeLeaves !== undefined &&
                    colorOfCoffeeLeaves !== "" &&
                    colorOfCoffeeLeaves == 1
                  ) {
                    returnColorOfCoffeeLeaves =
                      "Nearly all leaves are dark green and less than 5% (less than 5 in 100) are yellow, pale green, or brown.";
                  }

                  return returnColorOfCoffeeLeaves;
                }),

                // 5.1 Weeding
                field("how_many_weeds_under_canopy_and_how_big__c", function (state) {
                  var weedsUnderCanopy = dataValue(
                    "form.best_practice_questions.weeding.how_many_weeds_under_canopy_and_how_big_are_they"
                  )(state);
                  var returnWeedsUnderCanopy = "";

                  if (weedsUnderCanopy == 1) {
                    returnWeedsUnderCanopy =
                      "Few small weeds (less than 30cm) under the tree canopy";
                  }

                  if (weedsUnderCanopy == 2) {
                    returnWeedsUnderCanopy =
                      "Many small weeds under the tree canopy (ground is covered with weeds)";
                  }

                  if (weedsUnderCanopy == 3) {
                    returnWeedsUnderCanopy =
                      "Many large weeds under the tree canopy (ground is covered with weeds)";
                  }

                  return returnWeedsUnderCanopy;
                }),

                // 5.3 Used Herbicides
                field(
                  "Have_herbicides_been_used_on_the_field__c",
                  dataValue("form.best_practice_questions.weeding.used_herbicides")
                ),

                // 5.2 Weeding Photograph
                field("photo_of_weeds_under_the_canopy__c", function (state) {
                  var weedsPhotoUrl = dataValue(
                    "form.best_practice_questions.weeding.weeds_under_the_canopy_photo"
                  )(state);
                  var returnWeedsPhotoUrl = "";

                  if (weedsPhotoUrl !== undefined && weedsPhotoUrl !== "") {
                    returnWeedsPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      weedsPhotoUrl;
                  }

                  return returnWeedsPhotoUrl;
                }),

                // 7.1 Safe use of pesticides
                field("used_pesticide__c", function (state) {
                  var usedPesticide = dataValue(
                    "form.best_practice_questions.safe_use_of_pesticides.used_pesticides"
                  )(state);
                  var returnUsedPesticide = "";
                  if (usedPesticide == 1) {
                    returnUsedPesticide = "Yes";
                  } else if (usedPesticide == 0) {
                    returnUsedPesticide = "No";
                  }
                  return returnUsedPesticide;
                }),

                // 7.2 
                field(
                  "pesticide_number_of_times__c",
                  dataValue(
                    "form.best_practice_questions.safe_use_of_pesticides.pesticide_number_of_times"
                  )
                ),

                // 7.3
                field("pesticide_spray_type__c", function (state) {
                  const sprayType = dataValue(
                    "form.best_practice_questions.safe_use_of_pesticides.pesticide_spray_type"
                  )(state);
                  var returnSprayType = "";

                  if (sprayType === "1") {
                    returnSprayType = "Routine spray";
                  } else if (sprayType === "2") {
                    returnSprayType = "After scouting and seeing a pest";
                  }
                  return returnSprayType;
                }),

                // 9.1 shade management
                field("level_of_shade_present_on_the_farm__c", function (state) {
                  var levelOfShadeOnPlot = dataValue(
                    "form.best_practice_questions.shade_control.level_of_shade_present_on_the_farm"
                  )(state);
                  var returnLevelOfShadeOnPlot = "";

                  if (levelOfShadeOnPlot == 0) {
                    returnLevelOfShadeOnPlot = "NO shade, less than 5%";
                  }

                  if (levelOfShadeOnPlot == 1) {
                    returnLevelOfShadeOnPlot = "Light shade, 5 to 20%";
                  }

                  if (levelOfShadeOnPlot == 2) {
                    returnLevelOfShadeOnPlot = "Medium shade, 20 to 40%";
                  }

                  if (levelOfShadeOnPlot == 3) {
                    returnLevelOfShadeOnPlot = "Heavy shade, over 40%";
                  }

                  return returnLevelOfShadeOnPlot;
                }),

                // 9.2 
                field("photo_of_level_of_shade_on_the_plot__c", function (state) {
                  var shadePhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot"
                    )(state) !== ""
                  ) {
                    shadePhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot"
                      )(state);
                  }

                  return shadePhotoUrl;
                }),

                // 1.2
                field("photo_of_the_compost_manure__c", function (state) {
                  var compostPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost.photo_of_the_compost_manure"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.compost.photo_of_the_compost_manure"
                    )(state) !== ""
                  ) {
                    compostPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.compost.photo_of_the_compost_manure"
                      )(state);
                  }

                  return compostPhotoUrl;
                }),

                //erosion control
                field("Stabilizing_Grasses_Photo_URL__c", function (state) {
                  var sgPhotoURL = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.erosion_control.stabilizing_grasses_image"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.erosion_control.stabilizing_grasses_image"
                    )(state) !== ""
                  ) {
                    sgPhotoURL =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.erosion_control.stabilizing_grasses_image"
                      )(state);
                  }

                  return sgPhotoURL;
                }),
                field("Mulch_Photo_URL__c", function (state) {
                  var mulchPhotoURL = "";
                  if (
                    dataValue("form.best_practice_questions.erosion_control.mulch_image")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.erosion_control.mulch_image")(
                      state
                    ) !== ""
                  ) {
                    mulchPhotoURL =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.erosion_control.mulch_image"
                      )(state);
                  }

                  return mulchPhotoURL;
                }),
                field("Water_Traps_Photo_URL__c", function (state) {
                  var wtPhotoURL = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.erosion_control.water_traps_or_trenches_image"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.erosion_control.water_traps_or_trenches_image"
                    )(state) !== ""
                  ) {
                    wtPhotoURL =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.erosion_control.water_traps_or_trenches_image"
                      )(state);
                  }

                  return wtPhotoURL;
                }),
                field("Physical_Barriers_Photo_URL__c", function (state) {
                  var pbPhotoURL = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.erosion_control.physical_barriers_image"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.erosion_control.physical_barriers_image"
                    )(state) !== ""
                  ) {
                    pbPhotoURL =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.erosion_control.physical_barriers_image"
                      )(state);
                  }

                  return pbPhotoURL;
                }),
                field("Terraces_Photo_URL__c", function (state) {
                  var terracesPhotoURL = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.erosion_control.terraces_image"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.erosion_control.terraces_image"
                    )(state) !== ""
                  ) {
                    terracesPhotoURL =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.erosion_control.terraces_image"
                      )(state);
                  }

                  return terracesPhotoURL;
                }),
                field("Contour_Planting_Photo_URL__c", function (state) {
                  var cpPhotoURL = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.erosion_control.contour_planting_image"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.erosion_control.contour_planting_image"
                    )(state) !== ""
                  ) {
                    cpPhotoURL =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.erosion_control.contour_planting_image"
                      )(state);
                  }

                  return cpPhotoURL;
                }),
                field("Cover_Crop_Photo_URL__c", function (state) {
                  var ccPhotoURL = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image"
                    )(state) !== ""
                  ) {
                    ccPhotoURL =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image"
                      )(state);
                  }

                  return ccPhotoURL;
                })
              )
            )
          );

          // 8.1 Erosion Control
          beta.each(
            function (state) {
              //incoming erosion data
              var best_practice_results_data = dataValue(
                "form.best_practice_questions.erosion_control.methods_of_erosion_control"
              )(state);

              if (best_practice_results_data !== undefined) {
                return best_practice_results_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    best_result_submission:
                      "FVBPN-" + dataValue("id")(state) + "_erosion_" + resultId,
                    farm_visit_submission: "FV-" + dataValue("id")(state),
                  };
                });
              }
            },
            upsert(
              "FV_Best_Practice_Results__c",
              "Best_Practice_Result_Submission_ID__c",
              fields(
                field(
                  "Best_Practice_Result_Submission_ID__c",
                  dataValue("best_result_submission")
                ), //best result submission ID
                relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                field("Best_Practice_Result_Type__c", "Erosion Control"), //this is the actual result type
                field("Best_Practice_Result_Description__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Stabilizing grasses";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Mulch";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "Water traps or trenches";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "4"
                  ) {
                    returnResults = "Physical barriers. (e.g. rocks)";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "5"
                  ) {
                    returnResults = "Terraces";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "6"
                  ) {
                    returnResults = "Contour planting";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "7"
                  ) {
                    returnResults = "Bean or Arachis cover crop between the rows";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "No erosion control method seen";
                  }

                  return returnResults;
                })
              )
            )
          );

          // 4.2 loop through chemical/fertilizier applied and insert into database :: Nutrition BP
          beta.each(
            function (state) {
              //incoming chemical/fertilizer used data
              var best_practice_results_data = dataValue(
                "form.best_practice_questions.nutrition.type_chemical_applied_on_coffee_last_12_months"
              )(state);

              if (best_practice_results_data !== undefined) {
                return best_practice_results_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    best_result_submission:
                      "FVBPN-" + dataValue("id")(state) + "_fertilizer_" + resultId,
                    farm_visit_submission: "FV-" + dataValue("id")(state),
                  };
                });
              }
            },
            upsert(
              "FV_Best_Practice_Results__c",
              "Best_Practice_Result_Submission_ID__c",
              fields(
                field(
                  "Best_Practice_Result_Submission_ID__c",
                  dataValue("best_result_submission")
                ), //best result submission ID
                relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                field(
                  "Best_Practice_Result_Type__c",
                  "Chemicals and Fertilizers Applied"
                ), //this is the actual result type
                field("Best_Practice_Result_Description__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Compost";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Manure";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "NPK 22:6:12";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "4"
                  ) {
                    returnResults = "Lime";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "5"
                  ) {
                    returnResults = "DAP";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "6"
                  ) {
                    returnResults = "Urea";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "Did NOT apply any fertilizer in past 12 months";
                  }

                  return returnResults;
                })
              )
            )
          );

          // 6. IPDM: loop through methods of controlling coffee berry borer :: Integrated Pest and Disease Management BP
          beta.each(
            function (state) {
              //incoming coffee berry borer data
              var best_practice_results_data = dataValue(
                "form.best_practice_questions.pest_disease_management.methods_of_controlling_coffee_berry_borer"
              )(state);

              if (best_practice_results_data !== undefined) {
                return best_practice_results_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    best_result_submission:
                      "FVBPN-" + dataValue("id")(state) + "_cbb_" + resultId,
                    farm_visit_submission: "FV-" + dataValue("id")(state),
                  };
                });
              }
            },
            upsert(
              "FV_Best_Practice_Results__c",
              "Best_Practice_Result_Submission_ID__c",
              fields(
                field(
                  "Best_Practice_Result_Submission_ID__c",
                  dataValue("best_result_submission")
                ), //best result submission ID
                relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                field(
                  "Best_Practice_Result_Type__c",
                  "Management of Coffee Berry Borer (CBB)"
                ), //this is the actual result type
                field("Best_Practice_Result_Description__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults =
                      "Encourage natural predators, parasites and beneficial insects by reducing pesticide sprays.";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults =
                      "Remove all old berries at the end of harvest, known as crop hygiene";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults =
                      "Harvest ripe cherries regularly - to reduce pest and disease levels";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "4"
                  ) {
                    returnResults =
                      "Hang Berry Borer traps to trap and kill Berry Borer beetles";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "5"
                  ) {
                    returnResults =
                      "Collect fallen berries at the end of the season - crop hygiene";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "6"
                  ) {
                    returnResults = "Feed the trees well to keep them healthy";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "7"
                  ) {
                    returnResults =
                      "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "8"
                  ) {
                    returnResults = "Prune to keep the canopy open";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "9"
                  ) {
                    returnResults =
                      "Rejuvenate regularly to keep main stems less than 8 years old";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "10"
                  ) {
                    returnResults =
                      "Smooth the bark at the base of the tree to reduce egg laying sites for While Stem Borer";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "11"
                  ) {
                    returnResults = "Use a wite to kill White Stem Borer larvae";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "12"
                  ) {
                    returnResults = "Spray homemade herbal or botanical pesticides";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "13"
                  ) {
                    returnResults = "Spray fungicides eg. copper  to manage rust";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "15"
                  ) {
                    returnResults = "Spray normal  insecticides";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "Does not know any methods";
                  }

                  return returnResults;
                })
              )
            )
          );

          // 3. Pruning: loop through pruning methods :: Pruning BP
          beta.each(
            function (state) {
              //incoming pruning data
              var best_practice_results_data =
                dataValue(
                  "form.best_practice_questions.pruning.pruning_method_on_majority_trees"
                )(state) || "";

              if (best_practice_results_data !== undefined) {
                return best_practice_results_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    best_result_submission:
                      "FVBPN-" + dataValue("id")(state) + "_pruning_" + resultId,
                    farm_visit_submission: "FV-" + dataValue("id")(state),
                    // field_age: dataValue("form.field_age")(state),
                  };
                });
              }
            },
            upsert(
              "FV_Best_Practice_Results__c",
              "Best_Practice_Result_Submission_ID__c",
              fields(
                field(
                  "Best_Practice_Result_Submission_ID__c",
                  dataValue("best_result_submission")
                ), //best result submission ID
                relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                field("Best_Practice_Result_Type__c", "Pruning"), //this is the actual result type
                field("Best_Practice_Result_Description__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Centers opened";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Unwanted suckers removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "Dead branches removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "4"
                  ) {
                    returnResults = "Branches touching the ground removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "5"
                  ) {
                    returnResults = "Broken / unproductive stems and/or branches removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "6"
                  ) {
                    returnResults =
                      "Many primaries removed on the lower half of the tree.";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "No pruning methods used";
                  }

                  return returnResults;
                })
              )
            )
          );

          // 1. Compost
          beta.each(
            function (state) {
              //incoming compost data
              var best_practice_results_data =
                dataValue(
                  "form.compost.do_you_have_compost_manure"
                )(state) || "";
                
               if (best_practice_results_data !== undefined) {
                return best_practice_results_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    best_result_submission:
                      "FVBPN-" + dataValue("id")(state) + "_compost_" + resultId,
                    farm_visit_submission: "FV-" + dataValue("id")(state),
                    // field_age: dataValue("form.field_age")(state),
                  };
                });
              }
            },
            upsert(
              "FV_Best_Practice_Results__c",
              "Best_Practice_Result_Submission_ID__c",
              fields(
                field(
                  "Best_Practice_Result_Submission_ID__c",
                  dataValue("best_result_submission")
                ), //best result submission ID
                relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                field("Best_Practice_Result_Type__c", "Compost"), //this is the actual result type
                field("Best_Practice_Result_Description__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "NO compost or manure";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "YES a compost heap";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "YES a  compost pit";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "YES a manure heap";
                  }
                  return returnResults;
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Production---Farm-Visit---BU---CommCare----Salesforce:
        source_trigger: webhook
        target_job: Production---Farm-Visit---BU---CommCare----Salesforce
        condition_type: js_expression
        condition_label: Production - Farm Visit - BU - CommCare -- Salesforce
        condition_expression: |
          state.data.form["survey_type"] == "Farm Visit Full - BU"
        enabled: true
  Production---Coffee-CREW-C2024---Demo-Plot-Observations---CommCare----SalesForce:
    name: Production - Coffee CREW C2024 - Demo Plot Observations - CommCare --
      SalesForce
    jobs:
      DPO---Coffee-CREW-C2024---CommCare----SalesForce:
        name: DPO - Coffee CREW C2024 - CommCare -- SalesForce
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //Demo Plot Observations
          //Production - Coffee CREW C2024 | Demo Plot Observations | CommCare --> SalesForce


          each(
          "$.data",
            upsert("Observation__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function(state) {
                  var dempPlotPhotoUrl = '';
                  if(dataValue("form.Demo_Plot_Photo")(state) !== undefined && dataValue("form.Demo_Plot_Photo")(state) !== '') {
                    dempPlotPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Demo_Plot_Photo")(state);  
                  }
                  return dempPlotPhotoUrl;
                }),
                
                field("Observer_Signature__c", function(state) {
                  var observerSignatureUrl = '';
                  if(dataValue("form.agronomy_advisor_signature")(state) !== undefined && dataValue("form.agronomy_advisor_signature")(state) !== '') {
                    observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.agronomy_advisor_signature")(state);  
                  }
                  return observerSignatureUrl;
                }),
                
                field("Observation_Location__Latitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[0]; 
                  }
                }),
                field("Observation_Location__Longitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[1]; 
                  }
                }),
                field("Altitude__c", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[2]; 
                  }
                })
              )
            )
          ),

          //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS
          // Creates results for Stumped Trees


          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__stumped_trees";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__stumped_trees"),
              field("Result__c", dataValue("form.best_practice_questions.stumped.stumped_trees"))
            ))),

          // Create results for Sucker Selection
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__sucker_selection_taken_place";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__sucker_selection_taken_place"),
              field("Result__c", dataValue("form.best_practice_questions.sucker_selection.Sucker_Selection_Taken_Place")),
              field("Result_number__c", dataValue("form.best_practice_questions.sucker_selection.number_of_suckers"))
              
            ))),



          // Create results for Compost Heap
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__compost_heap"),
              field("Result__c", dataValue("form.best_practice_questions.compost_heap.present_compost_heap")),
              field("Compost_Photo__c", function(state) {
                  var compostPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== undefined && dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== '') {
                    compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state);  
                  }
                  return compostPhotoUrl;
                })
                
              
            ))),


          // Create results for Weed Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__weed_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__weed_management"),
              field("Result__c", dataValue("form.best_practice_questions.weed_management.has_the_demo_plot_been_dug")),
              field("Result_Text__c", dataValue("form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy")),
              field("Result_Text_Two__c", function(state){
                var weedsSize = '';
                if(dataValue("form.best_practice_questions.weed_management.how_big_are_the_weeds")(state) !== undefined){
                  weedsSize = dataValue("form.best_practice_questions.weed_management.how_big_are_the_weeds")(state);
                }
                return weedsSize;
              }),
              field("Weed_Management_Photo__c", function(state) {
                  var weedsPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== '') {
                    weedsPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state);  
                  }
                  return weedsPhotoUrl;
                })
            ))),


          // Create results for Shade Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__shade_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__shade_management"),
              field("Result__c", dataValue("form.best_practice_questions.shade_management.level_of_shade_present")),
              field("Shade_Management_Photo__c", function(state) {
                  var shadePhotoUrl = '';
                  if(dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== '') {
                    shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state);  
                  }
                  return shadePhotoUrl;
                })
            ))),


          // Create results for Mulch
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__mulch";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__mulch"),
              field("Result__c", dataValue("form.best_practice_questions.mulch.mulch_under_the_canopy")),
              field("Result_Text__c", dataValue("form.best_practice_questions.mulch.thickness_of_mulch"))
            ))),


          // Create results for Vetiver Planted
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__vetiver_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__vetiver_planted"),
              field("Result__c", dataValue("form.best_practice_questions.vetiver.vetiver_planted"))
            )));

          /*
          // Create results for Shade_Trees_Planted {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__shade_trees_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__shade_trees_planted"),
              field("Result__c", dataValue("form.Shade_Trees_Planted"))
            ))),


          // Create results for Compost_Heap {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__compost_heap"),
              field("Result__c", dataValue("form.Compost_Heap")),
              field("Photo_URL__c", function(state) {
                  var compostHeapPhotoUrl = '';
                  if(dataValue("form.Photo_of_Compost_Heap")(state) !== undefined && dataValue("form.Photo_of_Compost_Heap")(state) !== '') {
                    compostHeapPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo_of_Compost_Heap")(state);  
                  }
                  return compostHeapPhotoUrl;
                })
            ))),


          // Create results for Vertiver_Grass_on_Demo_Plot {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__vertiver_grass_on_demo_plot";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__vertiver_grass_on_demo_plot"),
              field("Result__c", dataValue("form.Vertiver_Grass_on_Demo_Plot"))
            )));

          // Version control
          */

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->DPO---Coffee-CREW-C2024---CommCare----SalesForce:
        source_trigger: webhook
        target_job: DPO---Coffee-CREW-C2024---CommCare----SalesForce
        condition_type: js_expression
        condition_label: Production Coffee CREW C2024 Demo Plot Observations CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "f079b0daae1d4d34a89e331dc5a72fbd"
        enabled: true
  Production---Coffee-ZIM---CommCare----SalesForce---Training-Attendance:
    name: Production - Coffee ZIM - CommCare -- SalesForce - Training Attendance
    jobs:
      Production---Coffee-ZIM---CommCare----SalesForce---Training-Attendance:
        name: Production - Coffee ZIM - CommCare -- SalesForce - Training Attendance
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Production - Coffee ZIM | CommCare --> SalesForce | Training Attendance
          //{"form":{"survey_type":"Training Attendance"},"app_id":"b75286e874c74eb09b8da436709d7f3c"}

          each(
            "$.data",
            upsert("Training_Session__c", "CommCare_Case_Id__c",
              fields(
                field("CommCare_Case_Id__c", dataValue("form.training_session")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Number_in_Attendance__c", dataValue("form.attendance_count")),
                field("Session_Photo_URL__c", function(state) {
                    var photoUrl = '';
                    if(dataValue("form.photo")(state) !== undefined && dataValue("form.photo")(state) !== '') {
                      photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);  
                    }
                    return photoUrl;
                }),
                field("Date__c", dataValue("form.date")),
                field('Location_GPS__Latitude__s', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[0];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                }),
                field('Location_GPS__Longitude__s', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                }),
                field('Altitude__c', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                })
                )
              )
            );

          beta.each(
            function(state) {
              if (state.data.form.present_participants) {
                return state.data.form.present_participants.split(" ").map(
                  function(pId) {
                    return {
                      participant: pId,
                      session: dataValue("form.training_session")(state),
                      submission: dataValue("form.training_session")(state)+pId,
                      sessionPhoto: dataValue("form.photo")(state)
                    };
                  }
                );
              }
            },
            upsert("Attendance__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("submission")),
                field("Status__c", "Present"),
                relationship("Training_Session__r", "CommCare_Case_Id__c", dataValue("session")),
                relationship("Participant__r", "CommCare_Case_Id__c", dataValue("participant"))
              )
            )
          );
          each(
            "$.data",
            upsert("Training_Session__c", "CommCare_Case_Id__c",
              fields(
                field("CommCare_Case_Id__c", dataValue("form.training_session")),
                field("Updated_from_CommCare__c", true)
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---CommCare----SalesForce---Training-Attendance:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---CommCare----SalesForce---Training-Attendance
        condition_type: js_expression
        condition_label: Production Coffee ZIM CommCare SalesForce Training Attendance
        condition_expression: |
          state.data.form["survey_type"] == "Training Attendance" && state.data["app_id"] == "b75286e874c74eb09b8da436709d7f3c"
        enabled: true
  Coffee---ZW-Nespresso--Ag----c2---CommCare----Salesforce---Participant-Registration-and-Update:
    name: Coffee - ZW Nespresso -Ag- - c2 - CommCare -- Salesforce - Participant
      Registration and Update
    jobs:
      Coffee---ZW-Nespresso--Ag----c2---CommCare----Salesforce---Participant-Registration-and-Update:
        name: Coffee - ZW Nespresso -Ag- - c2 - CommCare -- Salesforce - Participant
          Registration and Update
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Coffee - ZW Nespresso (Ag) - c2 | CommCare --> Salesforce | Participant Registration and Update
          //{"app_id":"c14d231df6e142deb9bdd44319287437","form":{"survey_type":"Participant"}}

          //New Households use this section.
          beta.each(
            "$.data",
            upsertIf(
              state.data.form.survey_detail == "New Household",
              "Household__c", "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue("form.Household_Id")),
                  field("Name", dataValue("form.Household_Number")),
                  field("Training_Group__c", dataValue("form.Training_Group_Id")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees"))
                )
              )
            ),

            beta.each(
              "$.data",
              upsertIf(
              state.data.form.survey_detail == "New Household",
              "Training_Group__c", "CommCare_Case_Id__c",
                fields(
                  field("Household_Counter__c", dataValue("form.Update_Household_Counter")), 
                  field("CommCare_Case_Id__c", dataValue("form.Training_Group_Id"))     
                )
              )
            ),
            
            beta.each(
              "$.data",
              upsertIf(
              state.data.form.survey_detail == "New Household",
              "Participant__c", "CommCare_Case_Id__c",
                fields(
                  field("CommCare_Case_Id__c", dataValue("form.subcase_0.case.@case_id")),
                  field("TNS_Id__c", dataValue("form.Farmer_Id")),
                  field("Age__c", dataValue("form.Age")),
                  field("Name", dataValue("form.First_Name")),
                  field("Middle_Name__c", dataValue("form.Middle_Name")),
                  field("Last_Name__c", dataValue("form.Last_Name")),
                  field("Gender__c", dataValue("form.Gender")),
                  field("Status__c", dataValue("form.Status")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees")),
                  field("Sent_to_OpenFn_Status__c", "Complete"),
                  field("Phone_Number__c", dataValue("form.Phone_Number")),
                  field("Other_ID_Number__c", dataValue("form.Cooperative_Membership_Number")),
                  field("Primary_Household_Member__c", dataValue("form.Primary_Household_Member")),
                  relationship("Household__r", "Household_ID__c", dataValue("form.Household_Id")),
                  relationship("Training_Group__r", "CommCare_Case_Id__c", dataValue("form.Training_Group_Id"))
                )
              )
            ),

          //Existing household use this section.
          beta.each(
            "$.data",
            upsertIf(
              state.data.form.survey_detail == "Existing Household",
              "Household__c", "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue("form.Household_Id")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees"))
                )
              )
            ),

            beta.each(
              "$.data",
              upsertIf(
              state.data.form.survey_detail == "Existing Household",
              "Participant__c", "CommCare_Case_Id__c",
                fields(
                  field("CommCare_Case_Id__c", dataValue("form.subcase_0.case.@case_id")),
                  field("TNS_Id__c", dataValue("form.Farmer_Id")),
                  field("Age__c", dataValue("form.Age")),
                  field("Name", dataValue("form.First_Name")),
                  field("Middle_Name__c", dataValue("form.Middle_Name")),
                  field("Last_Name__c", dataValue("form.Last_Name")),
                  field("Gender__c", dataValue("form.Gender")),
                  field("Status__c", dataValue("form.Status")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees")),
                  field("Sent_to_OpenFn_Status__c", "Complete"),
                  field("Phone_Number__c", dataValue("form.Phone_Number")),
                  field("Other_ID_Number__c", dataValue("form.Cooperative_Membership_Number")),
                  field("Primary_Household_Member__c", dataValue("form.Primary_Household_Member")),
                  relationship("Household__r", "Household_ID__c", dataValue("form.Household_Id")),
                  relationship("Training_Group__r", "CommCare_Case_Id__c", dataValue("form.Training_Group_Id"))
                )
              )
            ),

          //Update participants use this section.
          beta.each(
            "$.data",
            upsertIf(
              state.data.form.survey_detail == "Participant Update",
              "Household__c", "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue("form.Household_Id")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees"))
                )
              )
            ),

            beta.each(
              "$.data",
              upsertIf(
              state.data.form.survey_detail == "Participant Update",
              "Participant__c", "CommCare_Case_Id__c",
                fields(
                  field("CommCare_Case_Id__c", dataValue("form.case.@case_id")),
                  field("Age__c", dataValue("form.Age")),
                  field("Name", dataValue("form.First_Name")),
                  field("Middle_Name__c", dataValue("form.Middle_Name")),
                  field("Last_Name__c", dataValue("form.Last_Name")),
                  field("Gender__c", dataValue("form.Gender")),
                  field("Farm_Size__c", dataValue("form.Number_of_Trees")),
                  field("Phone_Number__c", dataValue("form.Phone_Number")),
                  field("Other_ID_Number__c", dataValue("form.Cooperative_Membership_Number"))
                )
              )
            );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-Nespresso--Ag----c2---CommCare----Salesforce---Participant-Registration-and-Update:
        source_trigger: webhook
        target_job: Coffee---ZW-Nespresso--Ag----c2---CommCare----Salesforce---Participant-Registration-and-Update
        condition_type: js_expression
        condition_label: Coffee ZW Nespresso Ag c2 CommCare Salesforce Participant
          Registration and Update
        condition_expression: |
          state.data.form["survey_type"] == "Participant" && state.data["app_id"] == "c14d231df6e142deb9bdd44319287437"
        enabled: true
  Production---Coffee-KE-2024BC---SalesForce----CommCare---Training-Sessions:
    name: Production - Coffee KE 2024BC - SalesForce -- CommCare - Training Sessions
    jobs:
      Production---Coffee-KE-2024BC---SalesForce----CommCare---Training-Sessions:
        name: Production - Coffee KE 2024BC - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.
          each(
              "$.data.trainingSessions[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Session",
                      "uiVersion": "1",
                      "version": "148",
                      "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Session_1_Date", dataValue("sessionOneDate")),
                  field("Session_2_Date", dataValue("sessionTwoDate")),
                  field("Training_Group_Name", dataValue("trainingGroupName")),
                  field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                  field("Module_Name", dataValue("trainingModuleName")),
                  field("Module_Number", dataValue("trainingModuleNumber")),
                  field("Current_Previous_Name", function(state){
                    return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                  }),
                  field("Training_Session_Name", function(state) {
                    return (
                      dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                    );
                  }),
                  field("Current_Previous", dataValue("currentPrevious")),
                  field("Case_Id", dataValue("sessionId")),
                  field("Parent_Id", dataValue("trainingGroupCommCareId")),
                  field("subcase_0", function(state) {
                    return {
                      "n0:case": {
                        "@": {
                          "case_id": dataValue("sessionId")(state),
                          "date_modified": new Date().toISOString(),
                          "user_id": "e926526fc13b126fffdb6d001f25b269",
                          "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                        },
                        "n0:create": {
                          "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                          "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                          "n0:case_type": "coffee_ke_2024bc_training_session"
                        },
                        "n0:update": {
                          "n0:Case_Id": dataValue("sessionId")(state),
                          "n0:Date": new Date().toISOString(),
                          "n0:Module_Name": dataValue("trainingModuleName")(state),
                          "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                          "n0:Current_Previous": dataValue("currentPrevious")(state),
                          "n0:Current_Previous_Name": function(){
                            return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                          },
                          "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                          "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                          "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                          "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                          "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                        },
                        "n0:index":  {
                          "n0:parent" : {
                            "@": {
                              "case_type": "coffee_ke_2024bc_training_group"
                            },
                            "#": dataValue("trainingGroupCommCareId")(state)
                          }
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "867066029216796",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024BC---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024BC---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee KE 2024BC SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024bc"
        enabled: true
  Production---Coffee-ZIM---CommCare----SalesForce---Demo-Plot-Observations:
    name: Production - Coffee ZIM - CommCare -- SalesForce - Demo Plot Observations
    jobs:
      Production---Coffee-ZIM---CommCare----SalesForce---Demo-Plot-Observations:
        name: Production - Coffee ZIM - CommCare -- SalesForce - Demo Plot Observations
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Demo-plot observation

          each(
          "$.data",
            upsert("Observation__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Demo_Plot_Photo__c", function(state) {
                  var dempPlotPhotoUrl = '';
                  if(dataValue("form.Demo_Plot_Photo")(state) !== undefined && dataValue("form.Demo_Plot_Photo")(state) !== '') {
                    dempPlotPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Demo_Plot_Photo")(state);  
                  }
                  return dempPlotPhotoUrl;
                }),
                
                field("Observer_Signature__c", function(state) {
                  var observerSignatureUrl = '';
                  if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
                    observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
                  }
                  return observerSignatureUrl;
                }),
                
                field("Observation_Location__Latitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[0]; 
                  }
                }),
                field("Observation_Location__Longitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[1]; 
                  }
                }),
                field("Altitude__c", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[2]; 
                  }
                })
              )
            )
          ),

          //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS

          // Create results for Rejuvinated_Trees {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__rejuvinated_trees";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__rejuvinated_trees"),
              field("Result__c", dataValue("form.Rejuvinated_Trees"))
            ))),

          // Create results for Sucker_Selection_Taken_Place {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__sucker_selection_taken_place";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__sucker_selection_taken_place"),
              field("Result__c", dataValue("form.Sucker_Selection_Taken_Place"))
            ))),


          // Create results for Maximum_of_Three_Suckers {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__maximum_of_three_suckers";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__maximum_of_three_suckers"),
              field("Result__c", dataValue("form.Maximum_of_Three_Suckers"))
            ))),


          // Create results for Pruned_Demo_Plot {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__pruned_demo_plot";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__pruned_demo_plot"),
              field("Result__c", dataValue("form.Pruned_Demo_Plot"))
            ))),


          // Create results for Trees_Reduced_to_2_or_3_Main_Stems {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__trees_reduced_to_2_or_3_main_stems";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__trees_reduced_to_2_or_3_main_stems"),
              field("Result__c", dataValue("form.Trees_Reduced_to_2_or_3_Main_Stems"))
            ))),


          // Create results for Demo_Plots_Free_of_Weeds {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__demo_plots_free_of_weeds";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__demo_plots_free_of_weeds"),
              field("Result__c", dataValue("form.Demo_Plots_Free_of_Weeds"))
            ))),


          // Create results for Mulched_Under_Coffee_Canopy {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__mulched_under_coffee_canopy";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__mulched_under_coffee_canopy"),
              field("Result__c", dataValue("form.Mulched_Under_Coffee_Canopy"))
            ))),


          // Create results for X20_40_Shade_over_Demo_Plot {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__X20_40_shade_over_demo_plot";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__X20_40_shade_over_demo_plot"),
              field("Result__c", dataValue("form.X20_40_Shade_over_Demo_Plot"))
            ))),


          // Create results for Shade_Trees_Planted {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__shade_trees_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__shade_trees_planted"),
              field("Result__c", dataValue("form.Shade_Trees_Planted"))
            ))),


          // Create results for Compost_Heap {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__compost_heap"),
              field("Result__c", dataValue("form.Compost_Heap")),
              field("Photo_URL__c", function(state) {
                  var compostHeapPhotoUrl = '';
                  if(dataValue("form.Photo_of_Compost_Heap")(state) !== undefined && dataValue("form.Photo_of_Compost_Heap")(state) !== '') {
                    compostHeapPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo_of_Compost_Heap")(state);  
                  }
                  return compostHeapPhotoUrl;
                })
            ))),


          // Create results for Vertiver_Grass_on_Demo_Plot {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_zim__vertiver_grass_on_demo_plot";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim__vertiver_grass_on_demo_plot"),
              field("Result__c", dataValue("form.Vertiver_Grass_on_Demo_Plot"))
            )));

          // Version control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---CommCare----SalesForce---Demo-Plot-Observations:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---CommCare----SalesForce---Demo-Plot-Observations
        condition_type: js_expression
        condition_label: Production Coffee ZIM CommCare SalesForce Demo Plot Observations
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "b75286e874c74eb09b8da436709d7f3c"
        enabled: true
  Global---SalesForce----CommCare---Training-Sessions:
    name: Global - SalesForce -- CommCare - Training Sessions
    jobs:
      Global---SalesForce----CommCare---Training-Sessions:
        name: Global - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW C1 - C2018 | SalesForce --> CommCare | Training Sessions
          //{"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_zim_c2_ag"}


          each(
              "$.data.trainingSessions[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Session",
                      "uiVersion": "1",
                      "version": "148",
                      "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Session_1_Date", dataValue("sessionOneDate")),
                  field("Session_2_Date", dataValue("sessionTwoDate")),
                  field("Training_Group_Name", dataValue("trainingGroupName")),
                  field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                  field("Module_Name", dataValue("trainingModuleName")),
                  field("Module_Number", dataValue("trainingModuleNumber")),
                  field("Current_Previous_Name", function(state){
                    return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                  }),
                  field("Training_Session_Name", function(state) {
                    return (
                      dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                    );
                  }),
                  field("Current_Previous", dataValue("currentPrevious")),
                  field("Case_Id", dataValue("sessionId")),
                  field("Parent_Id", dataValue("trainingGroupCommCareId")),
                  field("subcase_0", function(state) {
                    return {
                      "n0:case": {
                        "@": {
                          "case_id": dataValue("sessionId")(state),
                          "date_modified": new Date().toISOString(),
                          "user_id": "e926526fc13b126fffdb6d001f25b269",
                          "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                        },
                        "n0:create": {
                          "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                          "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                          "n0:case_type": "the_avengers_initiative_training_session"
                        },
                        "n0:update": {
                          "n0:Case_Id": dataValue("sessionId")(state),
                          "n0:Date": new Date().toISOString(),
                          "n0:Module_Name": dataValue("trainingModuleName")(state),
                          "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                          "n0:Current_Previous": dataValue("currentPrevious")(state),
                          "n0:Current_Previous_Name": function(){
                            return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                          },
                          "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                          "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                          "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                          "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                          "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                        },
                        "n0:index":  {
                          "n0:parent" : {
                            "@": {
                              "case_type": "avengers_initiative_training_group"
                            },
                            "#": dataValue("trainingGroupCommCareId")(state)
                          }
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "867066029216796",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Global---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Global---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Global SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "the_avengers_initiative"
        enabled: true
  Coffee---PR-2022---SalesForce----CommCare---Training-Participants:
    name: Coffee - PR 2022 - SalesForce -- CommCare - Training Participants
    jobs:
      Coffee---PR-2022---SalesForce----CommCare---Training-Participants:
        name: Coffee - PR 2022 - SalesForce -- CommCare - Training Participants
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Participant Job
          //Coffee :: PR 2022 | SalesForce --> CommCare | Training Participants
          //{"jobType":"Participant","source":"SF","uniqueProjectKey":"coffe_puerto_rico_2022"}

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/1768D5C8-3EE4-4D7B-AE17-FE0AC9A0E60D",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_pr_2022_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_pr_2022_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---PR-2022---SalesForce----CommCare---Training-Participants:
        source_trigger: webhook
        target_job: Coffee---PR-2022---SalesForce----CommCare---Training-Participants
        condition_type: js_expression
        condition_label: Coffee PR 2022 SalesForce CommCare Training Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_puerto_rico_2022"
        enabled: true
  Coffee---ZW-C3---C2021---SalesForce----CommCare---Training-Sessions:
    name: Coffee - ZW C3 - C2021 - SalesForce -- CommCare - Training Sessions
    jobs:
      Coffee---ZW-C3---C2021---SalesForce----CommCare---Training-Sessions:
        name: Coffee - ZW C3 - C2021 - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW C3 - C2021 | SalesForce --> CommCare | Training Sessions
          //{"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_zw_c21_agronomy"}


          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_zw_c21_ag_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_zw_c21_ag_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-C3---C2021---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Coffee---ZW-C3---C2021---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee ZW C3 C2021 SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zw_c21_ag"
        enabled: true
  Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Groups:
    name: Production - Coffee BDI TNS 2024C - SalesForce -- CommCare - Training
      Groups
    jobs:
      Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Groups:
        name: Production - Coffee BDI TNS 2024C - SalesForce -- CommCare - Training
          Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.

          // Job for Coffee Burundi USDA 2024C TNS
          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_bdi_tns_2024c_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_bdi_tns_2024c_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee BDI TNS 2024C SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_bdi_tns_2024c"
        enabled: true
  Production---Coffee-DRC---CommCare----SalesForce---Training-Observations:
    name: Production - Coffee DRC - CommCare -- SalesForce - Training Observations
    jobs:
      Production---Coffee-DRC---CommCare----SalesForce---Training-Observations:
        name: Production - Coffee DRC - CommCare -- SalesForce - Training Observations
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |+
          //Training Observations
          //Production - Coffee DRC | CommCare --> SalesForce | Training Observations

          each(
            "$.data",
            upsert("Observation__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.Observer")),
                field("Trainer__c", dataValue("form.trainer_salesforce_id")),
                field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
                field("Training_Session__c", dataValue("form.selected_session")),
                field("RecordTypeId", dataValue("form.Record_Type")),
                field("Date__c", dataValue("form.Date")),
                field("Observation_Type__c", dataValue("form.type_of_training_observation")),
                
                field("Male_Participants__c", function(state){
                  return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
                }),
                field("Female_Participants__c", function(state){
                  return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
                }),
                field("Number_of_Participants__c", function(state){
                  return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
                }),
                
                field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
                field("Shared_Action_Plan_Comments__c", function(state){
                  if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
                    return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
                  } else {
                    return '';
                  }
                }),
                field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
                field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
                
                field("Photo_of_Facilitator_URL__c", function(state) {
                  var photoUrl = '';
                  if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
                    photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
                  }
                  return photoUrl;
                }),
                field("Farmer_Trainer_Signature__c", function(state) {
                  var trainerSignatureUrl = '';
                  if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
                    trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
                  }
                  return trainerSignatureUrl;
                }),
                field("Observer_Signature__c", function(state) {
                  var observerSignatureUrl = '';
                  if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
                    observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
                  }
                  return observerSignatureUrl;
                }),
                
                field("Observation_Location__Latitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[0]; 
                  }
                }),
                field("Observation_Location__Longitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[1]; 
                  }
                }),
                field("Altitude__c", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[2]; 
                  }
                })
                
                
              )
            )),

          //CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
            
          each(
            "$.data",
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_prepare_and_implement_agronomy_practice-p1";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_prepare_and_implement_agronomy_practice"),
              field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
              field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_prepare_and_implement_agronomy_practice-p2";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_prepare_and_implement_agronomy_practice"),
              field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
              field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_prepare_and_implement_agronomy_practice-p3";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_prepare_and_implement_agronomy_practice"),
              field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
              field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
              ))),

          //CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_teaching_clarity_and_effectiveness-p1";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_teaching_clarity_and_effectiveness"),
              field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
              field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_teaching_clarity_and_effectiveness-p2";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_teaching_clarity_and_effectiveness"),
              field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
              field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_teaching_clarity_and_effectiveness-p3";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_teaching_clarity_and_effectiveness"),
              field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
              field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
              ))),

          //CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_knowledge_of_trainer_on_agronomy-p1";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_knowledge_of_trainer_on_agronomy"),
              field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
              field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_knowledge_of_trainer_on_agronomy-p2";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_knowledge_of_trainer_on_agronomy"),
              field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
              field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
              ))),

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_knowledge_of_trainer_on_agronomy-p3";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe6AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_knowledge_of_trainer_on_agronomy"),
              field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
              field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
              field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
              ))),

          //CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          each(
            "$.data",
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_shows_professionalism";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_shows_professionalism"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_is_prepared_and_organized";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_is_prepared_and_organized"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
            ))),

          each(
            "$.data",   
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_engages_participants";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_engages_participants"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_facilitates_openings_and_closings";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_facilitates_openings_and_closings"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_leads_activities";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_leads_activities"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_leads_discussions";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_leads_discussions"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_follows_lesson_plans";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_follows_lesson_plans"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
            ))),

          each(
            "$.data",  
            upsert("Observation_Result__c",  "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc_manages_time";
              }),
              relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
                return state.references[state.references.length-1].id;
              }),*/
              field("RecordTypeId", "01224000000gQe7AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_manages_time"),
              field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
              field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
            )));
            
            // Version control
            
    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-DRC---CommCare----SalesForce---Training-Observations:
        source_trigger: webhook
        target_job: Production---Coffee-DRC---CommCare----SalesForce---Training-Observations
        condition_type: js_expression
        condition_label: Production Coffee DRC CommCare SalesForce Training Observations
        condition_expression: |
          state.data.form["survey_type"] == "Training Observation" && state.data["app_id"] == "eeddc901b4aa4652b7252240152b20d5"
        enabled: true
  Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Project-Roles:
    name: Coffee - BDI Kahawatu 2024C - SalesForce -- CommCare - Project Roles
    jobs:
      Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Project-Roles:
        name: Coffee - BDI Kahawatu 2024C - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Project Roles
          //Coffee :: Burundi 2024C | SalesForce --> CommCare | Project Roles
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_bdi_kahawatu_2024c"}

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Staff",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_bdi_kahawatu_2024c_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "mjuma",
                    "n1:userID": "f1ffc61aa02f30f7c078ddc5a95f48a9"
                  };
                })
              )
            )
          );// Your job goes here.

          // Github test comment

          // Another comment

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee BDI Kahawatu 2024C SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_bdi_kahawatu_2024c"
        enabled: true
  Production---Training-Sessions---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
    name: Production - Training Sessions - ET Regrow YG -Ag- C2023 - SalesForce --
      CommCare
    jobs:
      Production---Training-Sessions---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
        name: Production - Training Sessions - ET Regrow YG -Ag- C2023 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@v1.5.1'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee ET - Regrow Yirga Agronomy C2023
          // DATA FLOW :: SalesForce --> TO --> CommCare
          // TARGET APPS :: // JOB PURPOSE :: Coffee - ET Regrow Yirga (Ag) C2023
          // JOB NAME :: Production | Training Sessions - ET Regrow YG (Ag) C2023 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c2"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_et_regrow_ag_c2_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_et_regrow_ag_c2_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Sessions---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Sessions---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Sessions Regrow Yirga C2023 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c2"
        enabled: true
  DRC-2021-Ag---C1---Salesforce----CommCare---Project-Roles:
    name: DRC 2021 Ag - C1 - Salesforce -- CommCare - Project Roles
    jobs:
      DRC-2021-Ag---C1---Salesforce----CommCare---Project-Roles:
        name: DRC 2021 Ag - C1 - Salesforce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //DRC 2021 Ag :: C1 | Salesforce --> CommCare | Project Roles
          //coffee_drc_2021_agronomy_cohort_1
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_drc_2021_agronomy_cohort_1"}

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_2021_ag_c1_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->DRC-2021-Ag---C1---Salesforce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: DRC-2021-Ag---C1---Salesforce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Production Coffee DRC SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ca_svc"
        enabled: true
  Global---Participants---SalesForce----CommCare:
    name: Global - Participants - SalesForce -- CommCare
    jobs:
      Global---Participants---SalesForce----CommCare:
        name: Global - Participants - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee - ET HWG JCP C2023
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET HWG JCP C2023
          // JOB NAME :: Production | Participants - ET HWG JCP C2023 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_c2023"}
          // AUTHOR :: Yves Mugenga | ymugenga@tns.org

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "the_avengers_initiative_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "the_avengers_initiative_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Global---Participants---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Global---Participants---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Global Participants SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "the_avengers_initiative"
        enabled: true
  Coffee---ZW-Nespresso--Ag----c2---CommCare----SalesForce--Training-Attendance:
    name: Coffee - ZW Nespresso -Ag- - c2 - CommCare -- SalesForce -Training
      Attendance
    jobs:
      Coffee---ZW-Nespresso--Ag----c2---CommCare----SalesForce--Training-Attendance:
        name: Coffee - ZW Nespresso -Ag- - c2 - CommCare -- SalesForce -Training
          Attendance
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Coffee - ZW Nespresso (Ag) - c2 | CommCare --> SalesForce | Training Attendance
          //{"app_id":"c14d231df6e142deb9bdd44319287437","form":{"survey_type":"Training Attendance"}}

          //ATTENDANCE REGISTRATION JOB {COMMCARE TO SALESFORCE}
          each(
            "$.data",
            upsert("Training_Session__c", "CommCare_Case_Id__c",
              fields(
                field("CommCare_Case_Id__c", dataValue("form.training_session")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Number_in_Attendance__c", dataValue("form.attendance_count")),
                field("Session_Photo_URL__c", function(state) {
                    var photoUrl = '';
                    if(dataValue("form.photo")(state) !== undefined && dataValue("form.photo")(state) !== '') {
                      photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);  
                    }
                    return photoUrl;
                }),
                field("Date__c", dataValue("form.date")),
                field('Location_GPS__Latitude__s', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[0];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                }),
                field('Location_GPS__Longitude__s', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                }),
                field('Altitude__c', (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return '';
                })
                )
              )
            );

          beta.each(
            function(state) {
              if (state.data.form.present_participants) {
                return state.data.form.present_participants.split(" ").map(
                  function(pId) {
                    return {
                      participant: pId,
                      session: dataValue("form.training_session")(state),
                      submission: dataValue("form.training_session")(state)+pId,
                      sessionPhoto: dataValue("form.photo")(state)
                    };
                  }
                );
              }
            },
            upsert("Attendance__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("submission")),
                field("Status__c", "Present"),
                relationship("Training_Session__r", "CommCare_Case_Id__c", dataValue("session")),
                relationship("Participant__r", "CommCare_Case_Id__c", dataValue("participant"))
              )
            )
          );
          each(
            "$.data",
            upsert("Training_Session__c", "CommCare_Case_Id__c",
              fields(
                field("CommCare_Case_Id__c", dataValue("form.training_session")),
                field("Updated_from_CommCare__c", true)
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-Nespresso--Ag----c2---CommCare----SalesForce--Training-Attendance:
        source_trigger: webhook
        target_job: Coffee---ZW-Nespresso--Ag----c2---CommCare----SalesForce--Training-Attendance
        condition_type: js_expression
        condition_label: Coffee ZW Nespresso Ag c2 CommCare SalesForce Training Attendance
        condition_expression: |
          state.data.form["survey_type"] == "Training Attendance" && state.data["app_id"] == "c14d231df6e142deb9bdd44319287437"
        enabled: true
  Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Sessions:
    name: Coffee - ZW IFC 2024C - SalesForce -- CommCare - Training Sessions
    jobs:
      Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Sessions:
        name: Coffee - ZW IFC 2024C - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.
          each(
              "$.data.trainingSessions[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Session",
                      "uiVersion": "1",
                      "version": "148",
                      "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Session_1_Date", dataValue("sessionOneDate")),
                  field("Session_2_Date", dataValue("sessionTwoDate")),
                  field("Training_Group_Name", dataValue("trainingGroupName")),
                  field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                  field("Module_Name", dataValue("trainingModuleName")),
                  field("Module_Number", dataValue("trainingModuleNumber")),
                  field("Current_Previous_Name", function(state){
                    return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                  }),
                  field("Training_Session_Name", function(state) {
                    return (
                      dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                    );
                  }),
                  field("Current_Previous", dataValue("currentPrevious")),
                  field("Case_Id", dataValue("sessionId")),
                  field("Parent_Id", dataValue("trainingGroupCommCareId")),
                  field("subcase_0", function(state) {
                    return {
                      "n0:case": {
                        "@": {
                          "case_id": dataValue("sessionId")(state),
                          "date_modified": new Date().toISOString(),
                          "user_id": "e926526fc13b126fffdb6d001f25b269",
                          "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                        },
                        "n0:create": {
                          "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                          "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                          "n0:case_type": "coffee_zw_2024c_training_session"
                        },
                        "n0:update": {
                          "n0:Case_Id": dataValue("sessionId")(state),
                          "n0:Date": new Date().toISOString(),
                          "n0:Module_Name": dataValue("trainingModuleName")(state),
                          "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                          "n0:Current_Previous": dataValue("currentPrevious")(state),
                          "n0:Current_Previous_Name": function(){
                            return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                          },
                          "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                          "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                          "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                          "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                          "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                        },
                        "n0:index":  {
                          "n0:parent" : {
                            "@": {
                              "case_type": "coffee_zw_2024c_training_group"
                            },
                            "#": dataValue("trainingGroupCommCareId")(state)
                          }
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "867066029216796",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee ZW IFC 2024C SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zw_2024c"
        enabled: true
  Production---Coffee-KE-2024AC---SalesForce----CommCare---Training-Groups:
    name: Production - Coffee KE 2024AC - SalesForce -- CommCare - Training Groups
    jobs:
      Production---Coffee-KE-2024AC---SalesForce----CommCare---Training-Groups:
        name: Production - Coffee KE 2024AC - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |
          // Your job goes here.
          each(
              "$.data.trainingGroups[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Group",
                      "uiVersion": "1",
                      "version": "1",
                      "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Name", dataValue("trainingGroupName")),
                  field("FFG_Number", dataValue("tnsId")),
                  field("Location", dataValue("locationName")),
                  field("Measurement_Group", dataValue("measurementGroup")),
                  field("Cooperative_ID", dataValue("cooperative")),
                  field("Household_Counter", dataValue("householdCounter")),
                  field("Name_Id_Concat", function(state) {
                    return (
                      //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                      dataValue("trainingGroupName")(state)
                    );
                  }),
                  field("Parent_Id", dataValue("staffId")),
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("trainingGroupId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingGroupName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2024ac_training_group"
                      },
                      "n0:update": {
                        "n0:Location": dataValue("locationName")(state),
                        "n0:Market": dataValue("market")(state),
                        "n0:Household_Counter": dataValue("householdCounter")(state),
                        "n0:Name_Id_Concat": function(){
                          //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                          var name = dataValue("trainingGroupName")(state);
                          return name;
                        },
                        "n0:Parent_Id": dataValue("staffId")(state),
                        "n0:FFG_Number": dataValue("tnsId")(state),
                        "n0:Measurement_Group": dataValue("measurementGroup")(state),
                        "n0:Cooperative_ID": dataValue("cooperative")(state)
                      },
                      "n0:index": {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_ke_2024ac_staff"
                          },
                          "#": dataValue("staffId")(state)
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("trainingGroupId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "PIMA API",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024AC---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024AC---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee KE 2024AC SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024ac"
        enabled: true
  Production---Training-Groups---ET-Regrow-YG--Ag-C2024---SalesForce----CommCare:
    name: Production - Training Groups - ET Regrow YG -Ag C2024 - SalesForce --
      CommCare
    jobs:
      Production---Training-Groups---ET-Regrow-YG--Ag-C2024---SalesForce----CommCare:
        name: Production - Training Groups - ET Regrow YG -Ag C2024 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee ET - Regrow Yirga Agronomy C2024
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET Regrow Yirga (Ag) C2024
          // JOB NAME :: Production | Training Groups - ET Regrow YG (Ag) C2024 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c3"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_regrow_ag_c3_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_regrow_ag_c3_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Groups---ET-Regrow-YG--Ag-C2024---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Groups---ET-Regrow-YG--Ag-C2024---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Groups Regrow Yirga C2024 Salesforce CommCare
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c3"
        enabled: true
  Production---Coffee-KE-Nespresso-2024AC---CommCare----SalesForce---Demo-Plot-Observations:
    name: Production - Coffee KE Nespresso 2024AC - CommCare -- SalesForce - Demo
      Plot Observations
    jobs:
      Production---Coffee-KE-Nespresso-2024AC---CommCare----SalesForce---Demo-Plot-Observations:
        name: Production - Coffee KE Nespresso 2024AC - CommCare -- SalesForce - Demo
          Plot Observations
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //Demo Plot Observations
          //Production - Coffee KE Nespresso 2024AC | Demo Plot Observations | CommCare --> SalesForce

          each(
            "$.data",
            upsert(
              "Observation__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function (state) {
                  var demoPlotPhotoUrl = "";
                  if (
                    dataValue("form.Demo_Plot_Photo")(state) !== undefined &&
                    dataValue("form.Demo_Plot_Photo")(state) !== ""
                  ) {
                    demoPlotPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.Demo_Plot_Photo")(state);
                  }
                  return demoPlotPhotoUrl;
                }),

                field("Observer_Signature__c", function (state) {
                  var observerSignatureUrl = "";
                  if (
                    dataValue("form.agronomy_advisor_signature")(state) !== undefined &&
                    dataValue("form.agronomy_advisor_signature")(state) !== ""
                  ) {
                    observerSignatureUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.agronomy_advisor_signature")(state);
                  }
                  return observerSignatureUrl;
                }),

                field("Observation_Location__Latitude__s", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[0];
                  }
                }),
                field("Observation_Location__Longitude__s", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[1];
                  }
                }),
                field("Altitude__c", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[2];
                  }
                })
              )
            )
          );

          // Pruning data handler
          beta.each(
            function (state) {
              //incoming pruning data
              var pruning_data = dataValue(
                "form.best_practice_questions.pruning.pruning_methods"
              )(state);

              if (pruning_data !== undefined) {
                return pruning_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    dpo_submission: dataValue("id")(state) + "coffee_global__pruning" + resultId,
                  };
                });
              }
            },
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("dpo_submission")),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__pruning"
                ),
                field("Result__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Centers opened";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Unwanted suckers removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "Dead branches removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "4"
                  ) {
                    returnResults = "Branches touching the ground removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "5"
                  ) {
                    returnResults = "Broken/unproductive stems and/or branches removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "No pruning methods used";
                  }

                  return returnResults;
                })
              )
            )
          );

          // //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS

          // // Create results for Pruning
          // beta.each(
          //   //"$.data",
          //   function (state) {
          //     var pruningData = dataValue(
          //       "form.best_practice_questions.pruning.pruning_methods"
          //     )(state);
          //     if (pruningData !== undefined) {
          //       return pruningData.split(" ").map(function (resultId) {
          //         return {
          //         result_data: resultId,
          //         };
          //         console.log(resultId);
          //       });
          //     }
          //   },
          //   upsert(
          //     "Observation_Result__c",
          //     "Submission_ID__c",
          //     fields(
          //       field("Submission_ID__c", function (state) {
          //         return dataValue("id")(state) + "coffee_global__pruning";
          //       }),
          //       field("Observation__c", function (state) {
          //         return state.references[state.references.length - 1].id;
          //       }),
          //       field("RecordTypeId", "01224000000gQe5AAE"),
          //       relationship(
          //         "Observation_Criterion__r",
          //         "Unique_Name__c",
          //         "coffee_global__pruning"
          //       ),
          //       field("Result__c", function (state) {
          //         var returnPruning = "";

          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "1"
          //         ) {
          //           returnPruning = "Centers opened";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "2"
          //         ) {
          //           returnPruning = "Unwanted suckers removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "3"
          //         ) {
          //           returnPruning = "Dead branches removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "4"
          //         ) {
          //           returnPruning = "Branches touching the ground removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "5"
          //         ) {
          //           returnPruning = "Broken/unproductive stems and/or branches removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "0"
          //         ) {
          //           returnPruning = "No pruning methods used";
          //         }
          //         return returnPruning;
          //       })
          //     )
          //   )
          // ),

          // Create results for Compost Heap
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__compost_heap";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__compost_heap"
                ),
                field("Result__c", function (state) {
                  var returnCompost = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) !== undefined
                  ) {
                    returnCompost = "Yes, compost or manure heap seen";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) !== undefined
                  ) {
                    returnCompost = "No compost or manure heap seen";
                  }
                  return returnCompost;
                }),
                field("Compost_Photo__c", function (state) {
                  var compostPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.compost_heap_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.compost_heap_photo"
                    )(state) !== ""
                  ) {
                    compostPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.compost_heap.compost_heap_photo"
                      )(state);
                  }
                  return compostPhotoUrl;
                })
              )
            )
          );

          // Create results for Weed Management
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__weed_management";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__weed_management"
                ),

                //Q1
                field("Result__c", function (state) {
                  var returnWeeds = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) !== undefined
                  ) {
                    returnWeeds = "Yes, field dug";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) !== undefined
                  ) {
                    returnWeeds = "No sign of digging";
                  }
                  return returnWeeds;
                }),

                //Q2
                field("Result_Text__c", function (state) {
                  var returnWeeds2 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "No weeds under the tree canopy";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "Few weeds under the tree canopy";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "2" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "Many weeds under the tree canopy";
                  }

                  return returnWeeds2;
                }),

                //Q3
                field("Result_Text_Two__c", function (state) {
                  var returnWeeds3 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) == "1"
                  ) {
                    returnWeeds3 =
                      "Weeds are less than 30cm tall or 30cm spread for grasses";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) == "2"
                  ) {
                    returnWeeds3 =
                      "Weeds are more than 30cm tall or 30cm spread for grasses";
                  }
                  return returnWeeds3;
                }),

                field("Weed_Management_Photo__c", function (state) {
                  var weedsPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.weed_management_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.weed_management_photo"
                    )(state) !== ""
                  ) {
                    weedsPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.weed_management.weed_management_photo"
                      )(state);
                  }
                  return weedsPhotoUrl;
                })
              )
            )
          );

          // Create results for Shade Management
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__shade_management";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__shade_management"
                ),
                field("Result__c", function (state) {
                  var returnShade = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "0"
                  ) {
                    returnShade = "NO shade, less than 5%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "1"
                  ) {
                    returnShade = "Light shade, 5 to 20%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "2"
                  ) {
                    returnShade = "Medium shade, 20 to 40%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "3"
                  ) {
                    returnShade = "Heavy shade, over 40%";
                  }
                  return returnShade;
                }),
                field("Shade_Management_Photo__c", function (state) {
                  var shadePhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.shade_management_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.shade_management_photo"
                    )(state) !== ""
                  ) {
                    shadePhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.shade_management.shade_management_photo"
                      )(state);
                  }
                  return shadePhotoUrl;
                })
              )
            )
          );

          // Create results for Mulch
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__mulch";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__mulch"
                ),
                field("Result__c", function (state) {
                  var returnMulch = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) == "1"
                  ) {
                    returnMulch = "Yes, Some mulch seen";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) == "0"
                  ) {
                    returnMulch = "No mulch seen";
                  }
                  return returnMulch;
                }),
                field("Result_Text__c", function (state) {
                  var returnMulch2 = "";
                  if (
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) == "1"
                  ) {
                    returnMulch2 = "Soil can be seen clearly, less than 2cm of mulch";
                  } else if (
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) == "2"
                  ) {
                    returnMulch2 = "Soil can not be seen, more than 2cm of mulch";
                  }
                  return returnMulch2;
                })
              )
            )
          );

          // Create results for Vetiver Planted
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__vetiver_planted";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__vetiver_planted"
                ),
                field("Result__c", function (state) {
                  var returnVetiver = "";
                  if (
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) == "1"
                  ) {
                    returnVetiver = "Yes. Row of vetiver planted";
                  } else if (
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) == "0"
                  ) {
                    returnVetiver = "No. Vetiver not planted";
                  }
                  return returnVetiver;
                })
              )
            )
          );

          // Create results for Rejuvenation
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__rejuvenation";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__rejuvenation"
                ),
                field("Result__c", function (state) {
                  var returnRejuventation = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) == 1
                  ) {
                    returnRejuventation = "Yes. There is a rejuvenated plot";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) == 0
                  ) {
                    returnRejuventation = "No rejuvenated plot";
                  }
                  return returnRejuventation;
                }),
                field("Result_Text__c", function (state) {
                  var returnRejuventation2 = "";
                  if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) == 1
                  ) {
                    returnRejuventation2 = "Yes. Sucker selection is complete";
                  } else if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) == 0
                  ) {
                    returnRejuventation2 = "No. Sucker selection has not been done";
                  }
                  return returnRejuventation2;
                }),

                field("Rejuvenation_Photo__c", function (state) {
                  var RejuvenationPhotoUrl = "";
                  if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_photo")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_photo")(
                      state
                    ) !== ""
                  ) {
                    RejuvenationPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.rejuvenation.suckers_photo"
                      )(state);
                  }
                  return RejuvenationPhotoUrl;
                })
              )
            )
          );

          // Create results for Sucker Selection
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", function(state) {
                  return dataValue("id")(state) + "coffee_global__sucker_selection_taken_place";
                }),
                field("Observation__c",function(state){
                  return state.references[state.references.length-1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__sucker_selection_taken_place"),
                field("Result__c", function (state) {
                    var sucker_selection = "";
                    if (
                      dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                        state
                      ) !== undefined &&
                      dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                        state
                      ) == 1
                    ) {
                      sucker_selection = "Yes. Sucker selection is complete";
                    } else if (
                      dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                        state
                      ) !== undefined &&
                      dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                        state
                      ) == 0
                    ) {
                      sucker_selection = "No. Sucker selection has not been done";
                    }
                    return sucker_selection;
                  }
                ),
                field("Result_number__c","2")
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-Nespresso-2024AC---CommCare----SalesForce---Demo-Plot-Observations:
        source_trigger: webhook
        target_job: Production---Coffee-KE-Nespresso-2024AC---CommCare----SalesForce---Demo-Plot-Observations
        condition_type: js_expression
        condition_label: Coffee KE 2024AC CommCare SalesForce Demo Plot Observations
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "30cee26f064e403388e334ae7b0c403b"
        enabled: true
  Coffee---ZW-C3---C2021---SalesForce----CommCare---Project-Roles:
    name: Coffee - ZW C3 - C2021 - SalesForce -- CommCare - Project Roles
    jobs:
      Coffee---ZW-C3---C2021---SalesForce----CommCare---Project-Roles:
        name: Coffee - ZW C3 - C2021 - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW C3 - C2021 | SalesForce --> CommCare | Project Roles
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_zw_c21_agronomy"}


          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("FFGs_Observed", null),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zw_c21_ag_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state),
                      "n0:FFGs_Observed": null
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-C3---C2021---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Coffee---ZW-C3---C2021---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee ZW C3 C2021 SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zw_c21_ag"
        enabled: true
  Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Sessions:
    name: Coffee - BDI Kahawatu 2024C - SalesForce -- CommCare - Training Sessions
    jobs:
      Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Sessions:
        name: Coffee - BDI Kahawatu 2024C - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.
          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_bdi_kahawatu_2024c_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_bdi_kahawatu_2024c_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee BDI Kahawatu 2024C SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_bdi_kahawatu_2024c"
        enabled: true
  Production---Farm-Visit----ET-All---CommCare----Salesforce:
    name: Production - Farm Visit -- ET All - CommCare -- Salesforce
    jobs:
      Production---Farm-Visit----ET-All---CommCare----Salesforce:
        name: Production - Farm Visit -- ET All - CommCare -- Salesforce
        adaptor: '@openfn/language-salesforce@4.6.11'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //insert the farm visit record - FT Level
          each(
            "$.data",
            upsertIf(
              state.data.form['@name'] == 'Farm Visit Full',
              "Farm_Visit__c",
              "FV_Submission_ID__c",
              fields(
                field("Name__c", "FV-" + dataValue("id")(state)),
                field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                field("Training_Group__c", dataValue("form.case.@case_id")),
                field("Farm_Visited__c", dataValue("form.farm_being_visted")),
                field("Primary_Farmer_PIMA_ID__c", dataValue("form.farm_being_visted")),
                field("Secondary_Farmer__c", function (state) {
                  var secondaryFarmer = "";
                  if (
                    dataValue("form.secondary_farmer_available")(state) == "yes" &&
                    dataValue("form.secondary_farmer")(state) !== ""
                  ) {
                    secondaryFarmer = dataValue("form.secondary_farmer");
                  }
                  return secondaryFarmer;
                }),
                field("Secondary_Farmer_PIMA_ID__c", function (state) {
                  var secondaryFarmer = "";
                  if (
                    dataValue("form.secondary_farmer_available")(state) == "yes" &&
                    dataValue("form.secondary_farmer")(state) !== ""
                  ) {
                    secondaryFarmer = dataValue("form.secondary_farmer");
                  }
                  return secondaryFarmer;
                }),
                field(
                  "Visit_Has_Training__c",
                  dataValue("form.is_this_a_farm_training_visit")
                ),
                field("Training_Session__c", dataValue("form.training_session")),
                field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                field("Date_Visited__c", dataValue("form.date_of_visit")),
                field("visit_comments__c", dataValue("form.farm_visit_comments")),
                field("Farmer_Trainer__c", dataValue("form.trainer")),
                field("Farm_Visit_Photo_Url__c", function (state) {
                  var farmVisitPhotoUrl = "";
                  if (
                    dataValue("form.farm_visit_photo")(state) !== undefined &&
                    dataValue("form.farm_visit_photo")(state) !== ""
                  ) {
                    farmVisitPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.farm_visit_photo")(state);
                  }
                  return farmVisitPhotoUrl;
                }),
                field("Signature__c", function (state) {
                  var recorderSignatureUrl = "";
                  if (
                    dataValue("form.signature_of_farmer_trainer")(state) !== undefined &&
                    dataValue("form.signature_of_farmer_trainer")(state) !== ""
                  ) {
                    recorderSignatureUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.signature_of_farmer_trainer")(state);
                  }
                  return recorderSignatureUrl;
                }),
                field("Location_GPS__Latitude__s", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.best_practice_questions.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[0];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("Location_GPS__Longitude__s", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.best_practice_questions.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("Altitude__c", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.best_practice_questions.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                })
              )
            )
          );

          //insert the farm visit record
          each(
            "$.data",
            upsertIf(
              state.data.form['@name'] == 'Farm Visit - AA',
              "Farm_Visit__c",
              "FV_Submission_ID__c",
              fields(
                field("Name__c", "FV-" + dataValue("id")(state)),
                field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                field("Training_Group__c", dataValue("form.training_group")),
                relationship("Farm_Visited__r", "CommCare_Case_Id__c", function(state){
                    const visitedFarmers = dataValue("form.farm_being_visted")(state);
                    if(visitedFarmers){
                      return visitedFarmers.split(" ")[0];
                    }
                  }),
                  field("Primary_Farmer_PIMA_ID__c", function(state){
                    const visitedFarmers = dataValue("form.farm_being_visted")(state);
                    if(visitedFarmers){
                      return visitedFarmers.split(" ")[0];
                    }
                  }),
                field(
                  "Visit_Has_Training__c",
                  dataValue("form.is_this_a_farm_training_visit")
                ),
                // relationship("Secondary_Farmer__r", "CommCare_Case_Id__c", function(state){
                //   const visitedFarmers = dataValue("form.farm_being_visted")(state);
                //   var result = null;
                //   if(visitedFarmers.length > 1){
                //     result = visitedFarmers.split(" ")[1];
                //   }
                //   return result;
                // }),
                
                // field("Secondary_Farmer_PIMA_ID__c", function(state){
                //   const visitedFarmers = dataValue("form.farm_being_visted")(state);
                //   var result = null;
                //   if(visitedFarmers.length > 1){
                //     result = visitedFarmers.split(" ")[1];
                //   }
                //   return result;
                // }),
                field("Training_Session__c", dataValue("form.training_session")),
                field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                field("Date_Visited__c", dataValue("form.date_of_visit")),
                field("visit_comments__c", dataValue("form.farm_visit_comments")),
                field("Farmer_Trainer__c", dataValue("form.trainer")),
                field("Farm_Visit_Photo_Url__c", function (state) {
                  var farmVisitPhotoUrl = "";
                  if (
                    dataValue("form.farm_visit_photo")(state) !== undefined &&
                    dataValue("form.farm_visit_photo")(state) !== ""
                  ) {
                    farmVisitPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.farm_visit_photo")(state);
                  }
                  return farmVisitPhotoUrl;
                }),
                field("Signature__c", function (state) {
                  var recorderSignatureUrl = "";
                  if (
                    dataValue("form.signature_of_farmer_trainer")(state) !== undefined &&
                    dataValue("form.signature_of_farmer_trainer")(state) !== ""
                  ) {
                    recorderSignatureUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.signature_of_farmer_trainer")(state);
                  }
                  return recorderSignatureUrl;
                }),
                field("Location_GPS__Latitude__s", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.best_practice_questions.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[0];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("Location_GPS__Longitude__s", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.best_practice_questions.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[1];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field("Altitude__c", (state) => {
                  // define this once, it's constant...
                  const coords = state.data.form.best_practice_questions.gps_coordinates;
                  // write your contional
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                  // the 'else' is unnecessary, return '' if there are no coords
                  return "";
                }),
                field('FV_AA_Farmer_1_Attended_Any_Training__c', function(state){
                  var result = '';
                  if(dataValue('form.farmer_1_questions.attended_training')(state) == 1){
                    result = 'Yes';
                  }
                  else if(dataValue('form.farmer_1_questions.attended_training')(state) == 0){
                    result = 'No';
                  }
                  return result;
                }),
                field('FV_AA_Farmer_2_Attended_Any_Training__c', function(state){
                  var result = '';
                  if(dataValue('form.farmer_2_questions.attended_training')(state) == 1){
                    result = 'Yes';
                  }
                  else if(dataValue('form.farmer_2_questions.attended_training')(state) == 0){
                    result = 'No';
                  }
                  return result;
                }),
                field('FV_AA_Farmer_1_Trainings_Attended__c', dataValue('form.farmer_1_questions.number_of_trainings')),
                field('FV_AA_Farmer_2_Trainings_Attended__c', dataValue('form.farmer_2_questions.number_of_trainings')),
                field('FV_AA_Visit_Done_By_AA__c', 'Yes')
              )
            )
          );
            
            // Update Household Record - FV AA
            each("$.data", 
              upsertIf(state.data.form['@name'] == 'Farm Visit - AA', 
                "Household__c", "Id",
                fields(
                  field("Id", state.data.form.case["@case_id"]),
                  field("FV_AA_Visited__c", dataValue("form.case.update.FV_AA_Visited")(state)),
                  relationship(
                    "Latest_Farm_Visit_Record__r",
                    "FV_Submission_ID__c",
                    "FV-" + dataValue("id")(state)
                    )
                  )
                )
            );
              
              // update FV with secondary Farmer
              each(
                "$.data",
                upsertIf(
                  state.data.form.count_selected_farmers === '2',
                  "Farm_Visit__c",
                  "FV_Submission_ID__c",
                  fields(
                    field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                    relationship("Secondary_Farmer__r", "CommCare_Case_Id__c", function(state){
                      const visitedFarmers = dataValue("form.farm_being_visted")(state);
                      var result = null;
                      if(visitedFarmers.length > 1){
                        result = visitedFarmers.split(" ")[1];
                      }
                      return result;
                    }),
                    
                    field("Secondary_Farmer_PIMA_ID__c", function(state){
                      const visitedFarmers = dataValue("form.farm_being_visted")(state);
                      var result = null;
                      if(visitedFarmers.length > 1){
                        result = visitedFarmers.split(" ")[1];
                      }
                      return result;
                    })
                    )
                  )
                );

          //Best Practices :: Main Stem && Weeding &&  Shade Control && Record Keeping && Compost && Erosion Control && Nutrition
          each(
            "$.data",
            upsert(
              "FV_Best_Practices__c",
              "FV_Submission_ID__c",
              fields(
                field("Name__c", "FV-" + dataValue("id")(state)),
                field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                relationship("Farm_Visit__r", "FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                // NUTRITION
                field("Color_of_coffee_tree_leaves__c", function (state) {
                  var colorOfCoffeeLeaves = dataValue(
                    "form.best_practice_questions.nutrition.are_the_leave_green_or_yellow_pale_green"
                  )(state);
                  var returnColorOfCoffeeLeaves = "";

                  if (
                    colorOfCoffeeLeaves !== undefined &&
                    colorOfCoffeeLeaves !== "" &&
                    colorOfCoffeeLeaves == 0
                  ) {
                    returnColorOfCoffeeLeaves =
                      "5% or more (5 or more in 100) of the leaves are yellow, pale green or brown.";
                  }

                  if (
                    colorOfCoffeeLeaves !== undefined &&
                    colorOfCoffeeLeaves !== "" &&
                    colorOfCoffeeLeaves == 1
                  ) {
                    returnColorOfCoffeeLeaves =
                      "Nearly all leaves are dark green and less than 5% (less than 5 in 100) are yellow, pale green, or brown.";
                  }

                  return returnColorOfCoffeeLeaves;
                }),

                // WEEDING
                // ##### LOOK: Has the coffee field been dug, including under the canopy?
                field("has_coffee_field_been_dug__c", function (state) {
                  var hasCoffeeBeenDug = dataValue(
                    "form.best_practice_questions.weeding.look_has_the_coffee_field_been_dug"
                  )(state);
                  var returnhasCoffeeBeenDug = "";

                  if (hasCoffeeBeenDug == 0) {
                    returnhasCoffeeBeenDug = "No";
                  }

                  if (hasCoffeeBeenDug == 1) {
                    returnhasCoffeeBeenDug = "Yes";
                  }

                  return returnhasCoffeeBeenDug;
                }),
                // ##### LOOK: How many weeds are ___under the tree canopy___ in ___most___ of the field, how big are the weeds?

                field("how_many_weeds_under_canopy_and_how_big__c", function (state) {
                  var weedsUnderCanopy = dataValue(
                    "form.best_practice_questions.weeding.how_many_weeds_under_canopy_and_how_big_are_they"
                  )(state);
                  var returnWeedsUnderCanopy = "";

                  if (weedsUnderCanopy == 1) {
                    returnWeedsUnderCanopy =
                      "Few small weeds (less than 30cm) under the tree canopy";
                  }

                  if (weedsUnderCanopy == 2) {
                    returnWeedsUnderCanopy =
                      "Many small weeds under the tree canopy (ground is covered with weeds)";
                  }

                  if (weedsUnderCanopy == 3) {
                    returnWeedsUnderCanopy =
                      "Many large weeds under the tree canopy (ground is covered with weeds)";
                  }

                  return returnWeedsUnderCanopy;
                }),

                // STUMPING
                field("stumping_method_on_majority_of_trees__c", function (state) {
                  var treeStumped = dataValue(
                    "form.best_practice_questions.stumping.stumping_methods_used_on_majority_of_trees"
                  )(state);
                  var returnIsTreeStumped = "";

                  if (treeStumped == 0) {
                    returnIsTreeStumped = "No";
                  }

                  if (treeStumped == 1) {
                    returnIsTreeStumped = "Yes";
                  }

                  return returnIsTreeStumped;
                }),

                field("year_stumping__c", function (state) {
                  var yearStumped = dataValue(
                    "form.best_practice_questions.stumping.year_stumping"
                  )(state);
                  var appId = dataValue("app_id")(state);
                  var returnYearStumped = "";

                  if (yearStumped !== undefined) {
                    var multipleOptions = yearStumped.split(" ");
                    // The first if statement is added for apps that use multiple selection
                    if (
                      (appId = "8f77f25440e5412ba0820a39271374f0") &&
                      multipleOptions.length > 1
                    ) {
                      if (multipleOptions.length == 2) {
                        returnYearStumped = "Two Stumping Periods";
                      }

                      if (multipleOptions.length == 3) {
                        returnYearStumped = "All Stumping Periods";
                      }
                    } // else for apps that still use single selection for this question
                    else {
                      // For HWG 2022C 0 means is for the year 2022
                      if (
                        yearStumped == 0 &&
                        (appId == "8f77f25440e5412ba0820a39271374f0" ||
                          appId == "e226fd89f1ff41debde611a81daa9970")
                      ) {
                        returnYearStumped =
                          "January to March 2022 just after the training started";
                      }

                      if (
                        yearStumped == 0 &&
                        (appId == "d63cdcf6b9d849548413ca356871cd3a" ||
                          appId == "e9fb922a1526447b9485b26c4a1b8eb5")
                      ) {
                        returnYearStumped =
                          "January to March 2023 just after the training started";
                      }

                      // For HWG 2022C 1 means is for the year 2023
                      if (
                        yearStumped == 1 &&
                        (appId == "8f77f25440e5412ba0820a39271374f0" ||
                          appId == "e226fd89f1ff41debde611a81daa9970")
                      ) {
                        returnYearStumped =
                          "January to March 2023 at the start of the second year of training.";
                      }

                      if (
                        yearStumped == 1 &&
                        (appId == "d63cdcf6b9d849548413ca356871cd3a" ||
                          appId == "e9fb922a1526447b9485b26c4a1b8eb5")
                      ) {
                        returnYearStumped =
                          "January to March 2024 at the start of the second year of training.";
                      }

                      // Stumping for year 3 ET HWG JCP 2022C FV
                      if (
                        yearStumped == 3 &&
                        appId == "8f77f25440e5412ba0820a39271374f0"
                      ) {
                        returnYearStumped =
                          "January to March 2024 at the start of the thrid year of training";
                      }

                      if(yearStumped == 1 && appId=="f079b0daae1d4d34a89e331dc5a72fbd"){
                        {
                        returnYearStumped =
                          "January to March 2025 at the start of the first year of training";
                      }
                      }

                      if (yearStumped == "both_periods") {
                        returnYearStumped = "Both Stumping Periods";
                      }
                    }
                  }

                  return returnYearStumped;
                }),

                field(
                  "number_of_trees_stumped__c",
                  dataValue("form.best_practice_questions.stumping.total_stumped_trees")
                ),

                field(
                  "main_stems_in_majority_coffee_trees__c",
                  dataValue(
                    "form.best_practice_questions.stumping.look_on_average_how_many_main_stems_are_on_the_stumped_trees_note_to_traine"
                  )
                ),

                //shade management
                field("level_of_shade_present_on_the_farm__c", function (state) {
                  var levelOfShadeOnPlot = dataValue(
                    "form.best_practice_questions.shade_control.level_of_shade_present_on_the_farm"
                  )(state);
                  var returnLevelOfShadeOnPlot = "";

                  if (levelOfShadeOnPlot == 0) {
                    returnLevelOfShadeOnPlot = "NO shade, less than 5%";
                  }

                  if (levelOfShadeOnPlot == 1) {
                    returnLevelOfShadeOnPlot = "Light shade, 5 to 20%";
                  }

                  if (levelOfShadeOnPlot == 2) {
                    returnLevelOfShadeOnPlot = "Medium shade, 20 to 40%";
                  }

                  if (levelOfShadeOnPlot == 3) {
                    returnLevelOfShadeOnPlot = "Heavy shade, over 40%";
                  }

                  return returnLevelOfShadeOnPlot;
                }),

                // Shade photo

                field("photo_of_level_of_shade_on_the_plot__c", function (state) {
                  var photoUrl = dataValue(
                    "form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot"
                  )(state);
                  var returnPhotoUrl = "";

                  if (photoUrl !== undefined && photoUrl !== "") {
                    returnPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      photoUrl;
                  }

                  return returnPhotoUrl;
                }),

                //compost manure
                field("do_you_have_compost_manure__c", function (state) {
                  var haveCompostManure = dataValue(
                    "form.best_practice_questions.compost.do_you_have_compost_manure"
                  )(state);
                  var returnHaveCompostManure = "";

                  if (
                    haveCompostManure !== undefined &&
                    haveCompostManure !== "" &&
                    haveCompostManure == 0
                  ) {
                    returnHaveCompostManure = "No";
                  }

                  if (
                    haveCompostManure !== undefined &&
                    haveCompostManure !== "" &&
                    haveCompostManure == 1
                  ) {
                    returnHaveCompostManure = "Yes";
                  }

                  return returnHaveCompostManure;
                }),

                // Photo of compost
                field("photo_of_the_compost_manure__c", function (state) {
                  var compostPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost.photo_of_the_compost_manure"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.compost.photo_of_the_compost_manure"
                    )(state) !== ""
                  ) {
                    compostPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.compost.photo_of_the_compost_manure"
                      )(state);
                  }

                  return compostPhotoUrl;
                }),

                //erosion control photo
                field("take_a_photo_of_erosion_control__c", function (state) {
                  var photoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.erosion_control.photo_of_erosion_control_method"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.erosion_control.photo_of_erosion_control_method"
                    )(state) !== ""
                  ) {
                    photoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.erosion_control.photo_of_erosion_control_method"
                      )(state);
                  }

                  return photoUrl;
                }),

                // Stumping Photo
                field("photos_of_stumped_coffee_trees__c", function (state) {
                  var photoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.stumping.photos_of_stumped_coffee_trees"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.stumping.photos_of_stumped_coffee_trees"
                    )(state) !== ""
                  ) {
                    photoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.stumping.photos_of_stumped_coffee_trees"
                      )(state);
                  }

                  return photoUrl;
                }),

                // Weeding Photo
                field("photo_of_weeds_under_the_canopy__c", function (state) {
                  var weedsPhotoUrl = dataValue(
                    "form.best_practice_questions.weeding.photo_of_weeds_under_the_canopy"
                  )(state);
                  var returnWeedsPhotoUrl = "";

                  if (weedsPhotoUrl !== undefined && weedsPhotoUrl !== "") {
                    returnWeedsPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      weedsPhotoUrl;
                  }

                  return returnWeedsPhotoUrl;
                }),

                //record keeping
                field("do_you_have_a_record_book__c", function (state) {
                  var haveRecordBook = dataValue(
                    "form.best_practice_questions.record_keeping.do_you_have_a_record_book"
                  )(state);
                  var returnHaveRecordBook = "";

                  if (haveRecordBook == 0) {
                    returnHaveRecordBook = "No";
                  }

                  if (haveRecordBook == 1) {
                    returnHaveRecordBook = "Yes";
                  }

                  return returnHaveRecordBook;
                }),

                field("are_there_records_on_the_record_book__c", function (state) {
                  var recordsOnRecordBook = dataValue(
                    "form.best_practice_questions.record_keeping.are_there_records_on_the_record_book"
                  )(state);
                  var returnRecordsOnRecordBook = "";

                  if (
                    recordsOnRecordBook !== undefined &&
                    recordsOnRecordBook !== "" &&
                    recordsOnRecordBook == 0
                  ) {
                    returnRecordsOnRecordBook = "No";
                  }

                  if (
                    recordsOnRecordBook !== undefined &&
                    recordsOnRecordBook !== "" &&
                    recordsOnRecordBook == 1
                  ) {
                    returnRecordsOnRecordBook = "Yes";
                  }

                  return returnRecordsOnRecordBook;
                }),

                field("take_a_photo_of_the_record_book__c", function (state) {
                  var recordBookPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book"
                    )(state) !== ""
                  ) {
                    recordBookPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                        dataValue("domain")(state) +
                        "/api/form/attachment/" +
                        dataValue("form.meta.instanceID")(state) +
                        "/" +
                        dataValue(
                          "form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book"
                        )(state) !==
                        undefined &&
                      dataValue(
                        "form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book"
                      )(state);
                  }

                  return recordBookPhotoUrl;
                }),

                // Beekeeping Questions
                field(
                  "do_you_keep_bees__c",
                  dataValue(
                    "form.question1.ask_do_you_keep_bees_if_yes_ask_can_you_show_me_were_you_keep_your_bees"
                  )
                ),

                field(
                  "number_of_bee_hives__c",
                  dataValue(
                    "form.question1.look_and_ask_how_many_hives_do_you_have_of_each_type"
                  )
                ),

                field(
                  "number_of_bee_hives_transitional__c",
                  dataValue(
                    "form.question1.look_and_ask_how_many_hives_do_you_have_of_each_type_transitional"
                  )
                ),

                field(
                  "number_of_bee_hives_traditional__c",
                  dataValue(
                    "form.question1.look_and_ask_how_many_hives_do_you_have_of_each_type_traditional"
                  )
                ),

                field("take_a_photo_showing_the_modern_hives__c", function (state) {
                  var hivePhotoUrl = dataValue(
                    "form.question1.take_a_photo_showing_the_modern_hives_note_to_trainer_dont_get_too_close_to"
                  )(state);
                  var returnHivePhotoUrl = "";

                  if (hivePhotoUrl !== undefined && hivePhotoUrl !== "") {
                    returnHivePhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      hivePhotoUrl;
                  }

                  return returnHivePhotoUrl;
                }),

                field("take_a_photo_of_the_transitional_hive__c", function (state) {
                  var hivePhotoUrl = dataValue(
                    "form.question1.take_a_photo_showing_the_transitional_hives__note_to_trainer_dont_get_too_c"
                  )(state);
                  var returnHivePhotoUrl = "";

                  if (hivePhotoUrl !== undefined && hivePhotoUrl !== "") {
                    returnHivePhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      hivePhotoUrl;
                  }

                  return returnHivePhotoUrl;
                }),

                field(
                  "how_many_years_have_you_been_beekeeping__c",
                  dataValue("form.question1.ask_how_many_years_have_you_been_beekeeping")
                ),

                field(
                  "did_you_start_beekeeping_before_feb_2023__c",
                  dataValue(
                    "form.question1.ask_did_you_start_beekeeping_before_february_2023"
                  )
                )
              )
            )
          );

          //Farm Visit Best Practice Results
          //loop through methods of erosion control and insert into database :: Erosion Control BP

          beta.each(
            function (state) {
              //incoming erosion data
              var best_practice_results_data = dataValue(
                "form.best_practice_questions.erosion_control.methods_of_erosion_control"
              )(state);

              if (best_practice_results_data !== undefined) {
                return best_practice_results_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    best_result_submission:
                      "FVBPN-" + dataValue("id")(state) + "_erosion_" + resultId,
                    farm_visit_submission: "FV-" + dataValue("id")(state),
                  };
                });
              }
            },
            upsert(
              "FV_Best_Practice_Results__c",
              "Best_Practice_Result_Submission_ID__c",
              fields(
                field(
                  "Best_Practice_Result_Submission_ID__c",
                  dataValue("best_result_submission")
                ), //best result submission ID
                relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                field("Best_Practice_Result_Type__c", "Erosion Control"), //this is the actual result type
                field("Best_Practice_Result_Description__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Grasses such as vetiver planted in rows";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Mulch";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "Water traps";
                  }

                  // if (
                  //   dataValue("result_data")(state) !== undefined &&
                  //   dataValue("result_data")(state) == "4"
                  // ) {
                  //   returnResults = "Physical barriers. (e.g. rocks)";
                  // }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "5"
                  ) {
                    returnResults = "Terraces";
                  }

                  // if (
                  //   dataValue("result_data")(state) !== undefined &&
                  //   dataValue("result_data")(state) == "6"
                  // ) {
                  //   returnResults = "Contour planting";
                  // }

                  // if (
                  //   dataValue("result_data")(state) !== undefined &&
                  //   dataValue("result_data")(state) == "7"
                  // ) {
                  //   returnResults = "Bean or Arachis cover crop between the rows";
                  // }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "No erosion control method seen";
                  }

                  return returnResults;
                })
              )
            )
          );

          //loop through chemical/fertilizier applied and insert into database :: Nutrition BP
          beta.each(
            function (state) {
              //incoming chemical/fertilizer used data
              var best_practice_results_data = dataValue(
                "form.best_practice_questions.nutrition.type_chemical_applied_on_coffee_last_12_months"
              )(state);

              if (best_practice_results_data !== undefined) {
                return best_practice_results_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    best_result_submission:
                      "FVBPN-" + dataValue("id")(state) + "_fertilizer_" + resultId,
                    farm_visit_submission: "FV-" + dataValue("id")(state),
                  };
                });
              }
            },
            upsert(
              "FV_Best_Practice_Results__c",
              "Best_Practice_Result_Submission_ID__c",
              fields(
                field(
                  "Best_Practice_Result_Submission_ID__c",
                  dataValue("best_result_submission")
                ), //best result submission ID
                relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                field(
                  "Best_Practice_Result_Type__c",
                  "Chemicals and Fertilizers Applied"
                ), //this is the actual result type
                field("Best_Practice_Result_Description__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Compost, homemade or pulp compost";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Manure";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "Did not apply any fertilizer in past 12 months";
                  }

                  return returnResults;
                })
              )
            )
          );

          //loop through methods of controlling coffee berry borer :: Integrated Pest and Disease Management BP
          beta.each(
            function (state) {
              //incoming coffee berry borer data
              var best_practice_results_data = dataValue(
                "form.best_practice_questions.pest_disease_management.methods_of_controlling_white_stem_borer"
              )(state);

              if (best_practice_results_data !== undefined) {
                return best_practice_results_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    best_result_submission:
                      "FVBPN-" + dataValue("id")(state) + "_cbb_" + resultId,
                    farm_visit_submission: "FV-" + dataValue("id")(state),
                  };
                });
              }
            },
            upsert(
              "FV_Best_Practice_Results__c",
              "Best_Practice_Result_Submission_ID__c",
              fields(
                field(
                  "Best_Practice_Result_Submission_ID__c",
                  dataValue("best_result_submission")
                ), //best result submission ID
                relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                field(
                  "Best_Practice_Result_Type__c",
                  "Management of Coffee Berry Borer (CBB)"
                ), //this is the actual result type
                field("Best_Practice_Result_Description__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Encourage natural predators and parasites";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults =
                      "Strip all berries at the end of the harvest or collect fallen berries";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "Harvest ripe cherries regularly";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "4"
                  ) {
                    returnResults = "Use berry borer traps";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "5"
                  ) {
                    returnResults = "Use compost or manure, to keep the tree healthy";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "6"
                  ) {
                    returnResults =
                      "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "7"
                  ) {
                    returnResults = "Stump old coffee";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "8"
                  ) {
                    returnResults = "Plant disease resistant varieties";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "9"
                  ) {
                    returnResults = "Prune to keep the canopy open";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "10"
                  ) {
                    returnResults = "Uproot wilt infected coffee trees and burn";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "11"
                  ) {
                    returnResults = "Smooth the bark at the base of the tree";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "Does not know any methods";
                  }

                  return returnResults;
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Production---Farm-Visit----ET-All---CommCare----Salesforce:
        source_trigger: webhook
        target_job: Production---Farm-Visit----ET-All---CommCare----Salesforce
        condition_type: js_expression
        condition_label: 'Production - Farm Visit ET All | CommCare Salesforce'
        condition_expression: |
          state.data.form["survey_type"] == "Farm Visit Full - ET"
        enabled: true
  "x-[archived]-The--Do-Nothing-Job------HortiMap-Domain---Impact-Team":
    name: 'x [archived] The -Do Nothing Job-  -  HortiMap Domain - Impact Team'
    jobs:
      The--Do-Nothing-Job-----HortiMap-Domain---Impact-Team:
        name: The -Do Nothing Job-  - HortiMap Domain - Impact Team
        adaptor: '@openfn/language-mysql@v1.4.7'
        credential: null
        body: |
          // Your job goes here.

          console.log("done");

          each("$.data", console.log("complete"));

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->The--Do-Nothing-Job-----HortiMap-Domain---Impact-Team:
        source_trigger: webhook
        target_job: The--Do-Nothing-Job-----HortiMap-Domain---Impact-Team
        condition_type: js_expression
        condition_label: 'The "Do Nothing Job"  | HortiMap Domain | Impact Team'
        condition_expression: |
          state.data.domain == "hortimap-uganda"
        enabled: true
  Production---Attendance-Full---CommCare-----Salesforce---Training-Attendance:
    name: Production - Attendance Full - CommCare --- Salesforce - Training
      Attendance
    jobs:
      Production---Attendance-Full---CommCare-----Salesforce---Training-Attendance:
        name: Production - Attendance Full - CommCare --- Salesforce - Training
          Attendance
        adaptor: '@openfn/language-salesforce@5.0.4'
        credential: null
        body: |
          //Coffee - ZW C2021 | Training Attendance | CommCare --> SalesForce

          //ATTENDANCE REGISTRATION JOB {COMMCARE TO SALESFORCE}
          each(
              "$.data",
              upsert("Training_Session__c", "CommCare_Case_Id__c",
                fields(
                  field("CommCare_Case_Id__c", dataValue("form.training_session")),
                  field("Trainer__c", dataValue("form.trainer")),
                  field("Number_in_Attendance__c", dataValue("form.attendance_count")),
                  field("Session_Photo_URL__c", function(state) {
                      var photoUrl = '';
                      if(dataValue("form.photo")(state) !== undefined && dataValue("form.photo")(state) !== '') {
                        photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);  
                      }
                      return photoUrl;
                  }),
                  field("Date__c", dataValue("form.date")),
                  field('Location_GPS__Latitude__s', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                    if (coords) {
                      return coords.split(" ")[0];
                    }
                    // the 'else' is unnecessary, return '' if there are no coords
                    return '';
                  }),
                  field('Location_GPS__Longitude__s', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                    if (coords) {
                      return coords.split(" ")[1];
                    }
                    // the 'else' is unnecessary, return '' if there are no coords
                    return '';
                  }),
                  field('Altitude__c', (state) => {
                    // define this once, it's constant...
                    const coords = state.data.form.gps_coordinates;
                    // write your contional
                    if (coords) {
                      return coords.split(" ")[2];
                    }
                    // the 'else' is unnecessary, return '' if there are no coords
                    return '';
                  })
                  )
                )
              );
            
            beta.each(
              function(state) {
                if (state.data.form.present_participants) {
                  return state.data.form.present_participants.split(" ").map(
                    function(pId) {
                      return {
                        participant: pId,
                        session: dataValue("form.training_session")(state),
                        submission: dataValue("form.training_session")(state)+pId,
                        sessionPhoto: dataValue("form.photo")(state)
                      };
                    }
                  );
                }
              },
              upsert("Attendance__c", "Submission_ID__c",
                fields(
                  field("Submission_ID__c", dataValue("submission")),
                  field("Status__c", "Present"),
                  relationship("Training_Session__r", "CommCare_Case_Id__c", dataValue("session")),
                  relationship("Participant__r", "CommCare_Case_Id__c", dataValue("participant"))
                )
              )
            );
            each(
              "$.data",
              upsert("Training_Session__c", "CommCare_Case_Id__c",
                fields(
                  field("CommCare_Case_Id__c", dataValue("form.training_session")),
                  field("Updated_from_CommCare__c", true)
                )
              )
            );
            
            //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Attendance-Full---CommCare-----Salesforce---Training-Attendance:
        source_trigger: webhook
        target_job: Production---Attendance-Full---CommCare-----Salesforce---Training-Attendance
        condition_type: js_expression
        condition_label: Production - Attendance Full - CommCare --> Salesforce -
          Training Attendance
        condition_expression: |
          state.data.form["survey_type"] == "Attendance Full"
        enabled: true
  Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Sessions:
    name: Coffee - ZW Nespresso -Ag- - c2 - SalesForce -- CommCare - Training
      Sessions
    jobs:
      Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Sessions:
        name: Coffee - ZW Nespresso -Ag- - c2 - SalesForce -- CommCare - Training
          Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW C1 - C2018 | SalesForce --> CommCare | Training Sessions
          //{"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_zim_c2_ag"}


          each(
              "$.data.trainingSessions[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Session",
                      "uiVersion": "1",
                      "version": "148",
                      "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Session_1_Date", dataValue("sessionOneDate")),
                  field("Session_2_Date", dataValue("sessionTwoDate")),
                  field("Training_Group_Name", dataValue("trainingGroupName")),
                  field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                  field("Module_Name", dataValue("trainingModuleName")),
                  field("Module_Number", dataValue("trainingModuleNumber")),
                  field("Current_Previous_Name", function(state){
                    return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                  }),
                  field("Training_Session_Name", function(state) {
                    return (
                      dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                    );
                  }),
                  field("Current_Previous", dataValue("currentPrevious")),
                  field("Case_Id", dataValue("sessionId")),
                  field("Parent_Id", dataValue("trainingGroupCommCareId")),
                  field("subcase_0", function(state) {
                    return {
                      "n0:case": {
                        "@": {
                          "case_id": dataValue("sessionId")(state),
                          "date_modified": new Date().toISOString(),
                          "user_id": "e926526fc13b126fffdb6d001f25b269",
                          "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                        },
                        "n0:create": {
                          "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                          "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                          "n0:case_type": "coffee_zim_c2_ag_training_session"
                        },
                        "n0:update": {
                          "n0:Case_Id": dataValue("sessionId")(state),
                          "n0:Date": new Date().toISOString(),
                          "n0:Module_Name": dataValue("trainingModuleName")(state),
                          "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                          "n0:Current_Previous": dataValue("currentPrevious")(state),
                          "n0:Current_Previous_Name": function(){
                            return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                          },
                          "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                          "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                          "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                          "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                          "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                        },
                        "n0:index":  {
                          "n0:parent" : {
                            "@": {
                              "case_type": "coffee_zim_c2_ag_training_group"
                            },
                            "#": dataValue("trainingGroupCommCareId")(state)
                          }
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "867066029216796",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee ZW Nespresso Ag c2 SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zim_c2_ag"
        enabled: true
  "x-[archived]-Production---Coffee-HWG-C2022---CommCare----SalesForce---Demo-Plot-Observations":
    name: 'x [archived] Production - Coffee HWG C2022 - CommCare -- SalesForce -
      Demo Plot Observations'
    jobs:
      Production---Coffee-HWG-C2022---CommCare----SalesForce---Demo-Plot-Observations:
        name: Production - Coffee HWG C2022 - CommCare -- SalesForce - Demo Plot
          Observations
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //Demo Plot Observations
          //Production - Coffee HWG C2022 | Demo Plot Observations | CommCare --> SalesForce


          each(
          "$.data",
            upsert("Observation__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function(state) {
                  var dempPlotPhotoUrl = '';
                  if(dataValue("form.Demo_Plot_Photo")(state) !== undefined && dataValue("form.Demo_Plot_Photo")(state) !== '') {
                    dempPlotPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Demo_Plot_Photo")(state);  
                  }
                  return dempPlotPhotoUrl;
                }),
                
                field("Observer_Signature__c", function(state) {
                  var observerSignatureUrl = '';
                  if(dataValue("form.agronomy_advisor_signature")(state) !== undefined && dataValue("form.agronomy_advisor_signature")(state) !== '') {
                    observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.agronomy_advisor_signature")(state);  
                  }
                  return observerSignatureUrl;
                }),
                
                field("Observation_Location__Latitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[0]; 
                  }
                }),
                field("Observation_Location__Longitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[1]; 
                  }
                }),
                field("Altitude__c", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[2]; 
                  }
                })
              )
            )
          ),

          //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS
          // Creates results for Stumped Trees


          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_hwg_2022__stumped_trees";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_hwg_2022__stumped_trees"),
              field("Result__c", dataValue("form.best_practice_questions.stumped.stumped_trees"))
            ))),

          // Create results for Sucker Selection
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_hwg_2022__sucker_selection_taken_place";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_hwg_2022__sucker_selection_taken_place"),
              field("Result__c", dataValue("form.best_practice_questions.sucker_selection.Sucker_Selection_Taken_Place")),
              field("Result_number__c", dataValue("form.best_practice_questions.sucker_selection.number_of_suckers"))
              
            ))),



          // Create results for Compost Heap
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_hwg_2022__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_hwg_2022__compost_heap"),
              field("Result__c", dataValue("form.best_practice_questions.compost_heap.present_compost_heap")),
              field("Compost_Photo__c", function(state) {
                  var compostPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== undefined && dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== '') {
                    compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state);  
                  }
                  return compostPhotoUrl;
                })
                
              
            ))),


          // Create results for Weed Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_hwg_2022__weed_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_hwg_2022__weed_management"),
              field("Result__c", dataValue("form.best_practice_questions.weed_management.has_the_demo_plot_been_dug")),
              field("Result_Text__c", dataValue("form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy")),
              field("Result_Text_Two__c", dataValue("form.best_practice_questions.weed_management.how_big_are_the_weeds")),
              field("Weed_Management_Photo__c", function(state) {
                  var weedsPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== '') {
                    weedsPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state);  
                  }
                  return weedsPhotoUrl;
                })
            ))),


          // Create results for Shade Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_hwg_2022__shade_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_hwg_2022__shade_management"),
              field("Result__c", dataValue("form.best_practice_questions.shade_management.level_of_shade_present")),
              field("Shade_Management_Photo__c", function(state) {
                  var shadePhotoUrl = '';
                  if(dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== '') {
                    shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state);  
                  }
                  return shadePhotoUrl;
                })
            ))),


          // Create results for Mulch
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_hwg_2022__mulch";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_hwg_2022__mulch"),
              field("Result__c", dataValue("form.best_practice_questions.mulch.mulch_under_the_canopy")),
              field("Result_Text__c", dataValue("form.best_practice_questions.mulch.thickness_of_mulch"))
            ))),


          // Create results for Vetiver Planted
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_hwg_2022__vetiver_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_hwg_2022__vetiver_planted"),
              field("Result__c", dataValue("form.best_practice_questions.vetiver.vetiver_planted"))
            )));

          /*
          // Create results for Shade_Trees_Planted {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__shade_trees_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__shade_trees_planted"),
              field("Result__c", dataValue("form.Shade_Trees_Planted"))
            ))),


          // Create results for Compost_Heap {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__compost_heap"),
              field("Result__c", dataValue("form.Compost_Heap")),
              field("Photo_URL__c", function(state) {
                  var compostHeapPhotoUrl = '';
                  if(dataValue("form.Photo_of_Compost_Heap")(state) !== undefined && dataValue("form.Photo_of_Compost_Heap")(state) !== '') {
                    compostHeapPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo_of_Compost_Heap")(state);  
                  }
                  return compostHeapPhotoUrl;
                })
            ))),


          // Create results for Vertiver_Grass_on_Demo_Plot {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__vertiver_grass_on_demo_plot";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__vertiver_grass_on_demo_plot"),
              field("Result__c", dataValue("form.Vertiver_Grass_on_Demo_Plot"))
            )));

          // Version control
          */

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-HWG-C2022---CommCare----SalesForce---Demo-Plot-Observations:
        source_trigger: webhook
        target_job: Production---Coffee-HWG-C2022---CommCare----SalesForce---Demo-Plot-Observations
        condition_type: js_expression
        condition_label: Coffee HWG C2022 Demo Plot Observations CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "8f77f25440e5412ba0820a39271374f0"
        enabled: true
  "x-[archived]-Coffee-DRC---GEF-Kalehe-2022---Project-Roles---Salesforce----CommCare":
    name: 'x [archived] Coffee DRC - GEF Kalehe 2022 - Project Roles - Salesforce --
      CommCare'
    jobs:
      Coffee-DRC---GEF-Kalehe-2022---Project-Roles---Salesforce----CommCare:
        name: Coffee DRC - GEF Kalehe 2022 - Project Roles - Salesforce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee DRC - GEF Kalehe 2022 | Project Roles | Salesforce --> CommCare
          //coffee_drc_gef_2022
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_drc_gef_2022"}

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_gef_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee-DRC---GEF-Kalehe-2022---Project-Roles---Salesforce----CommCare:
        source_trigger: webhook
        target_job: Coffee-DRC---GEF-Kalehe-2022---Project-Roles---Salesforce----CommCare
        condition_type: js_expression
        condition_label: Coffee DRC GEF Kalehe 2022 Project Roles Salesforce CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gef_2022"
        enabled: true
  Production---Coffee-Regrow-YG-Ag-C2024---Demo-Plot-Observations---CommCare----SalesForce:
    name: Production - Coffee Regrow YG Ag C2024 - Demo Plot Observations - CommCare
      -- SalesForce
    jobs:
      Production---Coffee-Regrow-YG-Ag-C2024---Demo-Plot-Observations---CommCare----SalesForce:
        name: Production - Coffee Regrow YG Ag C2024 - Demo Plot Observations - CommCare
          -- SalesForce
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //Demo Plot Observations
          //Production - Coffee Regrow Yirga Agronomy C2022 | Demo Plot Observations | CommCare --> SalesForce


          each(
          "$.data",
            upsert("Observation__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function(state) {
                  var dempPlotPhotoUrl = '';
                  if(dataValue("form.Demo_Plot_Photo")(state) !== undefined && dataValue("form.Demo_Plot_Photo")(state) !== '') {
                    dempPlotPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Demo_Plot_Photo")(state);  
                  }
                  return dempPlotPhotoUrl;
                }),
                
                field("Observer_Signature__c", function(state) {
                  var observerSignatureUrl = '';
                  if(dataValue("form.agronomy_advisor_signature")(state) !== undefined && dataValue("form.agronomy_advisor_signature")(state) !== '') {
                    observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.agronomy_advisor_signature")(state);  
                  }
                  return observerSignatureUrl;
                }),
                
                field("Observation_Location__Latitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[0]; 
                  }
                }),
                field("Observation_Location__Longitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[1]; 
                  }
                }),
                field("Altitude__c", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[2]; 
                  }
                })
              )
            )
          ),

          //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS
          // Creates results for Stumped Trees


          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__stumped_trees";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__stumped_trees"),
              field("Result__c", dataValue("form.best_practice_questions.stumped.stumped_trees"))
            ))),

          // Create results for Sucker Selection
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__sucker_selection_taken_place";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__sucker_selection_taken_place"),
              field("Result__c", dataValue("form.best_practice_questions.sucker_selection.Sucker_Selection_Taken_Place")),
              field("Result_number__c", dataValue("form.best_practice_questions.sucker_selection.number_of_suckers"))
              
            ))),



          // Create results for Compost Heap
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__compost_heap"),
              field("Result__c", dataValue("form.best_practice_questions.compost_heap.present_compost_heap")),
              field("Compost_Photo__c", function(state) {
                  var compostPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== undefined && dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== '') {
                    compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state);  
                  }
                  return compostPhotoUrl;
                })
                
              
            ))),


          // Create results for Weed Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__weed_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__weed_management"),
              field("Result__c", dataValue("form.best_practice_questions.weed_management.has_the_demo_plot_been_dug")),
              field("Result_Text__c", dataValue("form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy")),
              field("Result_Text_Two__c", dataValue("form.best_practice_questions.weed_management.how_big_are_the_weeds")),
              field("Weed_Management_Photo__c", function(state) {
                  var weedsPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== '') {
                    weedsPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state);  
                  }
                  return weedsPhotoUrl;
                })
            ))),


          // Create results for Shade Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__shade_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__shade_management"),
              field("Result__c", dataValue("form.best_practice_questions.shade_management.level_of_shade_present")),
              field("Shade_Management_Photo__c", function(state) {
                  var shadePhotoUrl = '';
                  if(dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== '') {
                    shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state);  
                  }
                  return shadePhotoUrl;
                })
            ))),


          // Create results for Mulch
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__mulch";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__mulch"),
              field("Result__c", dataValue("form.best_practice_questions.mulch.mulch_under_the_canopy")),
              field("Result_Text__c", dataValue("form.best_practice_questions.mulch.thickness_of_mulch"))
            ))),


          // Create results for Vetiver Planted
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__vetiver_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__vetiver_planted"),
              field("Result__c", dataValue("form.best_practice_questions.vetiver.vetiver_planted"))
            )));

          /*
          // Create results for Shade_Trees_Planted {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__shade_trees_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__shade_trees_planted"),
              field("Result__c", dataValue("form.Shade_Trees_Planted"))
            ))),


          // Create results for Compost_Heap {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__compost_heap"),
              field("Result__c", dataValue("form.Compost_Heap")),
              field("Photo_URL__c", function(state) {
                  var compostHeapPhotoUrl = '';
                  if(dataValue("form.Photo_of_Compost_Heap")(state) !== undefined && dataValue("form.Photo_of_Compost_Heap")(state) !== '') {
                    compostHeapPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo_of_Compost_Heap")(state);  
                  }
                  return compostHeapPhotoUrl;
                })
            ))),


          // Create results for Vertiver_Grass_on_Demo_Plot {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__vertiver_grass_on_demo_plot";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__vertiver_grass_on_demo_plot"),
              field("Result__c", dataValue("form.Vertiver_Grass_on_Demo_Plot"))
            )));

          // Version control
          */

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-Regrow-YG-Ag-C2024---Demo-Plot-Observations---CommCare----SalesForce:
        source_trigger: webhook
        target_job: Production---Coffee-Regrow-YG-Ag-C2024---Demo-Plot-Observations---CommCare----SalesForce
        condition_type: js_expression
        condition_label: Coffee Regrow Yirga C2024 Demo Plot Observations CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "dd10fc19040d40f0be48a447e1d2727c"
        enabled: true
  Production---Participants---KE-Nespresso-2023C---SalesForce----CommCare:
    name: Production - Participants - KE Nespresso 2023C - SalesForce -- CommCare
    jobs:
      Production---Participants---KE-Nespresso-2023C---SalesForce----CommCare:
        name: Production - Participants - KE Nespresso 2023C - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee KE - Nespresso 2023C
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - KE Nespresso 2023C
          // JOB NAME :: Production | Participants - KE Nespresso 2023C | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Participant","source":"SF","uniqueProjectKey":"coffee_ke_2023c"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org
          // EDITED :: Emmanuel Mwaka | emwaka@tns.org

          each(
              "$.data.participants[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                      "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                      "uiVersion": "1",
                      "version": "325",
                      "name": "New Participant",
                    };
                  }),
                  field("Name", function(state){
                    var name = '';
                    if(dataValue("participantName")(state) !== null) {
                      name = dataValue("participantName")(state);
                    }
                    if(dataValue("participantMiddleName")(state) !== null) {
                      name = name+' '+dataValue("participantMiddleName")(state);
                    }
                    if(dataValue("participantLastName")(state) !== null) {
                      name = name+' '+dataValue("participantLastName")(state);
                    }
                    return name;
                  }),
                  field("First_Name", dataValue("participantName")),
                  field("Middle_Name", dataValue("participantMiddleName")),
                  field("Last_Name", dataValue("participantLastName")),
                  field("Age", dataValue("participantAge")),
                  field("Gender", dataValue("participantGender")),
                  field("Phone_Number", dataValue("participantPhoneNumber")),
                  field("Farmer_Id", dataValue("tnsId")),
                  field("Farmer_Number", function(state){
                    var tnsId = dataValue("tnsId")(state);
                    var farmerNumber = tnsId.substr(tnsId.length-1,1);
                    return farmerNumber;
                  }),
                  field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                  field("Household_Id", dataValue("householdId")),
                  field("Household_Number", dataValue("householdName")),
                  field("Number_of_Trees", dataValue("householdFarmSize")),
                  field("Parent_Id", dataValue("trainingGroupId")),
                  field("Status", dataValue("status")),
                  field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                  field("Case_Id", dataValue("commCareCaseId")),
                  field("Name_Household_Concat", function(state){
                    var name = '';
                    var tnsId = dataValue("tnsId")(state);
                    var hhNumber = dataValue("householdName")(state);
                    var farmerNumber = tnsId.substr(tnsId.length-1,1);
                    
                    if(dataValue("participantName")(state) !== null) {
                      name = dataValue("participantName")(state);
                    }
                    if(dataValue("participantMiddleName")(state) !== null) {
                      name = name+' '+dataValue("participantMiddleName")(state);
                    }
                    if(dataValue("participantLastName")(state) !== null) {
                      name = name+' '+dataValue("participantLastName")(state);
                    }
                    return name+' '+hhNumber+'-'+farmerNumber;
                  }),
                  
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("commCareCaseId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": function(){
                          var name = '';
                          if(dataValue("participantName")(state) !== null) {
                            name = dataValue("participantName")(state);
                          }
                          if(dataValue("participantMiddleName")(state) !== null) {
                            name = name+' '+dataValue("participantMiddleName")(state);
                          }
                          if(dataValue("participantLastName")(state) !== null) {
                            name = name+' '+dataValue("participantLastName")(state);
                          }
                          return name;
                        },
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2023c_participant"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("commCareCaseId")(state),
                        "n0:First_Name": dataValue("participantName")(state),
                        "n0:Middle_Name": dataValue("participantMiddleName")(state),
                        "n0:Last_Name": dataValue("participantLastName")(state),
                        "n0:Age": dataValue("participantAge")(state),
                        "n0:Gender": dataValue("participantGender")(state),
                        "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                        "n0:Farmer_Id": dataValue("tnsId")(state),
                        "n0:Farmer_Number": function(){
                          var tnsId = dataValue("tnsId")(state);
                          var farmerNumber = tnsId.substr(tnsId.length-1,1);
                          return farmerNumber;
                        },
                        "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                        "n0:Household_Id": dataValue("householdId")(state),
                        "n0:Household_Number": dataValue("householdName")(state),
                        "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                        "n0:Status": dataValue("status")(state),
                        "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                        "n0:Name_Household_Concat": function(){
                          var name = '';
                          var tnsId = dataValue("tnsId")(state);
                          var hhNumber = dataValue("householdName")(state);
                          var farmerNumber = tnsId.substr(tnsId.length-1,1);
                          
                          if(dataValue("participantName")(state) !== null) {
                            name = dataValue("participantName")(state);
                          }
                          if(dataValue("participantMiddleName")(state) !== null) {
                            name = name+' '+dataValue("participantMiddleName")(state);
                          }
                          if(dataValue("participantLastName")(state) !== null) {
                            name = name+' '+dataValue("participantLastName")(state);
                          }
                          return name+' '+hhNumber+'-'+farmerNumber;
                        },
                        "n0:TNS_Id": dataValue("tnsId")(state),
                        "n0:Parent_Id": dataValue("trainingGroupId")(state)
                      },
                      "n0:index": {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_ke_2023C_training_group"
                          },
                          "#": dataValue("trainingGroupId")(state)
                        }
                      }
                    };
                  }),
                  field("n1:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n1": "http://openrosa.org/jr/xforms"
                      },
                      "n1:deviceID": "867066029216796",
                      "n1:timeStart": new Date().toISOString(),
                      "n1:timeEnd": new Date().toISOString(),
                      "n1:username": "api",
                      "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );
            
            //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---KE-Nespresso-2023C---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---KE-Nespresso-2023C---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Coffee KE 2023C SalesForce CommCare Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2023c"
        enabled: true
  Production---Coffee-KE-2023C---SalesForce----CommCare---Training-Sessions:
    name: Production - Coffee KE 2023C - SalesForce -- CommCare - Training Sessions
    jobs:
      Production---Coffee-KE-2023C---SalesForce----CommCare---Training-Sessions:
        name: Production - Coffee KE 2023C - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@v1.5.1'
        credential: null
        body: |
          // Your job goes here.
          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2023c_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_ke_2023c_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2023C---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2023C---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee KE 2023C SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2023c"
        enabled: true
  Production---Coffee-Regrow-YG-Ag-C2023---Demo-Plot-Observations---CommCare----SalesForce:
    name: Production - Coffee Regrow YG Ag C2023 - Demo Plot Observations - CommCare
      -- SalesForce
    jobs:
      Production---Coffee-Regrow-YG-Ag-C2023---Demo-Plot-Observations---CommCare----SalesForce:
        name: Production - Coffee Regrow YG Ag C2023 - Demo Plot Observations - CommCare
          -- SalesForce
        adaptor: '@openfn/language-salesforce@v2.12.0'
        credential: null
        body: |
          //Demo Plot Observations
          //Production - Coffee Regrow Yirga Agronomy C2022 | Demo Plot Observations | CommCare --> SalesForce


          each(
          "$.data",
            upsert("Observation__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function(state) {
                  var dempPlotPhotoUrl = '';
                  if(dataValue("form.Demo_Plot_Photo")(state) !== undefined && dataValue("form.Demo_Plot_Photo")(state) !== '') {
                    dempPlotPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Demo_Plot_Photo")(state);  
                  }
                  return dempPlotPhotoUrl;
                }),
                
                field("Observer_Signature__c", function(state) {
                  var observerSignatureUrl = '';
                  if(dataValue("form.agronomy_advisor_signature")(state) !== undefined && dataValue("form.agronomy_advisor_signature")(state) !== '') {
                    observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.agronomy_advisor_signature")(state);  
                  }
                  return observerSignatureUrl;
                }),
                
                field("Observation_Location__Latitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[0]; 
                  }
                }),
                field("Observation_Location__Longitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[1]; 
                  }
                }),
                field("Altitude__c", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[2]; 
                  }
                })
              )
            )
          ),

          //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS
          // Creates results for Stumped Trees


          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_regrow_2023__stumped_trees";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_regrow_2023__stumped_trees"),
              field("Result__c", dataValue("form.best_practice_questions.stumped.stumped_trees"))
            ))),

          // Create results for Sucker Selection
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_regrow_2023__sucker_selection_taken_place";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_regrow_2023__sucker_selection_taken_place"),
              field("Result__c", dataValue("form.best_practice_questions.sucker_selection.Sucker_Selection_Taken_Place")),
              field("Result_number__c", dataValue("form.best_practice_questions.sucker_selection.number_of_suckers"))
              
            ))),



          // Create results for Compost Heap
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_regrow_2023__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_regrow_2023__compost_heap"),
              field("Result__c", dataValue("form.best_practice_questions.compost_heap.present_compost_heap")),
              field("Compost_Photo__c", function(state) {
                  var compostPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== undefined && dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== '') {
                    compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state);  
                  }
                  return compostPhotoUrl;
                })
                
              
            ))),


          // Create results for Weed Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_regrow_2023__weed_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_regrow_2023__weed_management"),
              field("Result__c", dataValue("form.best_practice_questions.weed_management.has_the_demo_plot_been_dug")),
              field("Result_Text__c", dataValue("form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy")),
              field("Result_Text_Two__c", dataValue("form.best_practice_questions.weed_management.how_big_are_the_weeds")),
              field("Weed_Management_Photo__c", function(state) {
                  var weedsPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== '') {
                    weedsPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state);  
                  }
                  return weedsPhotoUrl;
                })
            ))),


          // Create results for Shade Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_regrow_2023__shade_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_regrow_2023__shade_management"),
              field("Result__c", dataValue("form.best_practice_questions.shade_management.level_of_shade_present")),
              field("Shade_Management_Photo__c", function(state) {
                  var shadePhotoUrl = '';
                  if(dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== '') {
                    shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state);  
                  }
                  return shadePhotoUrl;
                })
            ))),


          // Create results for Mulch
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_regrow_2023__mulch";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_regrow_2023__mulch"),
              field("Result__c", dataValue("form.best_practice_questions.mulch.mulch_under_the_canopy")),
              field("Result_Text__c", dataValue("form.best_practice_questions.mulch.thickness_of_mulch"))
            ))),


          // Create results for Vetiver Planted
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_regrow_2023__vetiver_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_regrow_2023__vetiver_planted"),
              field("Result__c", dataValue("form.best_practice_questions.vetiver.vetiver_planted"))
            )));

          /*
          // Create results for Shade_Trees_Planted {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__shade_trees_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__shade_trees_planted"),
              field("Result__c", dataValue("form.Shade_Trees_Planted"))
            ))),


          // Create results for Compost_Heap {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__compost_heap"),
              field("Result__c", dataValue("form.Compost_Heap")),
              field("Photo_URL__c", function(state) {
                  var compostHeapPhotoUrl = '';
                  if(dataValue("form.Photo_of_Compost_Heap")(state) !== undefined && dataValue("form.Photo_of_Compost_Heap")(state) !== '') {
                    compostHeapPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo_of_Compost_Heap")(state);  
                  }
                  return compostHeapPhotoUrl;
                })
            ))),


          // Create results for Vertiver_Grass_on_Demo_Plot {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__vertiver_grass_on_demo_plot";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__vertiver_grass_on_demo_plot"),
              field("Result__c", dataValue("form.Vertiver_Grass_on_Demo_Plot"))
            )));

          // Version control
          */

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-Regrow-YG-Ag-C2023---Demo-Plot-Observations---CommCare----SalesForce:
        source_trigger: webhook
        target_job: Production---Coffee-Regrow-YG-Ag-C2023---Demo-Plot-Observations---CommCare----SalesForce
        condition_type: js_expression
        condition_label: Coffee Regrow Yirga C2023 Demo Plot Observations CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "e9fb922a1526447b9485b26c4a1b8eb5"
        enabled: true
  Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Groups:
    name: Coffee - BDI Kahawatu 2024C - SalesForce -- CommCare - Training Groups
    jobs:
      Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Groups:
        name: Coffee - BDI Kahawatu 2024C - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Training Groups
          //Coffee :: BDI kahawatu 2024C | SalesForce --> CommCare | Training Groups
          //{"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_bdi_kahawatu_2024c"}

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/E70C61DB-A15E-4466-B187-02B2FCB6A135",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("Status", dataValue("groupStatus")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_bdi_kahawatu_2024c_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:Status": dataValue("groupStatus")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_bdi_kahawatu_2024c_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "f1ffc61aa02f30f7c078ddc5a95f48a9"
                  };
                })
              )
            )
          );// Your job goes here.

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Coffee---BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee BDI Kahawatu 2024C SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_bdi_kahawatu_2024c"
        enabled: true
  Production---Coffee-ZIM---SalesForce----CommCare---Project-Roles:
    name: Production - Coffee ZIM - SalesForce -- CommCare - Project Roles
    jobs:
      Production---Coffee-ZIM---SalesForce----CommCare---Project-Roles:
        name: Production - Coffee ZIM - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Project Roles

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Staff",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zim_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state),
                      "n0:FFGs_Observed": null
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "mjuma",
                    "n1:userID": "f1ffc61aa02f30f7c078ddc5a95f48a9"
                  };
                })
              )
            )
          );// Your job goes here.

          // Version control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Production Coffee ZIM SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zim"
        enabled: true
  "x-[archived]-Coffee-DRC---GEF-Kalehe-2022---Training-Sessions---Salesforce----CommCare":
    name: 'x [archived] Coffee DRC - GEF Kalehe 2022 - Training Sessions -
      Salesforce -- CommCare'
    jobs:
      Coffee-DRC---GEF-Kalehe-2022---Training-Sessions---Salesforce----CommCare:
        name: Coffee DRC - GEF Kalehe 2022 - Training Sessions - Salesforce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee DRC - GEF Kalehe 2022 | Training Sessions | Salesforce --> CommCare
          //coffee_drc_gef_2022
          //{"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_drc_gef_2022"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_drc_gef_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_drc_gef_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee-DRC---GEF-Kalehe-2022---Training-Sessions---Salesforce----CommCare:
        source_trigger: webhook
        target_job: Coffee-DRC---GEF-Kalehe-2022---Training-Sessions---Salesforce----CommCare
        condition_type: js_expression
        condition_label: 'Coffee DRC - GEF Kalehe 2022 | Training Sessions | Salesforce
          --> CommCare'
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gef_2022"
        enabled: true
  "x-[archived]-FV-and-FIS-to-ZW":
    name: 'x [archived] FV and FIS to ZW'
    jobs:
      FV-and-FIS-to-ZW:
        name: FV and FIS to ZW
        adaptor: '@openfn/language-salesforce@v4.6.0'
        credential: null
        body: |
          //FARM VISIT JOB FOR ALL ZIMBABWE PROJECTS
          //Production - Farm Visit :: ZM 2022 | CommCare --> Salesforce | Farm Visit Full
          //ZM ZM C2018

          	//Farm Visit Best Practice Results
              //loop through methods of erosion control and insert into database :: Erosion Control BP
              beta.each(

                function(state) {

                    //incoming erosion data
                    var best_practice_results_data = dataValue("form.erosion_control.methods_of_erosion_control")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_erosion_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        field("Best_Practice_Result_Type__c", "Erosion Control"),//this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Stabilizing grasses";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Mulch";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Water traps or trenches";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Physical barriers. (e.g. rocks)";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Terraces";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Contour planting";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Bean or Arachis cover crop between the rows";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "No erosion control method seen";

                            }
                            
                            return returnResults;
                          
                        })                
                    )
                )
            );


            //loop through chemical/fertilizier applied and insert into database :: Nutrition BP
            beta.each(

                function(state) {

                    //incoming chemical/fertilizer used data
                    var best_practice_results_data = dataValue("form.nutrition.type_chemical_applied_on_coffee_last_12_months")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_fertilizer_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        field("Best_Practice_Result_Type__c", "Chemicals and Fertilizers Applied"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Compost";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Manure";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Lime";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Compound S";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Compound J";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Single Super Phosphate (SSP)";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Zinc/Boron Foliar Feed (Tracel)";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "8"){

                                returnResults = "Ammonium Nitrate";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "Did NOT apply any fertilizer in past 12 months";

                            }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "9"){

                            //     returnResults = "Agricultural lime - Calcium Carbonate";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "10"){

                            //     returnResults = "Foliar Zinc or Boron";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "11"){

                            //     returnResults = "General Foliar Feed (Nurish, Ferquido Ferqan)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "12"){

                            //     returnResults = "Nutrical (cal dolomita)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "13"){

                            //     returnResults = "15-5-10+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "14"){

                            //     returnResults = "20-5-10+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "15"){

                            //     returnResults = "15-15-15+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "16"){

                            //     returnResults = "10-5-20+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "17"){

                            //     returnResults = "20-5-20+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "18"){

                            //     returnResults = "12-5-15+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "19"){

                            //     returnResults = "14-7-19+3MGO+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "20"){

                            //     returnResults = "Caldo bordeles";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "21"){

                            //     returnResults = "Foliar - lixiviado de bioinsumo (lombricomposta o equivalente)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "22"){

                            //     returnResults = "Urea";

                            // }

                            return returnResults;
                          
                        })
                    )
                )

            );


            //loop through methods of controlling coffee berry borer :: Integrated Pest and Disease Management BP
            beta.each(

                function(state) {

                    //incoming coffee berry borer data
                    var best_practice_results_data = dataValue("form.pest_disease_management.methods_of_controlling_coffee_berry_borer")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_cbb_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        field("Best_Practice_Result_Type__c", "Management of Coffee Berry Borer (CBB)"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Reduce pesticide use and/or encourage natural predators and parasites - beneficial insects.";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Strip all berries at the end of harvest, known as crop hygiene";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Harvest ripe cherries regularly - to reduce pest and disease levels";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Use berry borer traps";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Collect fallen berries at the end of the season - crop hygiene";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Feed the tree well to keep it healthy";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "8"){

                                returnResults = "Prune to keep the canopy open";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "9"){

                                returnResults = "Renovate (new planting) or rejuvenate regularly to keep main stems less than 8 years old";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "10"){

                                returnResults = "Plant and grow disease resistant varieties";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "11"){

                                returnResults = "Smooth the bark to reduce egg laying sites for While Coffee Borer";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "12"){

                                returnResults = "Spray regular pesticides";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "13"){

                                returnResults = "Spray homemade herbal or botanical pesticides";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "Does not know any methods";

                            }

                            return returnResults;
                          
                        })
                    )
                )

            );


            //loop through methods of controlling leaf rust :: Integrated Pest and Disease Management
            // beta.each(

            //     function(state) {

            //         //incoming coffee leaf rust data
            //         var best_practice_results_data = dataValue("form.pest_disease_management.methods_of_controlling_coffee_leaf_rust")(state);

            //         if (best_practice_results_data !== undefined) {

            //             return best_practice_results_data.split(" ").map(
                          
            //                 function(resultId) {
            //                     return {
            //                         result_data: resultId,
            //                         best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_clr_" + resultId,
            //                         farm_visit_submission: "FV-" + dataValue("id")(state)
            //                     };
            //                 }
                            
            //             );

            //         }
            //     },
            //     upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
            //         fields(
            //             field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
            //             field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
            //             field("Best_Practice_Result_Type__c", "Management of Coffee Leaf Rust (CLR)"), //this is the actual result type
            //             field("Best_Practice_Result_Description__c", function(state){
                          
            //                 var returnResults = "";
                          
            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

            //                     returnResults = "Feed the tree well to keep it healthy";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

            //                     returnResults = "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

            //                     returnResults = "Prune or keep canopy open";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

            //                     returnResults = "Spray fungicides";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

            //                     returnResults = "Grow resistant varieties";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

            //                     returnResults = "Does not know any methods";

            //                 }

            //                 return returnResults;
                          
            //             })
            //         )
            //     )

            // );
            

            //loop through pruning methods :: Pruning BP  
              beta.each(

                function(state) {

                    //incoming pruning data
                    var best_practice_results_data = dataValue("form.pruning.pruning_method_on_majority_trees")(state) || "";

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_pruning_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state),
                                    field_age: dataValue("form.field_age")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        field("Best_Practice_Result_Type__c", "Pruning"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                            var field_age = dataValue("field_age")(state);
                            console.log("The string field age is: ");
                            console.log(field_age);
                            const numeric_field_age = parseInt(field_age);
                            console.log("The numeric field age is: ");
                            console.log(numeric_field_age);
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Centers opened";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Unwanted suckers removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Dead branches removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Branches touching the ground removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Broken / unproductive stems and/or branches removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "No pruning methods used";

                            }
                            else if(numeric_field_age < 3) {
                                returnResults = 'N/A'
                            }

                            return returnResults;
                          
                        })
                    )
                )

            );

            beta.each(

              function(state) {

                  //incoming pruning data
                  var best_practice_results_data = dataValue("form.weeding.which_product_have_you_used")(state) || "";
                  var otherProduct = dataValue("form.weeding.ask_which_other_product_have_you_used")(state);
                  console.log("debug", otherProduct);
                  if (best_practice_results_data !== undefined) {

                      return best_practice_results_data.split(" ").map(
                        
                          function(resultId) {
                              return {
                                  result_data: resultId,
                                  best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_weeding_" + resultId,
                                  farm_visit_submission: "FV-" + dataValue("id")(state),
                                  other_submission: otherProduct
                              };
                          }
                          
                      );

                  }
              },
              upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                  fields(
                      field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                      field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                      field("Best_Practice_Result_Type__c", "Weeding"), //this is the actual result type
                      field("Best_Practice_Result_Description__c", function(state){
                        
                          var returnResults = "";
                        
                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                              returnResults = "Glyphosate (Eg Round Up)";

                          }

                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                              returnResults = "Paraquat (Eg. Gramoxone)";

                          }

                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                              returnResults = dataValue("other_submission");
                              console.log("debug", dataValue("other_submission"));
                          }
                          return returnResults;
                        
                      })
                  )
              )

          );
            
           
            //Best Practices :: Main Stem && Weeding &&  Shade Control && Record Keeping && Compost && Erosion Control && Nutrition
            each(
                "$.data",
                upsert("FV_Best_Practices__c", "FV_Submission_ID__c",
                    fields(
                        field("Name__c", "FV-" + dataValue("id")(state)),
                        field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),

                        //main stems
                          field("number_of_main_stems_on_majority_trees__c", dataValue("form.main_stems.number_of_main_stems_on_majority_trees")),
                        field("photo_of_trees_and_average_main_stems__c", function(state){
                          
                          var mainStemsPhotoURL = "";
                          if(dataValue("form.main_stems.trees_and_main_stems_photo")(state) !== undefined && dataValue("form.main_stems.trees_and_main_stems_photo")(state) !== '') {
                            mainStemsPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.main_stems.trees_and_main_stems_photo")(state);  
                           }
                           return mainStemsPhotoURL;
                           
                        }),

                        //nutrition
                        field("Color_of_coffee_tree_leaves__c", function(state){
                          
                          var colorOfCoffeeLeaves = dataValue("form.nutrition.are_the_leave_green_or_yellow_pale_green")(state);
                          var returnColorOfCoffeeLeaves = "";
                          
                          if(colorOfCoffeeLeaves !== undefined && colorOfCoffeeLeaves !== '' && colorOfCoffeeLeaves == 0){
                            
                            returnColorOfCoffeeLeaves = "5% or more (5 or more in 100) of the leaves are yellow, pale green or brown.";
                            
                          }

                          if(colorOfCoffeeLeaves !== undefined && colorOfCoffeeLeaves !== '' && colorOfCoffeeLeaves == 1){
                            
                            returnColorOfCoffeeLeaves = "Nearly all leaves are dark green and less than 5% (less than 5 in 100) are yellow, pale green, or brown.";
                            
                          }

                          return returnColorOfCoffeeLeaves;

                        }),

                        //weeding
                        field("how_many_weeds_under_canopy_and_how_big__c", function(state){
                          
                          var weedsUnderCanopy = dataValue("form.weeding.how_many_weeds_under_canopy_and_how_big_are_they")(state);
                          var returnWeedsUnderCanopy = "";
                  
                          if(weedsUnderCanopy == 1){
                  
                            returnWeedsUnderCanopy = "Few small weeds (less than 30cm) under the tree canopy";
                  
                          }
                  
                          if(weedsUnderCanopy == 2){
                  
                            returnWeedsUnderCanopy = "Many small weeds under the tree canopy (ground is covered with weeds)";
                  
                          }
                  
                          if(weedsUnderCanopy == 3){
                  
                            returnWeedsUnderCanopy = "Many large weeds under the tree canopy (ground is covered with weeds)";
                  
                          }

                            return returnWeedsUnderCanopy;

                        }),

                        //Health of New Planting (Yves might need to add a new Object for this)
                        field("health_of_new_planting_choice__c", function(state){
            
                            var healthNewPlanting = dataValue("form.health_of_new_planting.health_of_new_planting_choice")(state);
                            var returnhealthNewPlanting = "";
            
                            if(healthNewPlanting == 1){
            
                                returnhealthNewPlanting = "The majority of trees are green and healthy and have grown well";
            
                            }
            
                            if(healthNewPlanting == 2){
            
                                returnhealthNewPlanting = "The majority of trees look stressed and growth is slow";
            
                            }
            
                            if(healthNewPlanting == 3){
            
                                returnhealthNewPlanting = "The majority of trees have dried up or died";
            
                            }

                        return returnhealthNewPlanting;

                    }),

                    field("photo_of_trees_and_average_main_stems__c", function(state){
                          
                        var healthPhotoURL = "";
                        if(dataValue("form.main_stems.health_of_trees_photo")(state) !== undefined && dataValue("form.main_stems.health_of_trees_photo")(state) !== '') {
                            healthPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.main_stems.trees_and_main_stems_photo")(state);  
                         }
                         return healthPhotoURL;
                         
                      }),

                       field("Have_herbicides_been_used_on_the_field__c", dataValue("form.weeding.used_herbicides")),
                        // field("Herbicide_products_used_on_farm__c", function(state){
                          
                        //   var herbicideUsed = dataValue("form.weeding.which_product_have_you_used")(state);
                        //   var returnHerbicideUsed = "EMPTY";
                          
                        //   if(herbicideUsed !== undefined && herbicideUsed == 1){
                            
                        //     returnHerbicideUsed = "Glyphosate (Eg Round Up)";
                            
                        //   }
                          
                        //   if(herbicideUsed !== undefined && herbicideUsed == 2){
                            
                        //     returnHerbicideUsed = "Paraquat (Eg. Gramoxone)";
                            
                        //   }

                        //   if(herbicideUsed !== undefined && herbicideUsed == 3){
                            
                        //     returnHerbicideUsed = dataValue("form.weeding.ask_which_other_product_have_you_use")(state);
                            
                        //   }                  

                        //   return returnHerbicideUsed;
                          
                        // }),
                        
                        field("photo_of_weeds_under_the_canopy__c", function(state){
                          
                          var weedsPhotoUrl = dataValue("form.weeding.weeds_under_the_canopy_photo")(state);
                          var returnWeedsPhotoUrl = "";
                          
                          if (weedsPhotoUrl !== undefined && weedsPhotoUrl !== '') {
                              returnWeedsPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + weedsPhotoUrl;
                          }
                          
                          return returnWeedsPhotoUrl;
                          
                        }),

                        //shade management
                        field("level_of_shade_present_on_the_farm__c", function(state){
                          
                          var levelOfShadeOnPlot = dataValue("form.shade_control.level_of_shade_present_on_the_farm")(state);
                          var returnLevelOfShadeOnPlot = "";
                          
                          if(levelOfShadeOnPlot == 0){
                            
                            returnLevelOfShadeOnPlot = "NO shade, less than 5%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 1){
                            
                            returnLevelOfShadeOnPlot = "Light shade, 5 to 20%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 2){
                            
                            returnLevelOfShadeOnPlot = "Medium shade, 20 to 40%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 3){
                            
                            returnLevelOfShadeOnPlot = "Heavy shade, over 40%";
                            
                          }
                          
                          return returnLevelOfShadeOnPlot;

                        }),
                        
                        // field("have_new_shade_been_planted_last_3_years__c", function(state){
                          
                        //   var newShadePlanted = dataValue("form.shade_control.new_shade_trees_in_the_last_3_years")(state);
                        //   var returnNewShadePlanted = "";
                          
                        //   if(newShadePlanted == 0){
                            
                        //     returnNewShadePlanted = "No";
                            
                        //   }

                        //   if(newShadePlanted == 1){
                            
                        //     returnNewShadePlanted = "Yes";
                            
                        //   }

                        //   return returnNewShadePlanted;

                        // }),
                        
                        field("photo_of_level_of_shade_on_the_plot__c", function(state) {
                          
                          var shadePhotoUrl = '';
                          if(dataValue("form.shade_control.photo_of_level_of_shade_on_the_plot")(state) !== undefined && dataValue("form.shade_control.photo_of_level_of_shade_on_the_plot")(state) !== '') {
                            shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);
                            
                          }
                          
                          return shadePhotoUrl;
                          
                        }),
                        
                        // Yves needs to Add Object
                        field("planted_intercrop_bananas__c", function(state){
                          
                            var bananaShadePlanted = dataValue("form.shade_control.planted_intercrop_bananas")(state);
                            var returnbananaShadePlanted = "";
                            
                            if(bananaShadePlanted == "no"){
                              
                                returnbananaShadePlanted = "No";
                              
                            }

                            if(bananaShadePlanted == "yes"){
                              
                                returnbananaShadePlanted = "Yes";
                              
                            }

                            return returnbananaShadePlanted;

                          }),
                          
                          //Yves needs to add object
                          field("photograph_intercrop_bananas__c", function(state) {
                            
                            var bananashadePhotoUrl = '';
                            if(dataValue("form.shade_control.photograph_intercrop_bananas")(state) !== undefined && dataValue("form.shade_control.photograph_intercrop_bananas")(state) !== '') {
                                bananashadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);
                              
                            }
                            
                            return bananashadePhotoUrl;
                            
                          }),


                        //compost manure
                        field("do_you_have_compost_manure__c", function(state){
                          
                          var haveCompostManure = dataValue("form.compost.do_you_have_compost_manure")(state);
                          var returnHaveCompostManure = "";
                          
                          if(haveCompostManure !== undefined && haveCompostManure !== '' && haveCompostManure == 0){
                            
                            returnHaveCompostManure = "No";
                            
                          }
                          
                          if(haveCompostManure !== undefined && haveCompostManure !== '' && haveCompostManure == 1){
                            
                            returnHaveCompostManure = "Yes";
                            
                          }
                          
                          return returnHaveCompostManure;

                        }),

                        field("photo_of_the_compost_manure__c", function(state) {
                          
                          var compostPhotoUrl = '';
                          if(dataValue("form.compost.photo_of_the_compost_manure")(state) !== undefined && dataValue("form.compost.photo_of_the_compost_manure")(state) !== '') {
                            compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.compost.photo_of_the_compost_manure")(state);
                            
                          }
                          
                          return compostPhotoUrl;
                          
                        }),

                        //erosion control
                    /*    field("take_a_photo_of_erosion_control__c", function(state) {
                          
                          var erosionPhotoUrl = '';
                          if(dataValue("form.erosion_control.photo_of_erosion_control_method")(state) !== undefined && dataValue("form.erosion_control.photo_of_erosion_control_method")(state) !== '') {
                            erosionPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.photo_of_erosion_control_method")(state);
                            
                          }
                          
                          return erosionPhotoUrl;
                          
                        }),
                    */
                        field("Stabilizing_Grasses_Photo_URL__c", function(state){                    

                            var sgPhotoURL = "";
                            if(dataValue("form.erosion_control.stabilizing_grasses_image")(state) !== undefined && dataValue("form.erosion_control.stabilizing_grasses_image")(state) !== '') {
                                sgPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.stabilizing_grasses_image")(state); 
                            } 

                            return sgPhotoURL;                
                        }),
                        field("Mulch_Photo_URL__c", function(state){                    

                            var mulchPhotoURL = "";
                            if(dataValue("form.erosion_control.mulch_image")(state) !== undefined && dataValue("form.erosion_control.mulch_image")(state) !== '') {
                                mulchPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.mulch_image")(state); 
                            } 

                            return mulchPhotoURL;                
                        }),
                        field("Water_Traps_Photo_URL__c", function(state){                    

                            var wtPhotoURL = "";
                            if(dataValue("form.erosion_control.water_traps_or_trenches_image")(state) !== undefined && dataValue("form.erosion_control.water_traps_or_trenches_image")(state) !== '') {
                                wtPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.water_traps_or_trenches_image")(state); 
                            } 

                            return wtPhotoURL;                
                        }),
                        field("Physical_Barriers_Photo_URL__c", function(state){                    

                            var pbPhotoURL = "";
                            if(dataValue("form.erosion_control.physical_barriers_image")(state) !== undefined && dataValue("form.erosion_control.physical_barriers_image")(state) !== '') {
                                pbPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.physical_barriers_image")(state); 
                            } 

                            return pbPhotoURL;                
                        }),
                        field("Terraces_Photo_URL__c", function(state){                    

                            var terracesPhotoURL = "";
                            if(dataValue("form.erosion_control.terraces_image")(state) !== undefined && dataValue("form.erosion_control.terraces_image")(state) !== '') {
                                terracesPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.terraces_image")(state); 
                            } 

                            return terracesPhotoURL;                
                        }),
                        field("Contour_Planting_Photo_URL__c", function(state){                    

                            var cpPhotoURL = "";
                            if(dataValue("form.erosion_control.contour_planting_image")(state) !== undefined && dataValue("form.erosion_control.contour_planting_image")(state) !== '') {
                                cpPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.contour_planting_image")(state); 
                            } 

                            return cpPhotoURL;                
                        }),
                        field("Cover_Crop_Photo_URL__c", function(state){                    

                            var ccPhotoURL = "";
                            if(dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state) !== undefined && dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state) !== '') {
                                ccPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state); 
                            } 

                            return ccPhotoURL;                
                        }),

                        //record keeping
                        field("do_you_have_a_record_book__c", function(state){
                          
                          var haveRecordBook = dataValue("form.record_keeping.do_you_have_a_record_book")(state);
                          var returnHaveRecordBook = "";
                          
                          if(haveRecordBook == 0){
                            
                            returnHaveRecordBook = "No";
                            
                          }
                          
                          if(haveRecordBook == 1){
                            
                            returnHaveRecordBook = "Yes";
                            
                          }
                          
                          return returnHaveRecordBook;

                        }),

                        field("are_there_records_on_the_record_book__c", function(state){
                          
                          var recordsOnRecordBook = dataValue("form.record_keeping.are_there_records_on_the_record_book")(state);
                          var returnRecordsOnRecordBook = "";
                          
                          if(recordsOnRecordBook !== undefined && recordsOnRecordBook !== '' && recordsOnRecordBook == 0){
                            
                            returnRecordsOnRecordBook = "No";
                            
                          }
                          
                          if(recordsOnRecordBook !== undefined && recordsOnRecordBook !== '' && recordsOnRecordBook == 1){
                            
                            returnRecordsOnRecordBook = "Yes";
                            
                          }
                          
                          return returnRecordsOnRecordBook;
                          
                        }),

                        field("take_a_photo_of_the_record_book__c", function(state){
                          
                          var recordBookPhotoUrl = '';
                          if(dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== undefined && dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== '') {
                            recordBookPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== undefined && dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state);
                         
                          }
                          
                          return recordBookPhotoUrl;
                          
                        })
                    )
                )
            );


            //insert the farm visit record
            each(
                "$.data",
                upsert("Farm_Visit__c", "FV_Submission_ID__c",
                    fields(
                        field("Name__c", "FV-" + dataValue("id")(state)),
                        field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                        field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                        field("Training_Group__c", dataValue("form.case.@case_id")),
                        field("Farm_Visited__c", dataValue("form.farm_being_visted")),
                        field("Primary_Farmer_PIMA_ID__c", dataValue("form.farm_being_visted")),
                        field("Secondary_Farmer__c", function(state){
                            var secondaryFarmer = '';
                            if(dataValue("form.secondary_farmer_available")(state) == 'yes' && dataValue("form.secondary_farmer")(state) !== ''){
                              secondaryFarmer = dataValue("form.secondary_farmer");
                            }
                            return secondaryFarmer;
                        }),
                        field("Secondary_Farmer_PIMA_ID__c", function(state){
                            var secondaryFarmer = '';
                            if(dataValue("form.secondary_farmer_available")(state) == 'yes' && dataValue("form.secondary_farmer")(state) !== ''){
                              secondaryFarmer = dataValue("form.secondary_farmer");
                            }
                            return secondaryFarmer;
                        }),
                        field("Visit_Has_Training__c", dataValue("form.is_this_a_farm_training_visit")),
                      //  field("Training_Session__c", dataValue("form.training_session")),
                        field("Other_Participants_Present__c", dataValue("form.any_other_participants_present")),
                        field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                        field("Date_Visited__c", dataValue("form.date_of_visit")),
                        field("visit_comments__c", dataValue("form.farm_visit_comments")),
                        field("Farmer_Trainer__c", dataValue("form.trainer")),
                        field("No_of_curedas__c", dataValue("form.opening_questions.number_of_curedas")),
                        field("No_of_separate_coffee_fields__c", dataValue("form.opening_questions.number_of_separate_coffee_fields")),
                        field("Field_Age__c", dataValue("form.field_age")),
                        field("Field_Size__c", function(state){
                            var fieldSize = '';
                            if(dataValue("form.field_size")(state) !== undefined && dataValue("form.field_size")(state) !== ''){
                              fieldSize = dataValue("form.field_size");
                            }
                            else if(dataValue("form.field_size1")(state) !== undefined && dataValue("form.field_size1")(state) !== ''){
                              fieldSize = dataValue("form.field_size1");
                            }
                            
                            return fieldSize;
                            
                        }),
                        field("Farm_Visit_Photo_Url__c", function(state) {
                            var farmVisitPhotoUrl = '';
                            if (dataValue("form.farm_visit_photo")(state) !== undefined && dataValue("form.farm_visit_photo")(state) !== '') {
                                farmVisitPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.farm_visit_photo")(state);
                            }
                            return farmVisitPhotoUrl;
                        }),
                        field("Signature__c", function(state) {
                            var recorderSignatureUrl = '';
                            if (dataValue("form.signature_of_farmer_trainer")(state) !== undefined && dataValue("form.signature_of_farmer_trainer")(state) !== '') {
                                recorderSignatureUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.signature_of_farmer_trainer")(state);
                            }
                            return recorderSignatureUrl;
                        }),
                        field('Location_GPS__Latitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[0];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Location_GPS__Longitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[1];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Altitude__c', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[2];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                        return '';
                        })
                    )
                )
            );
            
            // Upsert Farm Data
            beta.each(
              function(substate){
                const itemsFromRepeatGroup = [];
                
                substate.data.form.field_inventory_survey.general_plot_information.forEach((plot)=>{
                  itemsFromRepeatGroup.push(plot);
                });
                
                return itemsFromRepeatGroup;
              }, upsert(
                "Farm__c", "TNS_Id__c",
                fields(
                  field("TNS_Id__c", function(substate){
                    const current_index = dataValue("current_index")(substate);
                    var result = "F-0" + current_index + "-" + state.data.form.household_tns_id;
                    return result;
                  }),
                  field("Name",  function(substate){
                    const current_index = dataValue("current_index")(substate);
                    var result = "0" + current_index;
                    return result;
                  }),
                  field("Farm_Size_Coffee_Trees__c", dataValue("total_coffee")),
                  field("Farm_Size_Land_Measurements__c", dataValue("farm_size_ha")),
                  field("Main_Coffee_Field__c", function(state){
                    var result = false;
                    if(dataValue("current_index")(state) === "1"){
                      result = true;
                    }
                    return result;
                  }),
                  field("Planting_Month_and_Year__c", dataValue("date_planted")),
                  field('Farm_GPS_Coordinates__Latitude__s', (substate) => {
                      const coords = dataValue("final_gps")(substate);
                      if (coords) {
                        return coords.split(" ")[0];
                      }
                      return '';
                  }),
                  field('Farm_GPS_Coordinates__Longitude__s', (substate) => {
                      const coords = dataValue("final_gps")(substate);
                      if (coords) {
                        return coords.split(" ")[1];
                      }
                      return '';
                  }),
                  field('Altitude__c', (substate) => {
                     const coords = dataValue("final_gps")(substate);
                      if (coords) {
                        return coords.split(" ")[2];
                      }
                  return '';
                  }),
                  field("Farm_Image_URL__c", function(substate) {
                      var plotPhotoUrl = '';
                      if (dataValue("plot_photo")(substate) !== undefined && dataValue("plot_photo")(substate) !== '') {
                          plotPhotoUrl = "https://www.commcarehq.org/a/" + state.data.domain + "/api/form/attachment/" + state.data.form.meta.instanceID + "/" + dataValue("plot_photo")(substate);
                      }
                      return plotPhotoUrl;
                  }),
                  relationship("Household__r", "Household_ID__c", state.data.form.household_tns_id),
                  relationship("Latest_Farm_Visit_Record__r", "FV_Submission_ID__c", "FV-" + state.data.id)
                    )
                  )
                );
            
            //Upsert Variety data
            
            beta.each(
              function(substate){
                var createdObjects = [];
                substate.data.form.field_inventory_survey.general_plot_information.forEach((item)=>{
                  // var varietiesList = item.varieties.split(" ").map(variety=>{
                  //   var varietyQuantity = item[`variety_${variety}`];
                  //   console.log("Variety Quantity: " + varietyQuantity);
                  //   return {
                  //     id: variety,
                  //     quantity: varietyQuantity,
                  //     plot: item.current_index,
                  //     other_variety: item.other_variety
                  //   };
                  // });
                  var varietiesList = item.varieties.split(" ");
                  varietiesList.forEach((variety)=>{
                    var varietyQuantity = item[`variety_${variety}`];
                    var createdObject = {
                        id: variety,
                        quantity: varietyQuantity,
                        plot: item.current_index,
                        other_variety: item.other_variety
                    };
                    createdObjects.push(createdObject);
                  });
                });
                console.log("Created Objects:");
                console.log(createdObjects);
                return createdObjects;
              },
              upsert("Coffee_Variety__c", "Name",
                fields(
                  field("Name", function(substate){
                    console.log("Variety Number:");
                    console.log(dataValue("id")(substate));
                    console.log(dataValue("id"));
                    const variety = dataValue("id")(substate);
                    const plot = dataValue("plot")(substate);
                    return "CV-0" + variety + "-F-0" + plot + "-" + state.data.form.household_tns_id;
                  }),
                  field("Variety_Type_Name__c", function(substate){
                    var result = "";
                    if(dataValue("id")(substate) == "1"){
                      result = "Costa Rica 95";
                    }
                    else if(dataValue("id")(substate) == "2"){
                      result = "SL28 or 34";
                    }
                    else if(dataValue("id")(substate) == "3"){
                      result = "K7";
                    }
                    else if(dataValue("id")(substate) == "4"){
                      result = "Catimor 129";
                    }
                    else if(dataValue("id")(substate) == "5"){
                      result = "Catuai";
                    }
                    else if(dataValue("id")(substate) == "6"){
                      result = "Yellow Catuai";
                    }
                    else if(dataValue("id")(substate) == "7"){
                      result = "F6";
                    }
                    else if(dataValue("id")(substate) == "8"){
                      result = "Caturra";
                    }
                    else if(dataValue("id")(substate) == "9"){
                      result = dataValue("other_variety")(substate);
                    }
                    return result;
                  }),
                  field("Variety_Number_of_Trees__c", dataValue("quantity")),
                  relationship("Farm__r", "TNS_Id__c", function(substate){
                    var result = "F-0" + dataValue("plot")(substate) + "-" + state.data.form.household_tns_id;
                    return result;
                  })
                  )
              )
            );

            //upsert training session
          /*    each(
                "$.data",
                upsert("Training_Session__c", "CommCare_Case_Id__c",
                    fields(
                        field("CommCare_Case_Id__c", dataValue("form.training_session")),
                        field("Updated_from_CommCare__c", true)
                    )
                )
            );
          */

          //}


          // FIS Data

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->FV-and-FIS-to-ZW:
        source_trigger: webhook
        target_job: FV-and-FIS-to-ZW
        condition_type: js_expression
        condition_label: FV and FIS to ZW
        condition_expression: |
          state.data.form["survey_type_2"] == "FV + FIS - ZW"
        enabled: true
  Coffee---DRC-GCA-Kalehe-C2023---Salesforce----CommCare---Project-Roles:
    name: Coffee - DRC GCA Kalehe C2023 - Salesforce -- CommCare - Project Roles
    jobs:
      Coffee---DRC-GCA-Kalehe-C2023---Salesforce----CommCare---Project-Roles:
        name: Coffee - DRC GCA Kalehe C2023 - Salesforce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - DRC GCA Kalehe C2023 | Salesforce --> CommCare | Project Roles
          // coffee_drc_gca_kalehe_2023
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_drc_gca_kalehe_2023"}

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_gca_kalehe_c2023_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---DRC-GCA-Kalehe-C2023---Salesforce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Coffee---DRC-GCA-Kalehe-C2023---Salesforce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee DRC GCA Kalehe C2023 Salesforce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gca_kalehe_c2023"
        enabled: true
  Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Participants:
    name: Coffee - ZW IFC 2024C - SalesForce -- CommCare - Training Participants
    jobs:
      Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Participants:
        name: Coffee - ZW IFC 2024C - SalesForce -- CommCare - Training Participants
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee KE - Nespresso 2023C
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - KE Nespresso 2023C
          // JOB NAME :: Production | Participants - KE Nespresso 2023C | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Participant","source":"SF","uniqueProjectKey":"coffee_ke_2023c"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org
          // EDITED :: Emmanuel Mwaka | emwaka@tns.org

          each(
              "$.data.participants[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                      "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                      "uiVersion": "1",
                      "version": "325",
                      "name": "New Participant",
                    };
                  }),
                  field("Name", function(state){
                    var name = '';
                    if(dataValue("participantName")(state) !== null) {
                      name = dataValue("participantName")(state);
                    }
                    if(dataValue("participantMiddleName")(state) !== null) {
                      name = name+' '+dataValue("participantMiddleName")(state);
                    }
                    if(dataValue("participantLastName")(state) !== null) {
                      name = name+' '+dataValue("participantLastName")(state);
                    }
                    return name;
                  }),
                  field("First_Name", dataValue("participantName")),
                  field("Middle_Name", dataValue("participantMiddleName")),
                  field("Last_Name", dataValue("participantLastName")),
                  field("Age", dataValue("participantAge")),
                  field("Gender", dataValue("participantGender")),
                  field("Phone_Number", dataValue("participantPhoneNumber")),
                  field("Farmer_Id", dataValue("tnsId")),
                  field("Farmer_Number", function(state){
                    var tnsId = dataValue("tnsId")(state);
                    var farmerNumber = "0" + tnsId.substr(tnsId.length-1,1);
                    return farmerNumber;
                  }),
                  field("Grower_Number", dataValue("participantOtherIDNumber")),
                  field("Household_Id", dataValue("householdId")),
                  field("Household_Number", dataValue("HHID")),
                  field("Number_of_Trees", dataValue("householdFarmSize")),
                  field("Parent_Id", dataValue("trainingGroupId")),
                  field("Status", dataValue("status")),
                  field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                  field("Case_Id", dataValue("commCareCaseId")),
                  field("Name_Household_Concat", function(state){
                    var name = '';
                    var tnsId = dataValue("tnsId")(state);
                    var hhNumber = dataValue("HHID")(state);
                    var farmerNumber = "0" + tnsId.substr(tnsId.length-1,1);
                    
                    if(dataValue("participantName")(state) !== null) {
                      name = dataValue("participantName")(state);
                    }
                    if(dataValue("participantMiddleName")(state) !== null) {
                      name = name+' '+dataValue("participantMiddleName")(state);
                    }
                    if(dataValue("participantLastName")(state) !== null) {
                      name = name+' '+dataValue("participantLastName")(state);
                    }
                    return name+' '+hhNumber+'-'+farmerNumber;
                  }),
                  
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("commCareCaseId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": function(){
                          var name = '';
                          if(dataValue("participantName")(state) !== null) {
                            name = dataValue("participantName")(state);
                          }
                          if(dataValue("participantMiddleName")(state) !== null) {
                            name = name+' '+dataValue("participantMiddleName")(state);
                          }
                          if(dataValue("participantLastName")(state) !== null) {
                            name = name+' '+dataValue("participantLastName")(state);
                          }
                          return name;
                        },
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_zw_2024c_participant"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("commCareCaseId")(state),
                        "n0:First_Name": dataValue("participantName")(state),
                        "n0:Middle_Name": dataValue("participantMiddleName")(state),
                        "n0:Last_Name": dataValue("participantLastName")(state),
                        "n0:Age": dataValue("participantAge")(state),
                        "n0:Gender": dataValue("participantGender")(state),
                        "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                        "n0:Farmer_Id": dataValue("tnsId")(state),
                        "n0:Farmer_Number": function(){
                          var tnsId = dataValue("tnsId")(state);
                          var farmerNumber = tnsId.substr(tnsId.length-1,1);
                          return farmerNumber;
                        },
                        "n0:Grower_Number": dataValue("participantOtherIDNumber")(state),
                        "n0:Household_Id": dataValue("householdId")(state),
                        "n0:Household_Number": dataValue("HHID")(state),
                        "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                        "n0:Status": dataValue("status")(state),
                        "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                        "n0:Name_Household_Concat": function(){
                          var name = '';
                          var tnsId = dataValue("tnsId")(state);
                          var hhNumber = dataValue("HHID")(state);
                          var farmerNumber = tnsId.substr(tnsId.length-1,1);
                          
                          if(dataValue("participantName")(state) !== null) {
                            name = dataValue("participantName")(state);
                          }
                          if(dataValue("participantMiddleName")(state) !== null) {
                            name = name+' '+dataValue("participantMiddleName")(state);
                          }
                          if(dataValue("participantLastName")(state) !== null) {
                            name = name+' '+dataValue("participantLastName")(state);
                          }
                          return name+' '+hhNumber+'-'+farmerNumber;
                        },
                        "n0:TNS_Id": dataValue("tnsId")(state),
                        "n0:Parent_Id": dataValue("trainingGroupId")(state)
                      },
                      "n0:index": {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_zw_2024c_training_group"
                          },
                          "#": dataValue("trainingGroupId")(state)
                        }
                      }
                    };
                  }),
                  field("n1:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n1": "http://openrosa.org/jr/xforms"
                      },
                      "n1:deviceID": "867066029216796",
                      "n1:timeStart": new Date().toISOString(),
                      "n1:timeEnd": new Date().toISOString(),
                      "n1:username": "api",
                      "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );
            
            //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Participants:
        source_trigger: webhook
        target_job: Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Participants
        condition_type: js_expression
        condition_label: Coffee ZW IFC 2024C SalesForce CommCare Training Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zw_2024c"
        enabled: true
  Global---Training-Groups---Salesforce----CommCare:
    name: Global - Training Groups - Salesforce -- CommCare
    jobs:
      Global---Training-Groups---Salesforce----CommCare:
        name: Global - Training Groups - Salesforce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee DRC - GCA TNS 2022 | Training Groups | Salesforce --> CommCare
          //coffee_drc_gca_tns_2022
          //{"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_drc_gca_tns_2022"}

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "avengers_initiative_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "avengers_initiative_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Global---Training-Groups---Salesforce----CommCare:
        source_trigger: webhook
        target_job: Global---Training-Groups---Salesforce----CommCare
        condition_type: js_expression
        condition_label: Global Training Groups Salesforce CommCare
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "the_avengers_initiative"
        enabled: true
  "x-[archived]-Coffee-DRC--GCA-TNS-2022---Project-Roles---Salesforce----CommCare":
    name: 'x [archived] Coffee DRC- GCA TNS 2022 - Project Roles - Salesforce --
      CommCare'
    jobs:
      Coffee-DRC--GCA-TNS-2022---Project-Roles---Salesforce----CommCare:
        name: Coffee DRC- GCA TNS 2022 - Project Roles - Salesforce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee DRC - GCA TNS 2022 | Project Roles | Salesforce --> CommCare
          //coffee_drc_gca_tns_2022
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_drc_gca_tns_2022"}

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_gca_tns_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee-DRC--GCA-TNS-2022---Project-Roles---Salesforce----CommCare:
        source_trigger: webhook
        target_job: Coffee-DRC--GCA-TNS-2022---Project-Roles---Salesforce----CommCare
        condition_type: js_expression
        condition_label: Coffee DRC GCA TNS 2022 Project Roles Salesforce  CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gca_tns_2022"
        enabled: true
  Production---Training-Groups---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
    name: Production - Training Groups - ET HWG JCP CREW C2024 - SalesForce --
      CommCare
    jobs:
      Production---Training-Groups---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
        name: Production - Training Groups - ET HWG JCP CREW C2024 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee - ET HWG JCP CREW C2024
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET HWG JCP CREW C2024
          // JOB NAME :: Production | Training Groups - ET HWG JCP CREW C2024 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_crew_c2024"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_crew_c2024_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_hwg_jcp_crew_c2024_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Groups---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Groups---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Groups ET HWG JCP CREW C2024 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_crew_c2024"
        enabled: true
  Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Groups:
    name: Coffee - ZW IFC 2024C - SalesForce -- CommCare - Training Groups
    jobs:
      Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Groups:
        name: Coffee - ZW IFC 2024C - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Training Group Job 
          //Coffee - UG Benckiser (Ag) :: C2020 | SalesForce --> CommCare | Training Groups
          //{"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_zw_2024c"}

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/E70C61DB-A15E-4466-B187-02B2FCB6A135",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("Status", dataValue("groupStatus")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zw_2024c_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:Status": dataValue("groupStatus")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_zw_2024c_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "f1ffc61aa02f30f7c078ddc5a95f48a9"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Coffee---ZW-IFC-2024C---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee ZW IFC 2024C SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zw_2024c"
        enabled: true
  "x-[arhived]-Global---Project-Roles-SF---CM":
    name: 'x [arhived] Global - Project Roles SF - CM'
    jobs:
      Global---Project-Roles-SF---CM:
        name: Global - Project Roles SF - CM
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |
          // This is a Global Project Role Job. To trigger this Job the isProjectJobsGlobal checkmark on SF
          // must be set to true

          // NB: the case is generated by concatinating the uniqueProjectKey to the _staff text to create 
          // a staff case type in Commcate


          // Global | Salesforce --> CommCare | Project Roles
          // {"jobType":"Project Role","source":"SF","isProjectJobsGlobal": true}
          // Extract uniqueProjectKey from the original payload

          fn(state => {

            const uniqueProjectKey = state.data.uniqueProjectKey;

            return {
              ...state,
              uniqueProjectKey
            };
          });

          each(
            "$.data.projectRoles[*]",
            //function(state){
            //console.log(state.data.uniqueProjectKey);
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": function(state){
                        console.log(state.uniqueProjectKey);
                        return state.uniqueProjectKey + "_staff";
                      }
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
            //}
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Global---Project-Roles-SF---CM:
        source_trigger: webhook
        target_job: Global---Project-Roles-SF---CM
        condition_type: js_expression
        condition_label: Global Salesforce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "the_avengers_initiative"
        enabled: true
  Production---Coffee-KE-2023C---SalesForce----CommCare---Project-Roles:
    name: Production - Coffee KE 2023C - SalesForce -- CommCare - Project Roles
    jobs:
      Production---Coffee-KE-2023C---SalesForce----CommCare---Project-Roles:
        name: Production - Coffee KE 2023C - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@v1.5.1'
        credential: null
        body: |
          // Project Roles Job = Coffee - Kenya Nespresso 2023C
          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_ke_2023c_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );// Your job goes here.

          // version control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2023C---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2023C---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee KE 2023C SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2023c"
        enabled: true
  Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Project-Roles:
    name: Production - Coffee KE 2024AC - Dummy - SalesForce -- CommCare - Project
      Roles
    jobs:
      Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Project-Roles:
        name: Production - Coffee KE 2024AC - Dummy - SalesForce -- CommCare - Project
          Roles
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |+
          // Project Roles Job = Coffee - Kenya Nespresso 2024ac_dummy
          each(
              "$.data.projectRoles[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Project Role",
                      "uiVersion": "1",
                      "version": "1",
                      "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Name", function(state){
                    var name = '';
                    if(dataValue("staffName")(state) !== null) {
                      name = dataValue("staffName")(state);
                    }
                    return name;
                  }),
                  field("TNS_Id", dataValue("tnsId")),
                  field("City", dataValue("locationName")),
                  field("Role", dataValue("roleForCommCare")),
                  field("Case_Id", dataValue("commCareCaseId")),
                  field("Current_Module", dataValue("currentModule")),
                  field("Current_Module_Name", dataValue("currentModuleName")),
                  field("Previous_Module", dataValue("previousModule")),
                  field("Previous_Module_Name", dataValue("previousModuleName")),
                  field("Name_id_concat", function(state){
                    var name = '';
                    if(dataValue("staffName")(state) !== null) {
                      name = dataValue("staffName")(state);
                    }
                    if(dataValue("tnsId")(state) !== null) {
                      name = name+' '+dataValue("tnsId")(state);
                    }
                    return name;
                  }),
                  field("Salesforce_Staff_Id", dataValue("staffId")),
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("commCareCaseId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": function(){
                          var name = '';
                          if(dataValue("staffName")(state) !== null) {
                            name = dataValue("staffName")(state);
                          }
                          return name;
                        },
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2024ac_dummy_staff"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("commCareCaseId")(state),
                        "n0:Name_Id_Concat": function() {
                          var name = '';
                          if(dataValue("staffName")(state) !== null) {
                            name = dataValue("staffName")(state);
                          }
                          if(dataValue("tnsId")(state) !== null) {
                            name = name+' '+dataValue("tnsId")(state);
                          }
                          return name;
                        },
                        "n0:Role": dataValue("roleForCommCare")(state),
                        "n0:City": dataValue("locationName")(state),
                        "n0:TNS_Id": dataValue("tnsId")(state),
                        "n0:Current_Module": dataValue("currentModule")(state),
                        "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                        "n0:Previous_Module": dataValue("previousModule")(state),
                        "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                        "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                      }
                    };
                  }),
                  field("n1:meta", function(state) {
                    return {
                      "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                      "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                      "n1:timeStart": new Date().toISOString(),
                      "n1:timeEnd": new Date().toISOString(),
                      "n1:username": "api",
                      "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );// Your job goes here.
            
            // version control
            
    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024AC---Dummy---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee KE 2024AC Dummy SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024ac_dummy"
        enabled: true
  "x-[archived]-Production---Coffee-DRC-GCA-Kalehe-2022C---Demo-Plot-Observations---CommCare----SalesForce":
    name: 'x [archived] Production - Coffee DRC GCA Kalehe 2022C - Demo Plot
      Observations - CommCare -- SalesForce'
    jobs:
      Production---Coffee-DRC-GCA-Kalehe-2022C---Demo-Plot-Observations---CommCare----SalesForce:
        name: Production - Coffee DRC GCA Kalehe 2022C - Demo Plot Observations -
          CommCare -- SalesForce
        adaptor: '@openfn/language-salesforce@v3.0.7'
        credential: null
        body: |
          //Demo Plot Observations
          //Production - Coffee DRC GCA Kalehe 2022C | Demo Plot Observations | CommCare --> SalesForce

          each(
            "$.data",
            upsert(
              "Observation__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function (state) {
                  var demoPlotPhotoUrl = "";
                  if (
                    dataValue("form.Demo_Plot_Photo")(state) !== undefined &&
                    dataValue("form.Demo_Plot_Photo")(state) !== ""
                  ) {
                    demoPlotPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.Demo_Plot_Photo")(state);
                  }
                  return demoPlotPhotoUrl;
                }),

                field("Observer_Signature__c", function (state) {
                  var observerSignatureUrl = "";
                  if (
                    dataValue("form.agronomy_advisor_signature")(state) !== undefined &&
                    dataValue("form.agronomy_advisor_signature")(state) !== ""
                  ) {
                    observerSignatureUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.agronomy_advisor_signature")(state);
                  }
                  return observerSignatureUrl;
                }),

                field("Observation_Location__Latitude__s", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[0];
                  }
                }),
                field("Observation_Location__Longitude__s", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[1];
                  }
                }),
                field("Altitude__c", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[2];
                  }
                })
              )
            )
          );

          // Pruning data handler
          beta.each(
            function (state) {
              //incoming pruning data
              var pruning_data = dataValue(
                "form.best_practice_questions.pruning.pruning_methods"
              )(state);

              if (pruning_data !== undefined) {
                return pruning_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    dpo_submission:
                      dataValue("id")(state) +
                      "coffee_drc_gca_kalehe_2022__pruning" +
                      resultId,
                  };
                });
              }
            },
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("dpo_submission")),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_drc_gca_kalehe_2022__pruning"
                ),
                field("Result__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Centers opened";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Unwanted suckers removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "Dead branches removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "4"
                  ) {
                    returnResults = "Branches touching the ground removed";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "No pruning methods used";
                  }

                  return returnResults;
                })
              )
            )
          );

          // //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS

          // // Create results for Pruning
          // beta.each(
          //   //"$.data",
          //   function (state) {
          //     var pruningData = dataValue(
          //       "form.best_practice_questions.pruning.pruning_methods"
          //     )(state);
          //     if (pruningData !== undefined) {
          //       return pruningData.split(" ").map(function (resultId) {
          //         return {
          //         result_data: resultId,
          //         };
          //         console.log(resultId);
          //       });
          //     }
          //   },
          //   upsert(
          //     "Observation_Result__c",
          //     "Submission_ID__c",
          //     fields(
          //       field("Submission_ID__c", function (state) {
          //         return dataValue("id")(state) + "coffee_ke_nn_2023__pruning";
          //       }),
          //       field("Observation__c", function (state) {
          //         return state.references[state.references.length - 1].id;
          //       }),
          //       field("RecordTypeId", "01224000000gQe5AAE"),
          //       relationship(
          //         "Observation_Criterion__r",
          //         "Unique_Name__c",
          //         "coffee_ke_nn_2023__pruning"
          //       ),
          //       field("Result__c", function (state) {
          //         var returnPruning = "";

          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "1"
          //         ) {
          //           returnPruning = "Centers opened";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "2"
          //         ) {
          //           returnPruning = "Unwanted suckers removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "3"
          //         ) {
          //           returnPruning = "Dead branches removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "4"
          //         ) {
          //           returnPruning = "Branches touching the ground removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "5"
          //         ) {
          //           returnPruning = "Broken/unproductive stems and/or branches removed";
          //         }
          //         if (
          //           dataValue("result_data")(state) !== undefined &&
          //           dataValue("result_data")(state) == "0"
          //         ) {
          //           returnPruning = "No pruning methods used";
          //         }
          //         return returnPruning;
          //       })
          //     )
          //   )
          // ),

          // Create results for Compost Heap
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_drc_kalehe_2022__compost_heap";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_drc_kalehe_2022__compost_heap"
                ),
                field("Result__c", function (state) {
                  var returnCompost = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) !== undefined
                  ) {
                    returnCompost = "Yes, compost or manure heap seen";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) !== undefined
                  ) {
                    returnCompost = "No compost or manure heap seen";
                  }
                  return returnCompost;
                }),
                field("Compost_Photo__c", function (state) {
                  var compostPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.compost_heap_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.compost_heap_photo"
                    )(state) !== ""
                  ) {
                    compostPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.compost_heap.compost_heap_photo"
                      )(state);
                  }
                  return compostPhotoUrl;
                })
              )
            )
          );

          // Create results for Weed Management
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return (
                    dataValue("id")(state) + "coffee_drc_gca_kalehe_2022__weed_management"
                  );
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_drc_gca_kalehe_2022__weed_management"
                ),

                //Q1
                field("Result__c", function (state) {
                  var returnWeeds = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) !== undefined
                  ) {
                    returnWeeds = "Yes, field dug";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) !== undefined
                  ) {
                    returnWeeds = "No sign of digging";
                  }
                  return returnWeeds;
                }),

                //Q2
                field("Result_Text__c", function (state) {
                  var returnWeeds2 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "No weeds under the tree canopy";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "Few weeds under the tree canopy";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "2" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "Many weeds under the tree canopy";
                  }

                  return returnWeeds2;
                }),

                //Q3
                field("Result_Text_Two__c", function (state) {
                  var returnWeeds3 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) == "1"
                  ) {
                    returnWeeds3 =
                      "Weeds are less than 30cm tall or 30cm spread for grasses";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) == "2"
                  ) {
                    returnWeeds3 =
                      "Weeds are more than 30cm tall or 30cm spread for grasses";
                  }
                  return returnWeeds3;
                }),

                field("Weed_Management_Photo__c", function (state) {
                  var weedsPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.weed_management_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.weed_management_photo"
                    )(state) !== ""
                  ) {
                    weedsPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.weed_management.weed_management_photo"
                      )(state);
                  }
                  return weedsPhotoUrl;
                })
              )
            )
          );

          // Create results for Shade Management
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return (
                    dataValue("id")(state) +
                    "coffee_drc_gca_kalehe_2022__shade_management"
                  );
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_drc_gca_kalehe_2022__shade_management"
                ),

                // Question 1
                field("Result__c", function (state) {
                  var returnShade = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "0"
                  ) {
                    returnShade = "NO shade, less than 5%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "1"
                  ) {
                    returnShade = "Light shade, 5 to 20%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "2"
                  ) {
                    returnShade = "Medium shade, 20 to 40%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "3"
                  ) {
                    returnShade = "Heavy shade, over 40%";
                  }
                  return returnShade;
                }),

                // Question 2
                field("Result_Text__c", function (state) {
                  var returnShade2 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.have_2_shade_trees_been_planted"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.have_2_shade_trees_been_planted"
                    )(state) == "1"
                  ) {
                    returnShade2 = "Yes. 2 shade trees planted";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.have_2_shade_trees_been_planted"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.have_2_shade_trees_been_planted"
                    )(state) == "0"
                  ) {
                    returnShade2 = "No. Shade trees have not been planted yet";
                  }
                  return returnShade2;
                }),

                field("Shade_Management_Photo__c", function (state) {
                  var shadePhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.shade_management_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.shade_management_photo"
                    )(state) !== ""
                  ) {
                    shadePhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.shade_management.shade_management_photo"
                      )(state);
                  }
                  return shadePhotoUrl;
                })
              )
            )
          );

          // Create results for Mulch
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_drc_gca_kalehe_2022__mulch";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_drc_gca_kalehe_2022__mulch"
                ),
                field("Result__c", function (state) {
                  var returnMulch = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) == "1"
                  ) {
                    returnMulch = "Yes, Some mulch seen";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) == "0"
                  ) {
                    returnMulch = "No mulch seen";
                  }
                  return returnMulch;
                }),
                field("Result_Text__c", function (state) {
                  var returnMulch2 = "";
                  if (
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) == "1"
                  ) {
                    returnMulch2 = "Soil can be seen clearly, less than 2cm of mulch";
                  } else if (
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) == "2"
                  ) {
                    returnMulch2 = "Soil can not be seen, more than 2cm of mulch";
                  }
                  return returnMulch2;
                })
              )
            )
          );

          // Create results for Kitchen Gardens
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return (
                    dataValue("id")(state) + "coffee_drc_gca_kalehe_2022__kitchen_garden"
                  );
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_drc_gca_kalehe_2022__kitchen_garden"
                ),
                field("Result__c", function (state) {
                  var returnWoodlots = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.kitchen_gardens.is_there_a_kitchen_garden"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.kitchen_gardens.is_there_a_kitchen_garden"
                    )(state) == "1"
                  ) {
                    returnWoodlots = "Yes. There is a kitchen garden on the farm";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.kitchen_gardens.is_there_a_kitchen_garden"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.kitchen_gardens.is_there_a_kitchen_garden"
                    )(state) == "0"
                  ) {
                    returnWoodlots = "No kitchen garden planted";
                  }
                  return returnWoodlots;
                }),

                field("Kitchen_Garden_Photo__c", function (state) {
                  var RejuvenationPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.kitchen_gardens.kitchen_garden_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.kitchen_gardens.kitchen_garden_photo"
                    )(state) !== ""
                  ) {
                    RejuvenationPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.kitchen_gardens.kitchen_garden_photo"
                      )(state);
                  }
                  return RejuvenationPhotoUrl;
                })
              )
            )
          );

          // Create results for Woodlots
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return (
                    dataValue("id")(state) + "coffee_drc_gca_kalehe_2022__woodlots"
                  );
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_drc_gca_kalehe_2022__woodlots"
                ),
                field("Result__c", function (state) {
                  var returnWoodlots = "";
                  if (
                    dataValue("form.best_practice_questions.woodlots.is_there_woodlots")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.woodlots.is_there_woodlots")(
                      state
                    ) == "1"
                  ) {
                    returnWoodlots = "Yes. There is a woodlot on the farm";
                  } else if (
                    dataValue("form.best_practice_questions.woodlots.is_there_woodlots")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.woodlots.is_there_woodlots")(
                      state
                    ) == "0"
                  ) {
                    returnWoodlots = "No woodlot planted";
                  }
                  return returnWoodlots;
                }),

                field("Woodlot_Photo__c", function (state) {
                  var RejuvenationPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.woodlots.woodlots_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.woodlots.woodlots_photo"
                    )(state) !== ""
                  ) {
                    RejuvenationPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.woodlots.woodlots_photo"
                      )(state);
                  }
                  return RejuvenationPhotoUrl;
                })
              )
            )
          );

          // Create results for Rejuvenation
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return (
                    dataValue("id")(state) + "coffee_drc_gca_kalehe_2022__rejuvenation"
                  );
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_drc_gca_kalehe_2022__rejuvenation"
                ),
                field("Result__c", function (state) {
                  var returnRejuventation = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) == 1
                  ) {
                    returnRejuventation = "Yes. There is a rejuvenated plot";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.rejuvenation.rejuvenation_plot"
                    )(state) == 0
                  ) {
                    returnRejuventation = "No rejuvenated plot";
                  }
                  return returnRejuventation;
                }),
                field("Result_Text__c", function (state) {
                  var returnRejuventation2 = "";
                  if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) == 1
                  ) {
                    returnRejuventation2 = "Yes. Sucker selection is complete";
                  } else if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_three")(
                      state
                    ) == 0
                  ) {
                    returnRejuventation2 = "No. Sucker selection has not been done";
                  }
                  return returnRejuventation2;
                }),

                field("Rejuvenation_Photo__c", function (state) {
                  var RejuvenationPhotoUrl = "";
                  if (
                    dataValue("form.best_practice_questions.rejuvenation.suckers_photo")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.rejuvenation.suckers_photo")(
                      state
                    ) !== ""
                  ) {
                    RejuvenationPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.rejuvenation.suckers_photo"
                      )(state);
                  }
                  return RejuvenationPhotoUrl;
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-DRC-GCA-Kalehe-2022C---Demo-Plot-Observations---CommCare----SalesForce:
        source_trigger: webhook
        target_job: Production---Coffee-DRC-GCA-Kalehe-2022C---Demo-Plot-Observations---CommCare----SalesForce
        condition_type: js_expression
        condition_label: Production Coffee DRC GCA Kalehe 2022C Demo Plot Observations
          CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "3c5b97f40ff54b72a3c85e221b6eb5c2"
        enabled: true
  Coffee---PR-2022---SalesForce----CommCare---Training-Sessions:
    name: Coffee - PR 2022 - SalesForce -- CommCare - Training Sessions
    jobs:
      Coffee---PR-2022---SalesForce----CommCare---Training-Sessions:
        name: Coffee - PR 2022 - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Training Sessions
          //Coffee :: PR C2022 | SalesForce --> CommCare | Training Sessions
          //{"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_puerto_rico_2022"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Session_Status", dataValue("sessionStatus")),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Module", dataValue("currentModule")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_pr_2022_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Module": dataValue("currentModule")(state),
                        "n0:Session_Status": dataValue("sessionStatus")(state),
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_pr_2022_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "mjuma",
                    "n2:userID": "f1ffc61aa02f30f7c078ddc5a95f48a9"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---PR-2022---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Coffee---PR-2022---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee PR 2022  SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_puerto_rico_2022"
        enabled: true
  Production---Coffee-KE-2024AC---SalesForce----CommCare---Training-Sessions:
    name: Production - Coffee KE 2024AC - SalesForce -- CommCare - Training Sessions
    jobs:
      Production---Coffee-KE-2024AC---SalesForce----CommCare---Training-Sessions:
        name: Production - Coffee KE 2024AC - SalesForce -- CommCare - Training Sessions
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |
          // Your job goes here.
          each(
              "$.data.trainingSessions[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Training Session",
                      "uiVersion": "1",
                      "version": "148",
                      "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Session_1_Date", dataValue("sessionOneDate")),
                  field("Session_2_Date", dataValue("sessionTwoDate")),
                  field("Training_Group_Name", dataValue("trainingGroupName")),
                  field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                  field("Module_Name", dataValue("trainingModuleName")),
                  field("Module_Number", dataValue("trainingModuleNumber")),
                  field("Current_Previous_Name", function(state){
                    return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                  }),
                  field("Training_Session_Name", function(state) {
                    return (
                      dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                    );
                  }),
                  field("Current_Previous", dataValue("currentPrevious")),
                  field("Case_Id", dataValue("sessionId")),
                  field("Parent_Id", dataValue("trainingGroupCommCareId")),
                  field("subcase_0", function(state) {
                    return {
                      "n0:case": {
                        "@": {
                          "case_id": dataValue("sessionId")(state),
                          "date_modified": new Date().toISOString(),
                          "user_id": "e926526fc13b126fffdb6d001f25b269",
                          "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                        },
                        "n0:create": {
                          "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                          "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                          "n0:case_type": "coffee_ke_2024ac_training_session"
                        },
                        "n0:update": {
                          "n0:Case_Id": dataValue("sessionId")(state),
                          "n0:Date": new Date().toISOString(),
                          "n0:Module_Name": dataValue("trainingModuleName")(state),
                          "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                          "n0:Current_Previous": dataValue("currentPrevious")(state),
                          "n0:Current_Previous_Name": function(){
                            return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                          },
                          "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                          "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                          "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                          "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                          "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                        },
                        "n0:index":  {
                          "n0:parent" : {
                            "@": {
                              "case_type": "coffee_ke_2024ac_training_group"
                            },
                            "#": dataValue("trainingGroupCommCareId")(state)
                          }
                        }
                      }
                    };
                  }),
                  field("n1:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                      }
                    };
                  }),
                  field("n2:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n2": "http://openrosa.org/jr/xforms"
                      },
                      "n2:deviceID": "867066029216796",
                      "n2:timeStart": new Date().toISOString(),
                      "n2:timeEnd": new Date().toISOString(),
                      "n2:username": "api",
                      "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024AC---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024AC---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee KE 2024AC SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024ac"
        enabled: true
  Production---Participants---ET-CREW-C2025---SalesForce----CommCare:
    name: Production - Participants - ET CREW C2025 - SalesForce -- CommCare
    jobs:
      Production---Participants---ET-CREW-C2025---SalesForce----CommCare:
        name: Production - Participants - ET CREW C2025 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.// JOB PURPOSE :: This is a job for sending Participants for Coffee - ET CREW C2024
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: ET CREW C2024
          // JOB NAME :: Production - Participants - ET CREW C2024 - SalesForce -- CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp__crew_c2024"}
          // AUTHOR :: Yves Mugenga | ymugenga@tns.org

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_crew_c2025_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_hwg_jcp_crew_c2025_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---ET-CREW-C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---ET-CREW-C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production - Participants - ET CREW C2025 - SalesForce -- CommCare
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_crew_c2025"
        enabled: true
  Production---Project-Role---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
    name: Production - Project Role - ET Regrow YG -Ag- C2023 - SalesForce --
      CommCare
    jobs:
      Production---Project-Role---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
        name: Production - Project Role - ET Regrow YG -Ag- C2023 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@v1.5.1'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending project roles for Coffee ET Yirga Regrow 2022C
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET Regrow Yirga (Ag) C2023
          // JOB NAME :: Production | Project Role - ET Regrow YG (Ag) C2023 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c2"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org
          // EDITED :: Emmanuel Mwaka | emwaka@tns.org

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_regrow_ag_c2_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:FFGs_Observed": null,
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Project-Role---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Project-Role---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Project Roles Regrow Yirga C2023 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c2"
        enabled: true
  "x-[archived]-Production---Participants---ET-HWG-JCP-C2022---SalesForce----CommCare":
    name: 'x [archived] Production - Participants - ET HWG JCP C2022 - SalesForce --
      CommCare'
    jobs:
      Production---Participants---ET-HWG-JCP-C2022---SalesForce----CommCare:
        name: Production - Participants - ET HWG JCP C2022 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@3.2.9'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee - ET HWG JCP C2022
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET HWG JCP C2022
          // JOB NAME :: Production | Participants - ET HWG JCP C2022 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_c2022"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_c2022_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_hwg_jcp_c2022_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---ET-HWG-JCP-C2022---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---ET-HWG-JCP-C2022---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Participants HWG JCP C2022 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_c2022"
        enabled: true
  Coffee---ZW-C3---C2021--SalesForce----CommCare---Training-Participants:
    name: Coffee - ZW C3 - C2021 -SalesForce -- CommCare - Training Participants
    jobs:
      Coffee---ZW-C3---C2021--SalesForce----CommCare---Training-Participants:
        name: Coffee - ZW C3 - C2021 -SalesForce -- CommCare - Training Participants
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Production - Coffee ZIM | SalesForce --> CommCare | Training Participants

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3F3D264F-4EC7-4C56-AC43-3E4A143E6C1E",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zw_c21_ag_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_zw_c21_ag_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-C3---C2021--SalesForce----CommCare---Training-Participants:
        source_trigger: webhook
        target_job: Coffee---ZW-C3---C2021--SalesForce----CommCare---Training-Participants
        condition_type: js_expression
        condition_label: Coffee ZW Ag C2021 SalesForce CommCare Training Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zw_c21_ag"
        enabled: true
  Production---Participants---ET-CREW-C2024---SalesForce----CommCare:
    name: Production - Participants - ET CREW C2024 - SalesForce -- CommCare
    jobs:
      Production---Participants---ET-CREW-C2024---SalesForce----CommCare:
        name: Production - Participants - ET CREW C2024 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.// JOB PURPOSE :: This is a job for sending Participants for Coffee - ET CREW C2024
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: ET CREW C2024
          // JOB NAME :: Production - Participants - ET CREW C2024 - SalesForce -- CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp__crew_c2024"}
          // AUTHOR :: Yves Mugenga | ymugenga@tns.org

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_crew_c2024_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_hwg_jcp_crew_c2024_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---ET-CREW-C2024---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---ET-CREW-C2024---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Participants CREW C2024 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_crew_c2024"
        enabled: true
  Production---Farm-Visit---KE---CommCare----Salesforce:
    name: Production - Farm Visit - KE - CommCare -- Salesforce
    jobs:
      Production---Farm-Visit---KE---CommCare----Salesforce:
        name: Production - Farm Visit - KE - CommCare -- Salesforce
        adaptor: '@openfn/language-salesforce@4.6.4'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |+
          //FARM VISIT JOB FOR ALL KENYA PROJECTS
          //Production - Farm Visit :: KE 2023 | CommCare --> Salesforce | Farm Visit Full


              //insert the farm visit record FT-Level
              each(
                  "$.data",
                  upsertIf(state.data.form['@name'] == "Farm Visit Full",
                  "Farm_Visit__c", "FV_Submission_ID__c",
                      fields(
                          field("Name__c", "FV-" + dataValue("id")(state)),
                          field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                          field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                          field("Training_Group__c", dataValue("form.case.@case_id")),
                          field("Primary_Farmer_PIMA_ID__c", dataValue("form.farm_being_visted")),
                          field("Date_Visited__c", dataValue("form.date_of_visit")),
                          field("visit_comments__c", dataValue("form.farm_visit_comments")),
                          field("Farmer_Trainer__c", dataValue("form.trainer")),
                          field("Field_Size__c", dataValue("form.field_size")),
                          field("Farm_Visit_Photo_Url__c", function(state) {
                              var farmVisitPhotoUrl = '';
                              if (dataValue("form.farm_visit_photo")(state) !== undefined && dataValue("form.farm_visit_photo")(state) !== '') {
                                  farmVisitPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.farm_visit_photo")(state);
                              }
                              return farmVisitPhotoUrl;
                          }),
                          field("Signature__c", function(state) {
                              var recorderSignatureUrl = '';
                              if (dataValue("form.signature_of_farmer_trainer")(state) !== undefined && dataValue("form.signature_of_farmer_trainer")(state) !== '') {
                                  recorderSignatureUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.signature_of_farmer_trainer")(state);
                              }
                              return recorderSignatureUrl;
                          }),
                          field('Location_GPS__Latitude__s', (state) => {
                              // define this once, it's constant...
                              const coords = state.data.form.gps_coordinates;
                              // write your contional
                              if (coords) {
                                return coords.split(" ")[0];
                              }
                              // the 'else' is unnecessary, return '' if there are no coords
                              return '';
                          }),
                          field('Location_GPS__Longitude__s', (state) => {
                              // define this once, it's constant...
                              const coords = state.data.form.gps_coordinates;
                              // write your contional
                              if (coords) {
                                return coords.split(" ")[1];
                              }
                              // the 'else' is unnecessary, return '' if there are no coords
                              return '';
                          }),
                          field('Altitude__c', (state) => {
                              // define this once, it's constant...
                              const coords = state.data.form.gps_coordinates;
                              // write your contional
                              if (coords) {
                                return coords.split(" ")[2];
                              }
                              // the 'else' is unnecessary, return '' if there are no coords
                          return '';
                          }),
                          relationship("Farm_Visited__r", "CommCare_Case_Id__c", dataValue("form.farm_being_visted")),
                          // relationship("Secondary_Farmer__r", "CommCare_Case_Id__c", function(state){
                          //     var secondaryFarmer = '';
                          //     if(dataValue("form.secondary_farmer_available")(state) == 'yes' && dataValue("form.secondary_farmer")(state) !== ''){
                          //       secondaryFarmer = dataValue("form.secondary_farmer");
                          //     }
                          //     return secondaryFarmer;
                          // })
                      )
                  )
              );
              
              each(
                "$.data",
                upsertIf(state.data.form['@name'] == 'Farm Visit - AA',
                "Farm_Visit__c", "FV_Submission_ID__c",
                    fields(
                        field("Name__c", "FV-" + dataValue("id")(state)),
                        field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                        field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                        field("Training_Group__c", dataValue("form.training_group")),
                        relationship("Farm_Visited__r", "CommCare_Case_Id__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          if(visitedFarmers){
                            return visitedFarmers.split(" ")[0];
                          }
                        }),
                        field("Primary_Farmer_PIMA_ID__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          if(visitedFarmers){
                            return visitedFarmers.split(" ")[0];
                          }
                        }),
                        
                        // relationship("Secondary_Farmer__r", "CommCare_Case_Id__c", function(state){
                        //   const visitedFarmers = dataValue("form.farm_being_visted")(state);
                        //   var result = null;
                        //   if(visitedFarmers.length > 1){
                        //     result = visitedFarmers.split(" ")[1];
                        //   }
                        //   return result;
                        // }),
                        
                        // field("Secondary_Farmer_PIMA_ID__c", function(state){
                        //   const visitedFarmers = dataValue("form.farm_being_visted")(state);
                        //   var result = null;
                        //   if(visitedFarmers.length > 1){
                        //     result = visitedFarmers.split(" ")[1];
                        //   }
                        //   return result;
                        // }),
                        field("Visit_Has_Training__c", dataValue("form.is_this_a_farm_training_visit")),
                      //  field("Training_Session__c", dataValue("form.training_session")),
                        // field("Other_Participants_Present__c", dataValue("form.any_other_participants_present")),
                        field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                        field("Date_Visited__c", dataValue("form.date_of_visit")),
                        field("visit_comments__c", dataValue("form.farm_visit_comments")),
                        field("Farmer_Trainer__c", dataValue("form.trainer")),
                        field("No_of_separate_coffee_fields__c", dataValue("form.opening_questions.number_of_separate_coffee_fields")),
                        field("Field_Age__c", dataValue("form.field_age")),
                        field("Field_Size__c", function(state){
                            var fieldSize = '';
                            if(dataValue("form.field_size")(state) !== undefined && dataValue("form.field_size")(state) !== ''){
                              fieldSize = dataValue("form.field_size");
                            }
                            else if(dataValue("form.field_size1")(state) !== undefined && dataValue("form.field_size1")(state) !== ''){
                              fieldSize = dataValue("form.field_size1");
                            }
                            
                            return fieldSize;
                            
                        }),
                        field("Farm_Visit_Photo_Url__c", function(state) {
                            var farmVisitPhotoUrl = '';
                            if (dataValue("form.farm_visit_photo")(state) !== undefined && dataValue("form.farm_visit_photo")(state) !== '') {
                                farmVisitPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.farm_visit_photo")(state);
                            }
                            return farmVisitPhotoUrl;
                        }),
                        field("Signature__c", function(state) {
                            var recorderSignatureUrl = '';
                            if (dataValue("form.signature_of_farmer_trainer")(state) !== undefined && dataValue("form.signature_of_farmer_trainer")(state) !== '') {
                                recorderSignatureUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.signature_of_farmer_trainer")(state);
                            }
                            return recorderSignatureUrl;
                        }),
                        field('Location_GPS__Latitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[0];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Location_GPS__Longitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[1];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Altitude__c', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[2];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                        return '';
                        }),
                        field('FV_AA_Farmer_1_Attended_Any_Training__c', function(state){
                          var result = '';
                          if(dataValue('form.farmer_1_questions.attended_training')(state) == 1){
                            result = 'Yes';
                          }
                          else if(dataValue('form.farmer_1_questions.attended_training')(state) == 0){
                            result = 'No';
                          }
                          return result;
                        }),
                        field('FV_AA_Farmer_2_Attended_Any_Training__c', function(state){
                          var result = '';
                          if(dataValue('form.farmer_2_questions.attended_training')(state) == 1){
                            result = 'Yes';
                          }
                          else if(dataValue('form.farmer_2_questions.attended_training')(state) == 0){
                            result = 'No';
                          }
                          return result;
                        }),
                        field('FV_AA_Farmer_1_Trainings_Attended__c', dataValue('form.farmer_1_questions.number_of_trainings')),
                        field('FV_AA_Farmer_2_Trainings_Attended__c', dataValue('form.farmer_2_questions.number_of_trainings')),
                        field('FV_AA_Visit_Done_By_AA__c', 'Yes'),
                        field('Training_Session__c', dataValue('form.training_session'))
                    )
                )
            );
            
                // Update Household Record - FV AA
            each("$.data", 
              upsertIf(state.data.form['@name'] == 'Farm Visit - AA', 
                "Household__c", "Id",
                fields(
                  field("Id", state.data.form.case["@case_id"]),
                  field("FV_AA_Visited__c", dataValue("form.case.update.FV_AA_Visited")(state)),
                  relationship(
                    "Latest_Farm_Visit_Record__r",
                    "FV_Submission_ID__c",
                    "FV-" + dataValue("id")(state)
                    )
                  )
                )
            );
              
              // update FV with secondary Farmer
              each(
                "$.data",
                upsertIf(
                  state.data.form.secondary_farmer !== "" && state.data.form.secondary_farmer_available == 'yes',
                  "Farm_Visit__c",
                  "FV_Submission_ID__c",
                  fields(
                    field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                    relationship("Secondary_Farmer__r", "CommCare_Case_Id__c", dataValue("form.secondary_farmer")),
                    field("Secondary_Farmer_PIMA_ID__c", dataValue("form.secondary_farmer"))
                    )
                  )
                );

                    //Best Practices :: Main Stem && Weeding &&  Shade Control && Record Keeping && Compost && Erosion Control && Nutrition && Safe Use of Pesticides
              each(
                  "$.data",
                  upsert("FV_Best_Practices__c", "FV_Submission_ID__c",
                      fields(
                          field("Name__c", "FV-" + dataValue("id")(state)),
                          field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                          relationship("Farm_Visit__r", "FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
            
                          //main stems
                          field("number_of_main_stems_on_majority_trees__c", dataValue("form.best_practice_questions.main_stems.number_of_main_stems_on_majority_trees")),
                      
                          field("photo_of_trees_and_average_main_stems__c", function(state){
                            
                            var mainStemsPhotoURL = "";
                            if(dataValue("form.best_practice_questions.main_stems.trees_and_main_stems_photo")(state) !== undefined && dataValue("form.best_practice_questions.main_stems.trees_and_main_stems_photo")(state) !== '') {
                              mainStemsPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.main_stems.trees_and_main_stems_photo")(state);  
                             }
                             return mainStemsPhotoURL;
                             
                          }),
            
                          //nutrition
                          field("Color_of_coffee_tree_leaves__c", function(state){
                            
                            var colorOfCoffeeLeaves = dataValue("form.best_practice_questions.nutrition.are_the_leave_green_or_yellow_pale_green")(state);
                            var returnColorOfCoffeeLeaves = "";
                            
                            if(colorOfCoffeeLeaves !== undefined && colorOfCoffeeLeaves !== '' && colorOfCoffeeLeaves == 0){
                              
                              returnColorOfCoffeeLeaves = "5% or more (5 or more in 100) of the leaves are yellow, pale green or brown.";
                              
                            }
            
                            if(colorOfCoffeeLeaves !== undefined && colorOfCoffeeLeaves !== '' && colorOfCoffeeLeaves == 1){
                              
                              returnColorOfCoffeeLeaves = "Nearly all leaves are dark green and less than 5% (less than 5 in 100) are yellow, pale green, or brown.";
                              
                            }
            
                            return returnColorOfCoffeeLeaves;
            
                          }),
            
                          //weeding
                          field("how_many_weeds_under_canopy_and_how_big__c", function(state){
                            
                            var weedsUnderCanopy = dataValue("form.best_practice_questions.weeding.how_many_weeds_under_canopy_and_how_big_are_they")(state);
                            var returnWeedsUnderCanopy = "";
                    
                            if(weedsUnderCanopy == 1){
                    
                              returnWeedsUnderCanopy = "Few small weeds (less than 30cm) under the tree canopy";
                    
                            }
                    
                            if(weedsUnderCanopy == 2){
                    
                              returnWeedsUnderCanopy = "Many small weeds under the tree canopy (ground is covered with weeds)";
                    
                            }
                    
                            if(weedsUnderCanopy == 3){
                    
                              returnWeedsUnderCanopy = "Many large weeds under the tree canopy (ground is covered with weeds)";
                    
                            }
            
                              return returnWeedsUnderCanopy;
            
                          }),
            
                         field("Have_herbicides_been_used_on_the_field__c", dataValue("form.best_practice_questions.weeding.used_herbicides")),
                          field("photo_of_weeds_under_the_canopy__c", function(state){
                            
                            var weedsPhotoUrl = dataValue("form.best_practice_questions.weeding.weeds_under_the_canopy_photo")(state);
                            var returnWeedsPhotoUrl = "";
                            
                            if (weedsPhotoUrl !== undefined && weedsPhotoUrl !== '') {
                                returnWeedsPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + weedsPhotoUrl;
                            }
                            
                            return returnWeedsPhotoUrl;
                            
                          }),

                          // Safe use of pesticides

                          field("used_pesticide__c", function(state){
                              var usedPesticide = dataValue("form.best_practice_questions.safe_use_of_pesticides.used_pesticides")(state);
                              var returnUsedPesticide = "";
                              if (usedPesticide == 1){
                                  returnUsedPesticide = "Yes";
                              }
                              else if (usedPesticide == 0) {
                                  returnUsedPesticide = "No";
                              }
                              return returnUsedPesticide;
                          }),

                          field("pesticide_number_of_times__c", dataValue("form.best_practice_questions.safe_use_of_pesticides.pesticide_number_of_times")),
                          field("pesticide_spray_type__c", function(state){
                              const sprayType = dataValue("form.best_practice_questions.safe_use_of_pesticides.pesticide_spray_type")(state);
                              var returnSprayType = "";

                              if(sprayType === "1"){
                                  returnSprayType = "Routine spray";
                              }
                              else if(sprayType === "2"){
                                  returnSprayType = "After scouting and seeing a pest";
                              }
                              return returnSprayType;
                          }),
            
                          //shade management
                          field("level_of_shade_present_on_the_farm__c", function(state){
                            
                            var levelOfShadeOnPlot = dataValue("form.best_practice_questions.shade_control.level_of_shade_present_on_the_farm")(state);
                            var returnLevelOfShadeOnPlot = "";
                            
                            if(levelOfShadeOnPlot == 0){
                              
                              returnLevelOfShadeOnPlot = "NO shade, less than 5%";
                              
                            }
                            
                            if(levelOfShadeOnPlot == 1){
                              
                              returnLevelOfShadeOnPlot = "Light shade, 5 to 20%";
                              
                            }
                            
                            if(levelOfShadeOnPlot == 2){
                              
                              returnLevelOfShadeOnPlot = "Medium shade, 20 to 40%";
                              
                            }
                            
                            if(levelOfShadeOnPlot == 3){
                              
                              returnLevelOfShadeOnPlot = "Heavy shade, over 40%";
                              
                            }
                            
                            return returnLevelOfShadeOnPlot;
            
                          }),
                          
                          field("photo_of_level_of_shade_on_the_plot__c", function(state) {
                            
                            var shadePhotoUrl = '';
                            if(dataValue("form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot")(state) !== undefined && dataValue("form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot")(state) !== '') {
                              shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.shade_control.photo_of_level_of_shade_on_the_plot")(state);
                              
                            }
                            
                            return shadePhotoUrl;
                            
                          }),  
            
                          //compost manure
                          field("do_you_have_compost_manure__c", function(state){
                            
                            var haveCompostManure = dataValue("form.best_practice_questions.compost.do_you_have_compost_manure")(state);
                            var returnHaveCompostManure = "";
                            
                            if(haveCompostManure !== undefined && haveCompostManure !== '' && haveCompostManure == 0){
                              
                              returnHaveCompostManure = "No";
                              
                            }
                            
                            if(haveCompostManure !== undefined && haveCompostManure !== '' && haveCompostManure == 1){
                              
                              returnHaveCompostManure = "Yes";
                              
                            }
                            
                            return returnHaveCompostManure;
            
                          }),
            
                          field("photo_of_the_compost_manure__c", function(state) {
                            
                            var compostPhotoUrl = '';
                            if(dataValue("form.best_practice_questions.compost.photo_of_the_compost_manure")(state) !== undefined && dataValue("form.best_practice_questions.compost.photo_of_the_compost_manure")(state) !== '') {
                              compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.compost.photo_of_the_compost_manure")(state);
                              
                            }
                            
                            return compostPhotoUrl;
                            
                          }),
            
                          //erosion control
                          field("Stabilizing_Grasses_Photo_URL__c", function(state){                    
            
                              var sgPhotoURL = "";
                              if(dataValue("form.best_practice_questions.erosion_control.stabilizing_grasses_image")(state) !== undefined && dataValue("form.best_practice_questions.erosion_control.stabilizing_grasses_image")(state) !== '') {
                                  sgPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.erosion_control.stabilizing_grasses_image")(state); 
                              } 
            
                              return sgPhotoURL;                
                          }),
                          field("Mulch_Photo_URL__c", function(state){                    
            
                              var mulchPhotoURL = "";
                              if(dataValue("form.best_practice_questions.erosion_control.mulch_image")(state) !== undefined && dataValue("form.best_practice_questions.erosion_control.mulch_image")(state) !== '') {
                                  mulchPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.erosion_control.mulch_image")(state); 
                              } 
            
                              return mulchPhotoURL;                
                          }),
                          field("Water_Traps_Photo_URL__c", function(state){                    
            
                              var wtPhotoURL = "";
                              if(dataValue("form.best_practice_questions.erosion_control.water_traps_or_trenches_image")(state) !== undefined && dataValue("form.best_practice_questions.erosion_control.water_traps_or_trenches_image")(state) !== '') {
                                  wtPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.erosion_control.water_traps_or_trenches_image")(state); 
                              } 
            
                              return wtPhotoURL;                
                          }),
                          field("Physical_Barriers_Photo_URL__c", function(state){                    
            
                              var pbPhotoURL = "";
                              if(dataValue("form.best_practice_questions.erosion_control.physical_barriers_image")(state) !== undefined && dataValue("form.best_practice_questions.erosion_control.physical_barriers_image")(state) !== '') {
                                  pbPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.erosion_control.physical_barriers_image")(state); 
                              } 
            
                              return pbPhotoURL;                
                          }),
                          field("Terraces_Photo_URL__c", function(state){                    
            
                              var terracesPhotoURL = "";
                              if(dataValue("form.best_practice_questions.erosion_control.terraces_image")(state) !== undefined && dataValue("form.best_practice_questions.erosion_control.terraces_image")(state) !== '') {
                                  terracesPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.erosion_control.terraces_image")(state); 
                              } 
            
                              return terracesPhotoURL;                
                          }),
                          field("Contour_Planting_Photo_URL__c", function(state){                    
            
                              var cpPhotoURL = "";
                              if(dataValue("form.best_practice_questions.erosion_control.contour_planting_image")(state) !== undefined && dataValue("form.best_practice_questions.erosion_control.contour_planting_image")(state) !== '') {
                                  cpPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.erosion_control.contour_planting_image")(state); 
                              } 
            
                              return cpPhotoURL;                
                          }),
                          field("Cover_Crop_Photo_URL__c", function(state){                    
            
                              var ccPhotoURL = "";
                              if(dataValue("form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image")(state) !== undefined && dataValue("form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image")(state) !== '') {
                                  ccPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.erosion_control.bean_or_arachis_cover_crop_image")(state); 
                              } 
            
                              return ccPhotoURL;                
                          }),
            
                          //record keeping
                          field("do_you_have_a_record_book__c", function(state){
                            
                            var haveRecordBook = dataValue("form.best_practice_questions.record_keeping.do_you_have_a_record_book")(state);
                            var returnHaveRecordBook = "";
                            
                            if(haveRecordBook == 0){
                              
                              returnHaveRecordBook = "No";
                              
                            }
                            
                            if(haveRecordBook == 1){
                              
                              returnHaveRecordBook = "Yes";
                              
                            }
                            
                            return returnHaveRecordBook;
            
                          }),
            
                          field("are_there_records_on_the_record_book__c", function(state){
                            
                            var recordsOnRecordBook = dataValue("form.best_practice_questions.record_keeping.are_there_records_on_the_record_book")(state);
                            var returnRecordsOnRecordBook = "";
                            
                            if(recordsOnRecordBook !== undefined && recordsOnRecordBook !== '' && recordsOnRecordBook == 0){
                              
                              returnRecordsOnRecordBook = "No";
                              
                            }
                            
                            if(recordsOnRecordBook !== undefined && recordsOnRecordBook !== '' && recordsOnRecordBook == 1){
                              
                              returnRecordsOnRecordBook = "Yes";
                              
                            }
                            
                            return returnRecordsOnRecordBook;
                            
                          }),
            
                          field("take_a_photo_of_the_record_book__c", function(state){
                            
                            var recordBookPhotoUrl = '';
                            if(dataValue("form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book")(state) !== undefined && dataValue("form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book")(state) !== '') {
                              recordBookPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book")(state) !== undefined && dataValue("form.best_practice_questions.record_keeping.take_a_photo_of_the_record_book")(state);
                           
                            }
                            
                            return recordBookPhotoUrl;
                            
                          })
                      )
                  )
              );

          	//Farm Visit Best Practice Results
              //loop through methods of erosion control and insert into database :: Erosion Control BP

              beta.each(

                  function(state) {
            
                      //incoming erosion data
                      var best_practice_results_data = dataValue("form.best_practice_questions.erosion_control.methods_of_erosion_control")(state);
            
                      if (best_practice_results_data !== undefined) {
            
                          return best_practice_results_data.split(" ").map(
                            
                              function(resultId) {
                                  return {
                                      result_data: resultId,
                                      best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_erosion_" + resultId,
                                      farm_visit_submission: "FV-" + dataValue("id")(state)
                                  };
                              }
                              
                          );
            
                      }
                  },
                  upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                      fields(
                          field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                          field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                          relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                          field("Best_Practice_Result_Type__c", "Erosion Control"),//this is the actual result type
                          field("Best_Practice_Result_Description__c", function(state){
                            
                              var returnResults = "";
                            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){
            
                                  returnResults = "Stabilizing grasses";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){
            
                                  returnResults = "Mulch";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){
            
                                  returnResults = "Water traps or trenches";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){
            
                                  returnResults = "Physical barriers. (e.g. rocks)";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){
            
                                  returnResults = "Terraces";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){
            
                                  returnResults = "Contour planting";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){
            
                                  returnResults = "Bean or Arachis cover crop between the rows";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){
            
                                  returnResults = "No erosion control method seen";
            
                              }
                              
                              return returnResults;
                            
                          })                
                      )
                  )
              );
            
            
              //loop through chemical/fertilizier applied and insert into database :: Nutrition BP
              beta.each(
            
                  function(state) {
            
                      //incoming chemical/fertilizer used data
                      var best_practice_results_data = dataValue("form.best_practice_questions.nutrition.type_chemical_applied_on_coffee_last_12_months")(state);
            
                      if (best_practice_results_data !== undefined) {
            
                          return best_practice_results_data.split(" ").map(
                            
                              function(resultId) {
                                  return {
                                      result_data: resultId,
                                      best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_fertilizer_" + resultId,
                                      farm_visit_submission: "FV-" + dataValue("id")(state)
                                  };
                              }
                              
                          );
            
                      }
                  },
                  upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                      fields(
                          field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                          field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                          relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                          field("Best_Practice_Result_Type__c", "Chemicals and Fertilizers Applied"), //this is the actual result type
                          field("Best_Practice_Result_Description__c", function(state){
                            
                              var returnResults = "";
                            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){
            
                                  returnResults = "Compost";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){
            
                                  returnResults = "Manure";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){
            
                                  returnResults = "NPK 22:6:12";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){
            
                                  returnResults = "NPK 17:17:17";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){
            
                                  returnResults = "Other NPK";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){
            
                                  returnResults = "Zinc/Boron Foliar feed";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){
            
                                  returnResults = "General Foliar feed";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "8"){
            
                                  returnResults = "LIME";
            
                              }

                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "9"){
            
                                  returnResults = "CAN";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "10"){
            
                                  returnResults = "Urea";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){
            
                                  returnResults = "Did NOT apply any fertilizer in past 12 months";
            
                              }
            
                              return returnResults;
                            
                          })
                      )
                  )
            
              );
            
            
              //loop through methods of controlling coffee berry borer :: Integrated Pest and Disease Management BP
              beta.each(
            
                  function(state) {
            
                      //incoming coffee berry borer data
                      var best_practice_results_data = dataValue("form.best_practice_questions.pest_disease_management.methods_of_controlling_coffee_berry_borer")(state);
            
                      if (best_practice_results_data !== undefined) {
            
                          return best_practice_results_data.split(" ").map(
                            
                              function(resultId) {
                                  return {
                                      result_data: resultId,
                                      best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_cbb_" + resultId,
                                      farm_visit_submission: "FV-" + dataValue("id")(state)
                                  };
                              }
                              
                          );
            
                      }
                  },
                  upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                      fields(
                          field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                          field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                          relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                          field("Best_Practice_Result_Type__c", "Management of Coffee Berry Borer (CBB)"), //this is the actual result type
                          field("Best_Practice_Result_Description__c", function(state){
                            
                              var returnResults = "";
                            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){
            
                                  returnResults = "Reduce pesticide use and/or encourage natural predators and parasites - beneficial insects.";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){
            
                                  returnResults = "Strip all berries at the end of harvest, known as crop hygiene";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){
            
                                  returnResults = "Harvest ripe cherries regularly - to reduce pest and disease levels";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){
            
                                  returnResults = "Use berry borer traps";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){
            
                                  returnResults = "Collect fallen berries at the end of the season - crop hygiene";
            
                              }
                              
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){
            
                                  returnResults = "Feed the tree well to keep it healthy";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){
            
                                  returnResults = "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "8"){
            
                                  returnResults = "Prune to keep the canopy open";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "9"){
            
                                  returnResults = "Renovate (new planting or grafting) or rejuvenate regularly to keep main stems less than 8 years old";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "10"){
            
                                  returnResults = "Plant and grow disease resistant varieties e.g. Ruiru 11 and Batian";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "11"){
            
                                  returnResults = "Smooth the bark to reduce egg laying sites for While Coffee Borer";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "12"){
            
                                  returnResults = "Spray regular pesticides";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "13"){
            
                                  returnResults = "Spray homemade herbal or botanical pesticides";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){
            
                                  returnResults = "Does not know any methods";
            
                              }
            
                              return returnResults;
                            
                          })
                      )
                  )
            
              );
              
            
              //loop through pruning methods :: Pruning BP  
                beta.each(
            
                  function(state) {
            
                      //incoming pruning data
                      var best_practice_results_data = dataValue("form.best_practice_questions.pruning.pruning_method_on_majority_trees")(state) || "";
            
                      if (best_practice_results_data !== undefined) {
            
                          return best_practice_results_data.split(" ").map(
                            
                              function(resultId) {
                                  return {
                                      result_data: resultId,
                                      best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_pruning_" + resultId,
                                      farm_visit_submission: "FV-" + dataValue("id")(state),
                                      field_age: dataValue("form.field_age")(state)
                                  };
                              }
                              
                          );
            
                      }
                  },
                  upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                      fields(
                          field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                          field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                          relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                          field("Best_Practice_Result_Type__c", "Pruning"), //this is the actual result type
                          field("Best_Practice_Result_Description__c", function(state){
                            
                              var returnResults = "";
                            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){
            
                                  returnResults = "Centers opened";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){
            
                                  returnResults = "Unwanted suckers removed";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){
            
                                  returnResults = "Dead branches removed";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){
            
                                  returnResults = "Branches touching the ground removed";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){
            
                                  returnResults = "Broken / unproductive stems and/or branches removed";
            
                              }
            
                              if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){
            
                                  returnResults = "No pruning methods used";
            
                              }

                              return returnResults;
                            
                          })
                      )
                  )
            
              );
            
              beta.each(
            
                function(state) {
            
                    //incoming weeding data
                    var best_practice_results_data = dataValue("form.best_practice_questions.weeding.which_product_have_you_used")(state) || "";
                    if (best_practice_results_data !== undefined) {
            
                        return best_practice_results_data.split(" ").map(
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_weeding_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state),
                                };
                            }  
                        );
                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                        field("Best_Practice_Result_Type__c", "Weeding"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){
            
                                returnResults = "Glyphosate (Eg Round Up)";
            
                            }
            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){
            
                                returnResults = "Paraquat (Eg. Gramoxone)";
            
                            }
                            return returnResults;
                          
                        })
                    )
                )
            
            );

            // Other Herbicide Handler
            beta.each(
            
              function(state) {

                  //incoming weeding data
                  var otherProduct = dataValue("form.best_practice_questions.weeding.ask_which_other_product_have_you_used")(state) || "";
                  if (otherProduct !== undefined) {

                      return otherProduct.split(",").map(
                          function(resultId) {
                              return {
                                  result_data: resultId.trim(),
                                  best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_weeding_" + resultId.trim(),
                                  farm_visit_submission: "FV-" + dataValue("id")(state),
                              };
                          }  
                      );
                  }
              },
              upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                  fields(
                      field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                      field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                      relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                      field("Best_Practice_Result_Type__c", "Weeding"), //this is the actual result type
                      field("Best_Practice_Result_Description__c", dataValue("result_data"))
                  )
              )
          );
              
              
              //upsert training session
            /*    each(
                  "$.data",
                  upsert("Training_Session__c", "CommCare_Case_Id__c",
                      fields(
                          field("CommCare_Case_Id__c", dataValue("form.training_session")),
                          field("Updated_from_CommCare__c", true)
                      )
                  )
              );
            */
            
            //}
            
            
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Production---Farm-Visit---KE---CommCare----Salesforce:
        source_trigger: webhook
        target_job: Production---Farm-Visit---KE---CommCare----Salesforce
        condition_type: js_expression
        condition_label: 'Production - Farm Visit KE | CommCare Salesforce'
        condition_expression: |
          state.data.form["survey_type"] == "Farm Visit Full - KE"
        enabled: true
  Production---Training-Groups---ET-HWG-JCP-C2023---SalesForce----CommCare:
    name: Production - Training Groups - ET HWG JCP C2023 - SalesForce -- CommCare
    jobs:
      Production---Training-Groups---ET-HWG-JCP-C2023---SalesForce----CommCare:
        name: Production - Training Groups - ET HWG JCP C2023 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee - ET HWG JCP C2023
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET HWG JCP C2023
          // JOB NAME :: Production | Training Groups - ET HWG JCP C2023 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"C_ET_HWG_BK_2022C"}
          // AUTHOR :: Yves Mugenga | ymugenga@tns.org

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_c2023_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_hwg_jcp_c2023_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Groups---ET-HWG-JCP-C2023---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Groups---ET-HWG-JCP-C2023---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Groups HWG JCP C2023 Salesforce CommCare
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_c2023"
        enabled: true
  Production---Project-Role---ET-Regrow-YG--Ag--C2024---SalesForce----CommCare:
    name: Production - Project Role - ET Regrow YG -Ag- C2024 - SalesForce --
      CommCare
    jobs:
      Production---Project-Role---ET-Regrow-YG--Ag--C2024---SalesForce----CommCare:
        name: Production - Project Role - ET Regrow YG -Ag- C2024 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending project roles for Coffee Herz Cohort 2024
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET Regrow Yirga (Ag) C2024
          // JOB NAME :: Production | Project Role - ET Regrow YG (Ag) C2024 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c3"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_regrow_ag_c3_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:FFGs_Observed": null,
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Project-Role---ET-Regrow-YG--Ag--C2024---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Project-Role---ET-Regrow-YG--Ag--C2024---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Project Roles Regrow Yirga C2024 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c3"
        enabled: true
  Production---Coffee-ZIM---SalesForce----CommCare---Training-Participants:
    name: Production - Coffee ZIM - SalesForce -- CommCare - Training Participants
    jobs:
      Production---Coffee-ZIM---SalesForce----CommCare---Training-Participants:
        name: Production - Coffee ZIM - SalesForce -- CommCare - Training Participants
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Production - Coffee ZIM | SalesForce --> CommCare | Training Participants

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3F3D264F-4EC7-4C56-AC43-3E4A143E6C1E",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zim_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_zim_training-group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---SalesForce----CommCare---Training-Participants:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---SalesForce----CommCare---Training-Participants
        condition_type: js_expression
        condition_label: 'Production - Coffee ZIM | SalesForce --> CommCare | Training
          Participants'
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zim"
        enabled: true
  Coffee---ZW-IFC-2024C---SalesForce----CommCare---Project-Roles:
    name: Coffee - ZW IFC 2024C - SalesForce -- CommCare - Project Roles
    jobs:
      Coffee---ZW-IFC-2024C---SalesForce----CommCare---Project-Roles:
        name: Coffee - ZW IFC 2024C - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW C4 - C2024 | SalesForce --> CommCare | Project Roles
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_zw_2024c"}


          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("FFGs_Observed", null),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zw_2024c_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state),
                      "n0:FFGs_Observed": null
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-IFC-2024C---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Coffee---ZW-IFC-2024C---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee ZW IFC 2024C SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zw_2024c"
        enabled: true
  Production---Coffee-HWG-C2023---CommCare----SalesForce---Demo-Plot-Observations:
    name: Production - Coffee HWG C2023 - CommCare -- SalesForce - Demo Plot
      Observations
    jobs:
      Production---Coffee-HWG-C2023---CommCare----SalesForce---Demo-Plot-Observations:
        name: Production - Coffee HWG C2023 - CommCare -- SalesForce - Demo Plot
          Observations
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //Demo Plot Observations
          //Production - Coffee JCP HWG C2023 | Demo Plot Observations | CommCare --> SalesForce


          each(
          "$.data",
            upsert("Observation__c", "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function(state) {
                  var dempPlotPhotoUrl = '';
                  if(dataValue("form.Demo_Plot_Photo")(state) !== undefined && dataValue("form.Demo_Plot_Photo")(state) !== '') {
                    dempPlotPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Demo_Plot_Photo")(state);  
                  }
                  return dempPlotPhotoUrl;
                }),
                
                field("Observer_Signature__c", function(state) {
                  var observerSignatureUrl = '';
                  if(dataValue("form.agronomy_advisor_signature")(state) !== undefined && dataValue("form.agronomy_advisor_signature")(state) !== '') {
                    observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.agronomy_advisor_signature")(state);  
                  }
                  return observerSignatureUrl;
                }),
                
                field("Observation_Location__Latitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[0]; 
                  }
                }),
                field("Observation_Location__Longitude__s", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[1]; 
                  }
                }),
                field("Altitude__c", function(state) {
                  if(dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
                    return coordinates[2]; 
                  }
                })
              )
            )
          ),

          //HERE WE CAPTURE ALL THE DPO OBSERVATION RESULTS
          // Creates results for Stumped Trees


          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__stumped_trees";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__stumped_trees"),
              field("Result__c", dataValue("form.best_practice_questions.stumped.stumped_trees"))
            ))),

          // Create results for Sucker Selection
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__sucker_selection_taken_place";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__sucker_selection_taken_place"),
              field("Result__c", dataValue("form.best_practice_questions.sucker_selection.Sucker_Selection_Taken_Place")),
              field("Result_number__c", dataValue("form.best_practice_questions.sucker_selection.number_of_suckers"))
              
            ))),



          // Create results for Compost Heap
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__compost_heap"),
              field("Result__c", dataValue("form.best_practice_questions.compost_heap.present_compost_heap")),
              field("Compost_Photo__c", function(state) {
                  var compostPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== undefined && dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state) !== '') {
                    compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.compost_heap.compost_heap_photo")(state);  
                  }
                  return compostPhotoUrl;
                })
                
              
            ))),


          // Create results for Weed Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__weed_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__weed_management"),
              field("Result__c", dataValue("form.best_practice_questions.weed_management.has_the_demo_plot_been_dug")),
              field("Result_Text__c", dataValue("form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy")),
              field("Result_Text_Two__c", dataValue("form.best_practice_questions.weed_management.how_big_are_the_weeds")),
              field("Weed_Management_Photo__c", function(state) {
                  var weedsPhotoUrl = '';
                  if(dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state) !== '') {
                    weedsPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.weed_management.weed_management_photo")(state);  
                  }
                  return weedsPhotoUrl;
                })
            ))),


          // Create results for Shade Management
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__shade_management";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__shade_management"),
              field("Result__c", dataValue("form.best_practice_questions.shade_management.level_of_shade_present")),
              field("Shade_Management_Photo__c", function(state) {
                  var shadePhotoUrl = '';
                  if(dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== undefined && dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state) !== '') {
                    shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.best_practice_questions.shade_management.shade_management_photo")(state);  
                  }
                  return shadePhotoUrl;
                })
            ))),


          // Create results for Mulch
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__mulch";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__mulch"),
              field("Result__c", dataValue("form.best_practice_questions.mulch.mulch_under_the_canopy")),
              field("Result_Text__c", dataValue("form.best_practice_questions.mulch.thickness_of_mulch"))
            ))),


          // Create results for Vetiver Planted
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_global__vetiver_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_global__vetiver_planted"),
              field("Result__c", dataValue("form.best_practice_questions.vetiver.vetiver_planted"))
            )));

          /*
          // Create results for Shade_Trees_Planted {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__shade_trees_planted";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__shade_trees_planted"),
              field("Result__c", dataValue("form.Shade_Trees_Planted"))
            ))),


          // Create results for Compost_Heap {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__compost_heap";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__compost_heap"),
              field("Result__c", dataValue("form.Compost_Heap")),
              field("Photo_URL__c", function(state) {
                  var compostHeapPhotoUrl = '';
                  if(dataValue("form.Photo_of_Compost_Heap")(state) !== undefined && dataValue("form.Photo_of_Compost_Heap")(state) !== '') {
                    compostHeapPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo_of_Compost_Heap")(state);  
                  }
                  return compostHeapPhotoUrl;
                })
            ))),


          // Create results for Vertiver_Grass_on_Demo_Plot {Yes || No}
          each(
            "$.data",  
            upsert("Observation_Result__c", "Submission_ID__c",
              fields(
              field("Submission_ID__c", function(state) {
                return dataValue("id")(state) + "coffee_drc__vertiver_grass_on_demo_plot";
              }),
              field("Observation__c",function(state){
                return state.references[state.references.length-1].id;
              }),
              field("RecordTypeId", "01224000000gQe5AAE"),
              relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc__vertiver_grass_on_demo_plot"),
              field("Result__c", dataValue("form.Vertiver_Grass_on_Demo_Plot"))
            )));

          // Version control
          */

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-HWG-C2023---CommCare----SalesForce---Demo-Plot-Observations:
        source_trigger: webhook
        target_job: Production---Coffee-HWG-C2023---CommCare----SalesForce---Demo-Plot-Observations
        condition_type: js_expression
        condition_label: Coffee HWG C2023 Demo Plot Observations CommCare -SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "d63cdcf6b9d849548413ca356871cd3a"
        enabled: true
  "x-[archived]-Coffee-DRC---GCA-TNS-2022---Training-Sessions---Salesforce----CommCare":
    name: 'x [archived] Coffee DRC - GCA TNS 2022 - Training Sessions - Salesforce
      -- CommCare'
    jobs:
      Coffee-DRC---GCA-TNS-2022---Training-Sessions---Salesforce----CommCare:
        name: Coffee DRC - GCA TNS 2022 - Training Sessions - Salesforce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee DRC - GCA TNS 2022 | Training Sessions | Salesforce --> CommCare
          //coffee_drc_gca_tns_2022
          //{"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_drc_gca_tns_2022"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_drc_gca_tns_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_drc_gca_tns_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee-DRC---GCA-TNS-2022---Training-Sessions---Salesforce----CommCare:
        source_trigger: webhook
        target_job: Coffee-DRC---GCA-TNS-2022---Training-Sessions---Salesforce----CommCare
        condition_type: js_expression
        condition_label: Coffee DRC GCA TNS 2022 Training Sessions Salesforce CommCare
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gca_tns_2022"
        enabled: true
  Production---Coffee-DRC-GCA-Kabare-C2023---SalesForce----CommCare---Training-Groups:
    name: Production - Coffee DRC GCA Kabare C2023 - SalesForce -- CommCare -
      Training Groups
    jobs:
      Production---Coffee-DRC-GCA-Kabare-C2023---SalesForce----CommCare---Training-Groups:
        name: Production - Coffee DRC GCA Kabare C2023 - SalesForce -- CommCare -
          Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Training Group = CUG.
          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_gca_kabare_c2023_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_drc_gca_kabare_c2023_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-DRC-GCA-Kabare-C2023---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Production---Coffee-DRC-GCA-Kabare-C2023---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Production Coffee DRC GCA Kabare C2023 SalesForce CommCare
          Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gca_kabare_c2023"
        enabled: true
  Coffee---PR-2022---SalesForce----CommCare---Training-Groups:
    name: Coffee - PR 2022 - SalesForce -- CommCare - Training Groups
    jobs:
      Coffee---PR-2022---SalesForce----CommCare---Training-Groups:
        name: Coffee - PR 2022 - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Training Group Job 
          //Coffee :: PR 2022 | SalesForce --> CommCare | Training Groups
          //{"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_puerto_rico_2022"}

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/E70C61DB-A15E-4466-B187-02B2FCB6A135",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("Status", dataValue("groupStatus")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Municipality", dataValue("municipality")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_pr_2022_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:Status": dataValue("groupStatus")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_pr_2022_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "f1ffc61aa02f30f7c078ddc5a95f48a9",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "f1ffc61aa02f30f7c078ddc5a95f48a9"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---PR-2022---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Coffee---PR-2022---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee PR 2022 SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_puerto_rico_2022"
        enabled: true
  Production---Training-Groups---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
    name: Production - Training Groups - ET Regrow YG -Ag- C2023 - SalesForce --
      CommCare
    jobs:
      Production---Training-Groups---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
        name: Production - Training Groups - ET Regrow YG -Ag- C2023 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@v1.5.1'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee ET - Regrow Yirga Agronomy C2023
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET Regrow Yirga (Ag) C2023
          // JOB NAME :: Production | Training Groups - ET Regrow YG (Ag) C2023 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c2"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org
          // EDITED :: Emmanuel Mwaka | emwaka@tns.org

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_regrow_ag_c2_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_regrow_ag_c2_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Groups---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Groups---ET-Regrow-YG--Ag--C2023---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Groups Regrow Yirga C2023 Salesforce CommCare
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c2"
        enabled: true
  "x-[archived]-CC-OFn-MySQL-Connection":
    name: 'x [archived] CC-OFn-MySQL Connection'
    jobs:
      CC-OFn-MySQL-Connection:
        name: CC-OFn-MySQL Connection
        adaptor: '@openfn/language-mysql@v1.4.7'
        credential: null
        body: |
          execute(
            upsert('openfn_test', 
              fields(
                field('enumerator', dataValue('form.enumerator')(state)),
                field('partner_name', dataValue('form.partner_name')(state)),
                field('partnership_area', function(state){
                  var result = "";
                  var curr_data = dataValue('form.partnership_area')(state);
                  curr_data = curr_data.replace(" ", ", ");
                  console.log(curr_data);
                  var oth_data = dataValue('form.specify_partnership_area')(state);
                  console.log(oth_data);
                  if(curr_data.includes("other")){
                    result = curr_data.replace("other", ", ", oth_data);
                  }
                  else {
                    result = curr_data;
                  }
                  console.log(result);
                  return result;
                }),
                // field('product_type', dataValue('form.case.@case_id')(state)),
                // field('business_type', dataValue('form.case.@case_id')(state)),
                // field('services_type', dataValue('form.case.@case_id')(state))
              )
            )
          )(state);

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->CC-OFn-MySQL-Connection:
        source_trigger: webhook
        target_job: CC-OFn-MySQL-Connection
        condition_type: js_expression
        condition_label: CC OFn MySQL Connection
        condition_expression: |
          state.data["app_id"] == "739e3f083b3c1aaab1a6cd10d177b9c2"
        enabled: true
  Production---Project-Role---ET-GAC-CREW-C2025---SalesForce----CommCare:
    name: Production - Project Role - ET GAC CREW C2025 - SalesForce -- CommCare
    jobs:
      Production---Project-Role---ET-GAC-CREW-C2025---SalesForce----CommCare:
        name: Production - Project Role - ET GAC CREW C2025 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending project roles
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET GAC CREW C2025
          // JOB NAME :: Production | Project Role - ET GAC CREW C2025 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_crew_c2025"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_crew_c2025_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:FFGs_Observed": null,
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Project-Role---ET-GAC-CREW-C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Project-Role---ET-GAC-CREW-C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Project Role ET GAC CREW C2025 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_crew_c2025"
        enabled: true
  Coffee---ZW-C3---C2021---SalesForce----CommCare---Training-Groups:
    name: Coffee - ZW C3 - C2021 - SalesForce -- CommCare - Training Groups
    jobs:
      Coffee---ZW-C3---C2021---SalesForce----CommCare---Training-Groups:
        name: Coffee - ZW C3 - C2021 - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW C3 - C2021 | SalesForce --> CommCare | Training Groups
          //{"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_zw_c21_agronomy"}


          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zw_c21_ag_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_zw_c21_ag_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-C3---C2021---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Coffee---ZW-C3---C2021---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Coffee ZW C3 C2021 SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zw_c21_ag"
        enabled: true
  Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Participants:
    name: Coffee - ZW Nespresso -Ag- - c2 - SalesForce -- CommCare - Training
      Participants
    jobs:
      Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Participants:
        name: Coffee - ZW Nespresso -Ag- - c2 - SalesForce -- CommCare - Training
          Participants
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW Nespresso (Ag) - c2 | SalesForce --> CommCare | Training Participants

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/1768D5C8-3EE4-4D7B-AE17-FE0AC9A0E60D",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zim_c2_ag_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_zim_c2_ag_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Participants:
        source_trigger: webhook
        target_job: Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Training-Participants
        condition_type: js_expression
        condition_label: Coffee ZW Nespresso Ag c2 SalesForce CommCare Training Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zim_c2_ag"
        enabled: true
  Coffee---DRC-GCA-Kabare-C2023---Salesforce----CommCare---Project-Roles:
    name: Coffee - DRC GCA Kabare C2023 - Salesforce -- CommCare - Project Roles
    jobs:
      Coffee---DRC-GCA-Kabare-C2023---Salesforce----CommCare---Project-Roles:
        name: Coffee - DRC GCA Kabare C2023 - Salesforce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - DRC GCA KABARE C2023 | Salesforce --> CommCare | Project Roles
          // coffee_drc_gca_kabare_2023
          //{"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_drc_gca_kabare_2023"}

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_gca_kabare_c2023_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---DRC-GCA-Kabare-C2023---Salesforce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Coffee---DRC-GCA-Kabare-C2023---Salesforce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee DRC GCA Kabare C2023 Salesforce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gca_kabare_c2023"
        enabled: true
  Production---Participants---KE-Nespresso-2024AC---SalesForce----CommCare:
    name: Production - Participants - KE Nespresso 2024AC - SalesForce -- CommCare
    jobs:
      Production---Participants---KE-Nespresso-2024AC---SalesForce----CommCare:
        name: Production - Participants - KE Nespresso 2024AC - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@v1.6.9'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee KE - Nespresso 2023C
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - KE Nespresso 2023C
          // JOB NAME :: Production | Participants - KE Nespresso 2023C | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Participant","source":"SF","uniqueProjectKey":"coffee_ke_2023c"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org
          // EDITED :: Emmanuel Mwaka | emwaka@tns.org

          each(
              "$.data.participants[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                      "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                      "uiVersion": "1",
                      "version": "325",
                      "name": "New Participant",
                    };
                  }),
                  field("Name", function(state){
                    var name = '';
                    if(dataValue("participantName")(state) !== null) {
                      name = dataValue("participantName")(state);
                    }
                    if(dataValue("participantMiddleName")(state) !== null) {
                      name = name+' '+dataValue("participantMiddleName")(state);
                    }
                    if(dataValue("participantLastName")(state) !== null) {
                      name = name+' '+dataValue("participantLastName")(state);
                    }
                    return name;
                  }),
                  field("First_Name", dataValue("participantName")),
                  field("Middle_Name", dataValue("participantMiddleName")),
                  field("Last_Name", dataValue("participantLastName")),
                  field("Age", dataValue("participantAge")),
                  field("Gender", dataValue("participantGender")),
                  field("Phone_Number", dataValue("participantPhoneNumber")),
                  field("Farmer_Id", dataValue("tnsId")),
                  field("Farmer_Number", function(state){
                    var tnsId = dataValue("tnsId")(state);
                    var farmerNumber = "0" + tnsId.substr(tnsId.length-1,1);
                    return farmerNumber;
                  }),
                  field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                  field("Household_Id", dataValue("householdId")),
                  field("Household_Number", dataValue("HHID")),
                  field("Number_of_Trees", dataValue("householdFarmSize")),
                  field("Parent_Id", dataValue("trainingGroupId")),
                  field("Status", dataValue("status")),
                  field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                  field("Case_Id", dataValue("commCareCaseId")),
                  field("Name_Household_Concat", function(state){
                    var name = '';
                    var tnsId = dataValue("tnsId")(state);
                    var hhNumber = dataValue("HHID")(state);
                    var farmerNumber = "0" + tnsId.substr(tnsId.length-1,1);
                    
                    if(dataValue("participantName")(state) !== null) {
                      name = dataValue("participantName")(state);
                    }
                    if(dataValue("participantMiddleName")(state) !== null) {
                      name = name+' '+dataValue("participantMiddleName")(state);
                    }
                    if(dataValue("participantLastName")(state) !== null) {
                      name = name+' '+dataValue("participantLastName")(state);
                    }
                    return name+' '+hhNumber+'-'+farmerNumber;
                  }),
                  
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("commCareCaseId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": function(){
                          var name = '';
                          if(dataValue("participantName")(state) !== null) {
                            name = dataValue("participantName")(state);
                          }
                          if(dataValue("participantMiddleName")(state) !== null) {
                            name = name+' '+dataValue("participantMiddleName")(state);
                          }
                          if(dataValue("participantLastName")(state) !== null) {
                            name = name+' '+dataValue("participantLastName")(state);
                          }
                          return name;
                        },
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2024ac_participant"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("commCareCaseId")(state),
                        "n0:First_Name": dataValue("participantName")(state),
                        "n0:Middle_Name": dataValue("participantMiddleName")(state),
                        "n0:Last_Name": dataValue("participantLastName")(state),
                        "n0:Age": dataValue("participantAge")(state),
                        "n0:Gender": dataValue("participantGender")(state),
                        "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                        "n0:Farmer_Id": dataValue("tnsId")(state),
                        "n0:Farmer_Number": function(){
                          var tnsId = dataValue("tnsId")(state);
                          var farmerNumber = tnsId.substr(tnsId.length-1,1);
                          return farmerNumber;
                        },
                        "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                        "n0:Household_Id": dataValue("householdId")(state),
                        "n0:Household_Number": dataValue("HHID")(state),
                        "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                        "n0:Status": dataValue("status")(state),
                        "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                        "n0:Name_Household_Concat": function(){
                          var name = '';
                          var tnsId = dataValue("tnsId")(state);
                          var hhNumber = dataValue("HHID")(state);
                          var farmerNumber = tnsId.substr(tnsId.length-1,1);
                          
                          if(dataValue("participantName")(state) !== null) {
                            name = dataValue("participantName")(state);
                          }
                          if(dataValue("participantMiddleName")(state) !== null) {
                            name = name+' '+dataValue("participantMiddleName")(state);
                          }
                          if(dataValue("participantLastName")(state) !== null) {
                            name = name+' '+dataValue("participantLastName")(state);
                          }
                          return name+' '+hhNumber+'-'+farmerNumber;
                        },
                        "n0:TNS_Id": dataValue("tnsId")(state),
                        "n0:Parent_Id": dataValue("trainingGroupId")(state)
                      },
                      "n0:index": {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_ke_2024ac_training_group"
                          },
                          "#": dataValue("trainingGroupId")(state)
                        }
                      }
                    };
                  }),
                  field("n1:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n1": "http://openrosa.org/jr/xforms"
                      },
                      "n1:deviceID": "867066029216796",
                      "n1:timeStart": new Date().toISOString(),
                      "n1:timeEnd": new Date().toISOString(),
                      "n1:username": "api",
                      "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );
            
            //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---KE-Nespresso-2024AC---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---KE-Nespresso-2024AC---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Coffee KE 2024AC SalesForce CommCare Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024ac"
        enabled: true
  Production---Coffee-KE-2024BC---SalesForce----CommCare---Project-Roles:
    name: Production - Coffee KE 2024BC - SalesForce -- CommCare - Project Roles
    jobs:
      Production---Coffee-KE-2024BC---SalesForce----CommCare---Project-Roles:
        name: Production - Coffee KE 2024BC - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |+
          // Project Roles Job = Coffee - Kenya Nespresso 2024BC
          each(
              "$.data.projectRoles[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "name": "New Project Role",
                      "uiVersion": "1",
                      "version": "1",
                      "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                    };
                  }),
                  field("Name", function(state){
                    var name = '';
                    if(dataValue("staffName")(state) !== null) {
                      name = dataValue("staffName")(state);
                    }
                    return name;
                  }),
                  field("TNS_Id", dataValue("tnsId")),
                  field("City", dataValue("locationName")),
                  field("Role", dataValue("roleForCommCare")),
                  field("Case_Id", dataValue("commCareCaseId")),
                  field("Current_Module", dataValue("currentModule")),
                  field("Current_Module_Name", dataValue("currentModuleName")),
                  field("Previous_Module", dataValue("previousModule")),
                  field("Previous_Module_Name", dataValue("previousModuleName")),
                  field("Name_id_concat", function(state){
                    var name = '';
                    if(dataValue("staffName")(state) !== null) {
                      name = dataValue("staffName")(state);
                    }
                    if(dataValue("tnsId")(state) !== null) {
                      name = name+' '+dataValue("tnsId")(state);
                    }
                    return name;
                  }),
                  field("Salesforce_Staff_Id", dataValue("staffId")),
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("commCareCaseId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": function(){
                          var name = '';
                          if(dataValue("staffName")(state) !== null) {
                            name = dataValue("staffName")(state);
                          }
                          return name;
                        },
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2024bc_staff"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("commCareCaseId")(state),
                        "n0:Name_Id_Concat": function() {
                          var name = '';
                          if(dataValue("staffName")(state) !== null) {
                            name = dataValue("staffName")(state);
                          }
                          if(dataValue("tnsId")(state) !== null) {
                            name = name+' '+dataValue("tnsId")(state);
                          }
                          return name;
                        },
                        "n0:Role": dataValue("roleForCommCare")(state),
                        "n0:City": dataValue("locationName")(state),
                        "n0:TNS_Id": dataValue("tnsId")(state),
                        "n0:Current_Module": dataValue("currentModule")(state),
                        "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                        "n0:Previous_Module": dataValue("previousModule")(state),
                        "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                        "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                      }
                    };
                  }),
                  field("n1:meta", function(state) {
                    return {
                      "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                      "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                      "n1:timeStart": new Date().toISOString(),
                      "n1:timeEnd": new Date().toISOString(),
                      "n1:username": "api",
                      "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );// Your job goes here.
            
            // version control
            
    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-KE-2024BC---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Production---Coffee-KE-2024BC---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Production - Coffee KE 2024BC - SalesForce -- CommCare - Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024bc"
        enabled: true
  Production---Training-Groups---ET-Regrow-YG--Ag--C2025---SalesForce----CommCare:
    name: Production - Training Groups - ET Regrow YG -Ag- C2025 - SalesForce --
      CommCare
    jobs:
      Production---Training-Groups---ET-Regrow-YG--Ag--C2025---SalesForce----CommCare:
        name: Production - Training Groups - ET Regrow YG -Ag- C2025 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee ET - Regrow Yirga Agronomy C2025
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET Regrow Yirga (Ag) C2025
          // JOB NAME :: Production | Training Groups - ET Regrow YG (Ag) C2025 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag_c4"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org
          // EDITED :: Emmanuel Mwaka | emwaka@tns.org

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_regrow_ag_c4_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_regrow_ag_c4_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Groups---ET-Regrow-YG--Ag--C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Groups---ET-Regrow-YG--Ag--C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Groups Regrow Yirga C2025 Salesforce CommCare
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c4"
        enabled: true
  Production---Training-Sessions---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
    name: Production - Training Sessions - ET GAC CREW TFS C2025 - SalesForce --
      CommCare
    jobs:
      Production---Training-Sessions---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
        name: Production - Training Sessions - ET GAC CREW TFS C2025 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee ET - CREW GAC TFS C2025
          // DATA FLOW :: SalesForce --> TO --> CommCare
          // TARGET APPS :: // JOB PURPOSE :: Coffee - ET GAC CREW TFS C2025
          // JOB NAME :: Production | Training Sessions - ET GAC CREW TFS C2025 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Session","source":"SF","uniqueProjectKey":"coffee_et_crew_gac_tfs_c2025"}

          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_et_crew_gac_tfs_c2025_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_et_crew_gac_tfs_c2025_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Sessions---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Sessions---ET-GAC-CREW-TFS-C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Sessions ET GAC CREW TFS C2025 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_crew_gac_tfs_c2025"
        enabled: true
  Production---Farm-Visit---ZW---CommCare----Salesforce:
    name: Production - Farm Visit - ZW - CommCare -- Salesforce
    jobs:
      Production---Farm-Visit---ZW---CommCare----Salesforce:
        name: Production - Farm Visit - ZW - CommCare -- Salesforce
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //FARM VISIT JOB FOR ALL ZIMBABWE PROJECTS
          //Production - Farm Visit :: ZM 2022 | CommCare --> Salesforce | Farm Visit Full
          //ZM ZM C2018

            //insert the farm visit record for FT Level
            each(
                "$.data",
                upsertIf(state.data.form['@name'] == "Farm Visit Full",
                  "Farm_Visit__c", "FV_Submission_ID__c",
                    fields(
                        field("Name__c", "FV-" + dataValue("id")(state)),
                        field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                        field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                        field("Training_Group__c", dataValue("form.case.@case_id")),
                        field("Farm_Visited__c", dataValue("form.farm_being_visted")),
                        field("Primary_Farmer_PIMA_ID__c", dataValue("form.farm_being_visted")),
                        field("Secondary_Farmer__c", function(state){
                            var secondaryFarmer = '';
                            if(dataValue("form.secondary_farmer_available")(state) == 'yes' && dataValue("form.secondary_farmer")(state) !== ''){
                              secondaryFarmer = dataValue("form.secondary_farmer");
                            }
                            return secondaryFarmer;
                        }),
                        field("Secondary_Farmer_PIMA_ID__c", function(state){
                            var secondaryFarmer = '';
                            if(dataValue("form.secondary_farmer_available")(state) == 'yes' && dataValue("form.secondary_farmer")(state) !== ''){
                              secondaryFarmer = dataValue("form.secondary_farmer");
                            }
                            return secondaryFarmer;
                        }),
                        field("Visit_Has_Training__c", dataValue("form.is_this_a_farm_training_visit")),
                      //  field("Training_Session__c", dataValue("form.training_session")),
                        field("Other_Participants_Present__c", dataValue("form.any_other_participants_present")),
                        field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                        field("Date_Visited__c", dataValue("form.date_of_visit")),
                        field("visit_comments__c", dataValue("form.farm_visit_comments")),
                        field("Farmer_Trainer__c", dataValue("form.trainer")),
                        field("No_of_curedas__c", dataValue("form.opening_questions.number_of_curedas")),
                        field("No_of_separate_coffee_fields__c", dataValue("form.opening_questions.number_of_separate_coffee_fields")),
                        field("Field_Age__c", dataValue("form.field_age")),
                        field("Field_Size__c", function(state){
                            var fieldSize = '';
                            if(dataValue("form.field_size")(state) !== undefined && dataValue("form.field_size")(state) !== ''){
                              fieldSize = dataValue("form.field_size");
                            }
                            else if(dataValue("form.field_size1")(state) !== undefined && dataValue("form.field_size1")(state) !== ''){
                              fieldSize = dataValue("form.field_size1");
                            }
                            
                            return fieldSize;
                            
                        }),
                        field("Farm_Visit_Photo_Url__c", function(state) {
                            var farmVisitPhotoUrl = '';
                            if (dataValue("form.farm_visit_photo")(state) !== undefined && dataValue("form.farm_visit_photo")(state) !== '') {
                                farmVisitPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.farm_visit_photo")(state);
                            }
                            return farmVisitPhotoUrl;
                        }),
                        field("Signature__c", function(state) {
                            var recorderSignatureUrl = '';
                            if (dataValue("form.signature_of_farmer_trainer")(state) !== undefined && dataValue("form.signature_of_farmer_trainer")(state) !== '') {
                                recorderSignatureUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.signature_of_farmer_trainer")(state);
                            }
                            return recorderSignatureUrl;
                        }),
                        field('Location_GPS__Latitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[0];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Location_GPS__Longitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[1];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Altitude__c', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[2];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                        return '';
                        })
                    )
                )
            );
            
              //insert the farm visit record for AA Level
            each(
                "$.data",
                upsertIf(state.data.form['@name'] == 'Farm Visit - AA',
                "Farm_Visit__c", "FV_Submission_ID__c",
                    fields(
                        field("Name__c", "FV-" + dataValue("id")(state)),
                        field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                        field("Farm_Visit_Type__c", dataValue("form.survey_type")),
                        field("Training_Group__c", dataValue("form.training_group")),
                        field("Farm_Visited__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          if(visitedFarmers){
                            return visitedFarmers.split(" ")[0];
                          }
                        }),
                        field("Primary_Farmer_PIMA_ID__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          if(visitedFarmers){
                            return visitedFarmers.split(" ")[0];
                          }
                        }),
                        
                        field("Secondary_Farmer__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          var result = '';
                          if(visitedFarmers.length > 1){
                            result = visitedFarmers.split(" ")[1];
                          }
                          return result;
                        }),
                        
                        field("Secondary_Farmer_PIMA_ID__c", function(state){
                          const visitedFarmers = dataValue("form.farm_being_visted")(state);
                          var result = '';
                          if(visitedFarmers.length > 1){
                            result = visitedFarmers.split(" ")[1];
                          }
                          return result;
                        }),
                        field("Visit_Has_Training__c", dataValue("form.is_this_a_farm_training_visit")),
                      //  field("Training_Session__c", dataValue("form.training_session")),
                        field("Other_Participants_Present__c", dataValue("form.any_other_participants_present")),
                        field("Total_Farmers_Visited__c", dataValue("form.attendance_count")),
                        field("Date_Visited__c", dataValue("form.date_of_visit")),
                        field("visit_comments__c", dataValue("form.farm_visit_comments")),
                        field("Farmer_Trainer__c", dataValue("form.trainer")),
                        field("No_of_curedas__c", dataValue("form.opening_questions.number_of_curedas")),
                        field("No_of_separate_coffee_fields__c", dataValue("form.opening_questions.number_of_separate_coffee_fields")),
                        field("Field_Age__c", dataValue("form.field_age")),
                        field("Field_Size__c", function(state){
                            var fieldSize = '';
                            if(dataValue("form.field_size")(state) !== undefined && dataValue("form.field_size")(state) !== ''){
                              fieldSize = dataValue("form.field_size");
                            }
                            else if(dataValue("form.field_size1")(state) !== undefined && dataValue("form.field_size1")(state) !== ''){
                              fieldSize = dataValue("form.field_size1");
                            }
                            
                            return fieldSize;
                            
                        }),
                        field("Farm_Visit_Photo_Url__c", function(state) {
                            var farmVisitPhotoUrl = '';
                            if (dataValue("form.farm_visit_photo")(state) !== undefined && dataValue("form.farm_visit_photo")(state) !== '') {
                                farmVisitPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.farm_visit_photo")(state);
                            }
                            return farmVisitPhotoUrl;
                        }),
                        field("Signature__c", function(state) {
                            var recorderSignatureUrl = '';
                            if (dataValue("form.signature_of_farmer_trainer")(state) !== undefined && dataValue("form.signature_of_farmer_trainer")(state) !== '') {
                                recorderSignatureUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + dataValue("form.signature_of_farmer_trainer")(state);
                            }
                            return recorderSignatureUrl;
                        }),
                        field('Location_GPS__Latitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[0];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Location_GPS__Longitude__s', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[1];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                            return '';
                        }),
                        field('Altitude__c', (state) => {
                            // define this once, it's constant...
                            const coords = state.data.form.gps_coordinates;
                            // write your contional
                            if (coords) {
                              return coords.split(" ")[2];
                            }
                            // the 'else' is unnecessary, return '' if there are no coords
                        return '';
                        }),
                        field('FV_AA_Farmer_1_Attended_Any_Training__c', function(state){
                          var result = '';
                          if(dataValue('form.farmer_1_questions.attended_training')(state) == 1){
                            result = 'Yes';
                          }
                          else if(dataValue('form.farmer_1_questions.attended_training')(state) == 0){
                            result = 'No';
                          }
                          return result;
                        }),
                        field('FV_AA_Farmer_2_Attended_Any_Training__c', function(state){
                          var result = '';
                          if(dataValue('form.farmer_2_questions.attended_training')(state) == 1){
                            result = 'Yes';
                          }
                          else if(dataValue('form.farmer_2_questions.attended_training')(state) == 0){
                            result = 'No';
                          }
                          return result;
                        }),
                        field('FV_AA_Farmer_1_Trainings_Attended__c', dataValue('form.farmer_1_questions.number_of_trainings')),
                        field('FV_AA_Farmer_2_Trainings_Attended__c', dataValue('form.farmer_2_questions.number_of_trainings')),
                        field('FV_AA_Visit_Done_By_AA__c', 'Yes'),
                        field('Training_Session__c', dataValue('form.training_session'))
                    )
                )
            );
            
            // Update Household Record 
            each("$.data", 
              upsertIf(state.data.form['@name'] == 'Farm Visit - AA', 
                "Household__c", "Id",
                fields(
                  field("Id", state.data.form.case["@case_id"]),
                  field("FV_AA_Visited__c", dataValue("form.case.update.FV_AA_Visited")(state)),
                  relationship(
                    "Latest_Farm_Visit_Record__r",
                    "FV_Submission_ID__c",
                    "FV-" + dataValue("id")(state)
                    )
                  )
                )
            );

              //Best Practices :: Main Stem && Weeding &&  Shade Control && Record Keeping && Compost && Erosion Control && Nutrition
            each(
                "$.data",
                upsert("FV_Best_Practices__c", "FV_Submission_ID__c",
                    fields(
                        field("Name__c", "FV-" + dataValue("id")(state)),
                        field("FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                        relationship("Farm_Visit__r", "FV_Submission_ID__c", "FV-" + dataValue("id")(state)),
                        //main stems
                          field("number_of_main_stems_on_majority_trees__c", dataValue("form.main_stems.number_of_main_stems_on_majority_trees")),
                    
                    /*    field("number_of_main_stems_on_majority_trees__c", function(state){
                          
                          var numberOfMainStems = dataValue("form.main_stems.number_of_main_stems_on_majority_trees")(state);
                          var returnNumberOfMainStems = 0;
                          
                          if (numberOfMainStems !== undefined && numberOfMainStems !== '') {
                              returnNumberOfMainStems = numberOfMainStems;
                          }
                          
                          return returnNumberOfMainStems;
                          
                        }),
                        
                    */    
                        field("photo_of_trees_and_average_main_stems__c", function(state){
                          
                          var mainStemsPhotoURL = "";
                          if(dataValue("form.main_stems.trees_and_main_stems_photo")(state) !== undefined && dataValue("form.main_stems.trees_and_main_stems_photo")(state) !== '') {
                            mainStemsPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.main_stems.trees_and_main_stems_photo")(state);  
                           }
                           return mainStemsPhotoURL;
                           
                        }),

                        //nutrition
                        field("Color_of_coffee_tree_leaves__c", function(state){
                          
                          var colorOfCoffeeLeaves = dataValue("form.nutrition.are_the_leave_green_or_yellow_pale_green")(state);
                          var returnColorOfCoffeeLeaves = "";
                          
                          if(colorOfCoffeeLeaves !== undefined && colorOfCoffeeLeaves !== '' && colorOfCoffeeLeaves == 0){
                            
                            returnColorOfCoffeeLeaves = "5% or more (5 or more in 100) of the leaves are yellow, pale green or brown.";
                            
                          }

                          if(colorOfCoffeeLeaves !== undefined && colorOfCoffeeLeaves !== '' && colorOfCoffeeLeaves == 1){
                            
                            returnColorOfCoffeeLeaves = "Nearly all leaves are dark green and less than 5% (less than 5 in 100) are yellow, pale green, or brown.";
                            
                          }

                          return returnColorOfCoffeeLeaves;

                        }),

                        //weeding
                        field("how_many_weeds_under_canopy_and_how_big__c", function(state){
                          
                          var weedsUnderCanopy = dataValue("form.weeding.how_many_weeds_under_canopy_and_how_big_are_they")(state);
                          var returnWeedsUnderCanopy = "";
                  
                          if(weedsUnderCanopy == 1){
                  
                            returnWeedsUnderCanopy = "Few small weeds (less than 30cm) under the tree canopy";
                  
                          }
                  
                          if(weedsUnderCanopy == 2){
                  
                            returnWeedsUnderCanopy = "Many small weeds under the tree canopy (ground is covered with weeds)";
                  
                          }
                  
                          if(weedsUnderCanopy == 3){
                  
                            returnWeedsUnderCanopy = "Many large weeds under the tree canopy (ground is covered with weeds)";
                  
                          }

                            return returnWeedsUnderCanopy;

                        }),

                        //Health of New Planting (Yves might need to add a new Object for this)
                        field("health_of_new_planting_choice__c", function(state){
            
                            var healthNewPlanting = dataValue("form.health_of_new_planting.health_of_new_planting_choice")(state);
                            var returnhealthNewPlanting = "";
            
                            if(healthNewPlanting == 1){
            
                                returnhealthNewPlanting = "The majority of trees are green and healthy and have grown well";
            
                            }
            
                            if(healthNewPlanting == 2){
            
                                returnhealthNewPlanting = "The majority of trees look stressed and growth is slow";
            
                            }
            
                            if(healthNewPlanting == 3){
            
                                returnhealthNewPlanting = "The majority of trees have dried up or died";
            
                            }

                        return returnhealthNewPlanting;

                    }),

                    field("photo_of_trees_and_average_main_stems__c", function(state){
                          
                        var healthPhotoURL = "";
                        if(dataValue("form.main_stems.health_of_trees_photo")(state) !== undefined && dataValue("form.main_stems.health_of_trees_photo")(state) !== '') {
                            healthPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.main_stems.trees_and_main_stems_photo")(state);  
                         }
                         return healthPhotoURL;
                         
                      }),

                       field("Have_herbicides_been_used_on_the_field__c", dataValue("form.weeding.used_herbicides")),
                        // field("Herbicide_products_used_on_farm__c", function(state){
                          
                        //   var herbicideUsed = dataValue("form.weeding.which_product_have_you_used")(state);
                        //   var returnHerbicideUsed = "EMPTY";
                          
                        //   if(herbicideUsed !== undefined && herbicideUsed == 1){
                            
                        //     returnHerbicideUsed = "Glyphosate (Eg Round Up)";
                            
                        //   }
                          
                        //   if(herbicideUsed !== undefined && herbicideUsed == 2){
                            
                        //     returnHerbicideUsed = "Paraquat (Eg. Gramoxone)";
                            
                        //   }

                        //   if(herbicideUsed !== undefined && herbicideUsed == 3){
                            
                        //     returnHerbicideUsed = dataValue("form.weeding.ask_which_other_product_have_you_use")(state);
                            
                        //   }                  

                        //   return returnHerbicideUsed;
                          
                        // }),
                        
                        field("photo_of_weeds_under_the_canopy__c", function(state){
                          
                          var weedsPhotoUrl = dataValue("form.weeding.weeds_under_the_canopy_photo")(state);
                          var returnWeedsPhotoUrl = "";
                          
                          if (weedsPhotoUrl !== undefined && weedsPhotoUrl !== '') {
                              returnWeedsPhotoUrl = "https://www.commcarehq.org/a/" + dataValue("domain")(state) + "/api/form/attachment/" + dataValue("form.meta.instanceID")(state) + "/" + weedsPhotoUrl;
                          }
                          
                          return returnWeedsPhotoUrl;
                          
                        }),

                        //shade management
                        field("level_of_shade_present_on_the_farm__c", function(state){
                          
                          var levelOfShadeOnPlot = dataValue("form.shade_control.level_of_shade_present_on_the_farm")(state);
                          var returnLevelOfShadeOnPlot = "";
                          
                          if(levelOfShadeOnPlot == 0){
                            
                            returnLevelOfShadeOnPlot = "NO shade, less than 5%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 1){
                            
                            returnLevelOfShadeOnPlot = "Light shade, 5 to 20%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 2){
                            
                            returnLevelOfShadeOnPlot = "Medium shade, 20 to 40%";
                            
                          }
                          
                          if(levelOfShadeOnPlot == 3){
                            
                            returnLevelOfShadeOnPlot = "Heavy shade, over 40%";
                            
                          }
                          
                          return returnLevelOfShadeOnPlot;

                        }),
                        
                        // field("have_new_shade_been_planted_last_3_years__c", function(state){
                          
                        //   var newShadePlanted = dataValue("form.shade_control.new_shade_trees_in_the_last_3_years")(state);
                        //   var returnNewShadePlanted = "";
                          
                        //   if(newShadePlanted == 0){
                            
                        //     returnNewShadePlanted = "No";
                            
                        //   }

                        //   if(newShadePlanted == 1){
                            
                        //     returnNewShadePlanted = "Yes";
                            
                        //   }

                        //   return returnNewShadePlanted;

                        // }),
                        
                        field("photo_of_level_of_shade_on_the_plot__c", function(state) {
                          
                          var shadePhotoUrl = '';
                          if(dataValue("form.shade_control.photo_of_level_of_shade_on_the_plot")(state) !== undefined && dataValue("form.shade_control.photo_of_level_of_shade_on_the_plot")(state) !== '') {
                            shadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);
                            
                          }
                          
                          return shadePhotoUrl;
                          
                        }),
                        
                        // Yves needs to Add Object
                        field("planted_intercrop_bananas__c", function(state){
                          
                            var bananaShadePlanted = dataValue("form.shade_control.planted_intercrop_bananas")(state);
                            var returnbananaShadePlanted = "";
                            
                            if(bananaShadePlanted == "no"){
                              
                                returnbananaShadePlanted = "No";
                              
                            }

                            if(bananaShadePlanted == "yes"){
                              
                                returnbananaShadePlanted = "Yes";
                              
                            }

                            return returnbananaShadePlanted;

                          }),
                          
                          //Yves needs to add object
                          field("photograph_intercrop_bananas__c", function(state) {
                            
                            var bananashadePhotoUrl = '';
                            if(dataValue("form.shade_control.photograph_intercrop_bananas")(state) !== undefined && dataValue("form.shade_control.photograph_intercrop_bananas")(state) !== '') {
                                bananashadePhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.photo")(state);
                              
                            }
                            
                            return bananashadePhotoUrl;
                            
                          }),


                        //compost manure
                        field("do_you_have_compost_manure__c", function(state){
                          
                          var haveCompostManure = dataValue("form.compost.do_you_have_compost_manure")(state);
                          var returnHaveCompostManure = "";
                          
                          if(haveCompostManure !== undefined && haveCompostManure !== '' && haveCompostManure == 0){
                            
                            returnHaveCompostManure = "No";
                            
                          }
                          
                          if(haveCompostManure !== undefined && haveCompostManure !== '' && haveCompostManure == 1){
                            
                            returnHaveCompostManure = "Yes";
                            
                          }
                          
                          return returnHaveCompostManure;

                        }),

                        field("photo_of_the_compost_manure__c", function(state) {
                          
                          var compostPhotoUrl = '';
                          if(dataValue("form.compost.photo_of_the_compost_manure")(state) !== undefined && dataValue("form.compost.photo_of_the_compost_manure")(state) !== '') {
                            compostPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.compost.photo_of_the_compost_manure")(state);
                            
                          }
                          
                          return compostPhotoUrl;
                          
                        }),

                        //erosion control
                    /*    field("take_a_photo_of_erosion_control__c", function(state) {
                          
                          var erosionPhotoUrl = '';
                          if(dataValue("form.erosion_control.photo_of_erosion_control_method")(state) !== undefined && dataValue("form.erosion_control.photo_of_erosion_control_method")(state) !== '') {
                            erosionPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.photo_of_erosion_control_method")(state);
                            
                          }
                          
                          return erosionPhotoUrl;
                          
                        }),
                    */
                        field("Stabilizing_Grasses_Photo_URL__c", function(state){                    

                            var sgPhotoURL = "";
                            if(dataValue("form.erosion_control.stabilizing_grasses_image")(state) !== undefined && dataValue("form.erosion_control.stabilizing_grasses_image")(state) !== '') {
                                sgPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.stabilizing_grasses_image")(state); 
                            } 

                            return sgPhotoURL;                
                        }),
                        field("Mulch_Photo_URL__c", function(state){                    

                            var mulchPhotoURL = "";
                            if(dataValue("form.erosion_control.mulch_image")(state) !== undefined && dataValue("form.erosion_control.mulch_image")(state) !== '') {
                                mulchPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.mulch_image")(state); 
                            } 

                            return mulchPhotoURL;                
                        }),
                        field("Water_Traps_Photo_URL__c", function(state){                    

                            var wtPhotoURL = "";
                            if(dataValue("form.erosion_control.water_traps_or_trenches_image")(state) !== undefined && dataValue("form.erosion_control.water_traps_or_trenches_image")(state) !== '') {
                                wtPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.water_traps_or_trenches_image")(state); 
                            } 

                            return wtPhotoURL;                
                        }),
                        field("Physical_Barriers_Photo_URL__c", function(state){                    

                            var pbPhotoURL = "";
                            if(dataValue("form.erosion_control.physical_barriers_image")(state) !== undefined && dataValue("form.erosion_control.physical_barriers_image")(state) !== '') {
                                pbPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.physical_barriers_image")(state); 
                            } 

                            return pbPhotoURL;                
                        }),
                        field("Terraces_Photo_URL__c", function(state){                    

                            var terracesPhotoURL = "";
                            if(dataValue("form.erosion_control.terraces_image")(state) !== undefined && dataValue("form.erosion_control.terraces_image")(state) !== '') {
                                terracesPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.terraces_image")(state); 
                            } 

                            return terracesPhotoURL;                
                        }),
                        field("Contour_Planting_Photo_URL__c", function(state){                    

                            var cpPhotoURL = "";
                            if(dataValue("form.erosion_control.contour_planting_image")(state) !== undefined && dataValue("form.erosion_control.contour_planting_image")(state) !== '') {
                                cpPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.contour_planting_image")(state); 
                            } 

                            return cpPhotoURL;                
                        }),
                        field("Cover_Crop_Photo_URL__c", function(state){                    

                            var ccPhotoURL = "";
                            if(dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state) !== undefined && dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state) !== '') {
                                ccPhotoURL = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.erosion_control.bean_or_arachis_cover_crop_image")(state); 
                            } 

                            return ccPhotoURL;                
                        }),

                        //record keeping
                        field("do_you_have_a_record_book__c", function(state){
                          
                          var haveRecordBook = dataValue("form.record_keeping.do_you_have_a_record_book")(state);
                          var returnHaveRecordBook = "";
                          
                          if(haveRecordBook == 0){
                            
                            returnHaveRecordBook = "No";
                            
                          }
                          
                          if(haveRecordBook == 1){
                            
                            returnHaveRecordBook = "Yes";
                            
                          }
                          
                          return returnHaveRecordBook;

                        }),

                        field("are_there_records_on_the_record_book__c", function(state){
                          
                          var recordsOnRecordBook = dataValue("form.record_keeping.are_there_records_on_the_record_book")(state);
                          var returnRecordsOnRecordBook = "";
                          
                          if(recordsOnRecordBook !== undefined && recordsOnRecordBook !== '' && recordsOnRecordBook == 0){
                            
                            returnRecordsOnRecordBook = "No";
                            
                          }
                          
                          if(recordsOnRecordBook !== undefined && recordsOnRecordBook !== '' && recordsOnRecordBook == 1){
                            
                            returnRecordsOnRecordBook = "Yes";
                            
                          }
                          
                          return returnRecordsOnRecordBook;
                          
                        }),

                        field("take_a_photo_of_the_record_book__c", function(state){
                          
                          var recordBookPhotoUrl = '';
                          if(dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== undefined && dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== '') {
                            recordBookPhotoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state) !== undefined && dataValue("form.record_keeping.take_a_photo_of_the_record_book")(state);
                         
                          }
                          
                          return recordBookPhotoUrl;
                          
                        })
                    )
                )
            );

          //if (state.data.app_id == "e16e09252eb942a788bd6600e6ceeb28") {

              //loop through participants and insert in database
          /*    beta.each(

                  function(state) {
                      if (state.data.form.present_participants) {
                          return state.data.form.present_participants.split(" ").map(
                              function(pId) {
                                  return {
                                      participant: pId,
                                      session: dataValue("form.training_session")(state),
                                      att_submission: dataValue("form.training_session")(state) + pId,
                                      fv_submission: "FV-" + dataValue("id")(state),
                                      sessionPhoto: dataValue("form.photo")(state)
                                  };
                              }
                          );
                      }
                  },
                  upsert("FV_Attendance__c", "Submission_ID__c",
                      fields(
                          field("Submission_ID__c", dataValue("att_submission")), //attendance submission_id
                          field("FV_Submission_ID__c", dataValue("fv_submission")), //farm visit submission_id
                          field("Status__c", "Present"),
                          relationship("Training_Session__r", "CommCare_Case_Id__c", dataValue("session")),
                          relationship("Participant__r", "CommCare_Case_Id__c", dataValue("participant"))
                      )
                  )

              );
          */
          	//Farm Visit Best Practice Results
              //loop through methods of erosion control and insert into database :: Erosion Control BP
              beta.each(

                function(state) {

                    //incoming erosion data
                    var best_practice_results_data = dataValue("form.erosion_control.methods_of_erosion_control")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_erosion_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                        field("Best_Practice_Result_Type__c", "Erosion Control"),//this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Stabilizing grasses";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Mulch";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Water traps or trenches";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Physical barriers. (e.g. rocks)";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Terraces";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Contour planting";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Bean or Arachis cover crop between the rows";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "No erosion control method seen";

                            }
                            
                            return returnResults;
                          
                        })                
                    )
                )
            );


            //loop through chemical/fertilizier applied and insert into database :: Nutrition BP
            beta.each(

                function(state) {

                    //incoming chemical/fertilizer used data
                    var best_practice_results_data = dataValue("form.nutrition.type_chemical_applied_on_coffee_last_12_months")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_fertilizer_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                        field("Best_Practice_Result_Type__c", "Chemicals and Fertilizers Applied"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Compost";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Manure";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Lime";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Compound S";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Compound J";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Single Super Phosphate (SSP)";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Zinc/Boron Foliar Feed (Tracel)";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "8"){

                                returnResults = "Ammonium Nitrate";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "Did NOT apply any fertilizer in past 12 months";

                            }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "9"){

                            //     returnResults = "Agricultural lime - Calcium Carbonate";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "10"){

                            //     returnResults = "Foliar Zinc or Boron";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "11"){

                            //     returnResults = "General Foliar Feed (Nurish, Ferquido Ferqan)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "12"){

                            //     returnResults = "Nutrical (cal dolomita)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "13"){

                            //     returnResults = "15-5-10+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "14"){

                            //     returnResults = "20-5-10+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "15"){

                            //     returnResults = "15-15-15+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "16"){

                            //     returnResults = "10-5-20+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "17"){

                            //     returnResults = "20-5-20+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "18"){

                            //     returnResults = "12-5-15+3Mg+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "19"){

                            //     returnResults = "14-7-19+3MGO+1EM";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "20"){

                            //     returnResults = "Caldo bordeles";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "21"){

                            //     returnResults = "Foliar - lixiviado de bioinsumo (lombricomposta o equivalente)";

                            // }
                            
                            // if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "22"){

                            //     returnResults = "Urea";

                            // }

                            return returnResults;
                          
                        })
                    )
                )

            );


            //loop through methods of controlling coffee berry borer :: Integrated Pest and Disease Management BP
            beta.each(

                function(state) {

                    //incoming coffee berry borer data
                    var best_practice_results_data = dataValue("form.pest_disease_management.methods_of_controlling_coffee_berry_borer")(state);

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_cbb_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                        field("Best_Practice_Result_Type__c", "Management of Coffee Berry Borer (CBB)"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Reduce pesticide use and/or encourage natural predators and parasites - beneficial insects.";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Strip all berries at the end of harvest, known as crop hygiene";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Harvest ripe cherries regularly - to reduce pest and disease levels";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Use berry borer traps";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Collect fallen berries at the end of the season - crop hygiene";

                            }
                            
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "6"){

                                returnResults = "Feed the tree well to keep it healthy";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "7"){

                                returnResults = "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "8"){

                                returnResults = "Prune to keep the canopy open";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "9"){

                                returnResults = "Renovate (new planting) or rejuvenate regularly to keep main stems less than 8 years old";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "10"){

                                returnResults = "Plant and grow disease resistant varieties";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "11"){

                                returnResults = "Smooth the bark to reduce egg laying sites for While Coffee Borer";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "12"){

                                returnResults = "Spray regular pesticides";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "13"){

                                returnResults = "Spray homemade herbal or botanical pesticides";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "Does not know any methods";

                            }

                            return returnResults;
                          
                        })
                    )
                )

            );


            //loop through methods of controlling leaf rust :: Integrated Pest and Disease Management
            // beta.each(

            //     function(state) {

            //         //incoming coffee leaf rust data
            //         var best_practice_results_data = dataValue("form.pest_disease_management.methods_of_controlling_coffee_leaf_rust")(state);

            //         if (best_practice_results_data !== undefined) {

            //             return best_practice_results_data.split(" ").map(
                          
            //                 function(resultId) {
            //                     return {
            //                         result_data: resultId,
            //                         best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_clr_" + resultId,
            //                         farm_visit_submission: "FV-" + dataValue("id")(state)
            //                     };
            //                 }
                            
            //             );

            //         }
            //     },
            //     upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
            //         fields(
            //             field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
            //             field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
            //             field("Best_Practice_Result_Type__c", "Management of Coffee Leaf Rust (CLR)"), //this is the actual result type
            //             field("Best_Practice_Result_Description__c", function(state){
                          
            //                 var returnResults = "";
                          
            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

            //                     returnResults = "Feed the tree well to keep it healthy";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

            //                     returnResults = "Use good agricultural practices such as weeding or mulching to reduce stress and keep trees healthy";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

            //                     returnResults = "Prune or keep canopy open";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

            //                     returnResults = "Spray fungicides";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

            //                     returnResults = "Grow resistant varieties";

            //                 }

            //                 if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

            //                     returnResults = "Does not know any methods";

            //                 }

            //                 return returnResults;
                          
            //             })
            //         )
            //     )

            // );
            

            //loop through pruning methods :: Pruning BP  
              beta.each(

                function(state) {

                    //incoming pruning data
                    var best_practice_results_data = dataValue("form.pruning.pruning_method_on_majority_trees")(state) || "";

                    if (best_practice_results_data !== undefined) {

                        return best_practice_results_data.split(" ").map(
                          
                            function(resultId) {
                                return {
                                    result_data: resultId,
                                    best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_pruning_" + resultId,
                                    farm_visit_submission: "FV-" + dataValue("id")(state),
                                    field_age: dataValue("form.field_age")(state)
                                };
                            }
                            
                        );

                    }
                },
                upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                    fields(
                        field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                        field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                        relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                        field("Best_Practice_Result_Type__c", "Pruning"), //this is the actual result type
                        field("Best_Practice_Result_Description__c", function(state){
                          
                            var returnResults = "";
                            var field_age = dataValue("field_age")(state);
                            console.log("The string field age is: ");
                            console.log(field_age);
                            const numeric_field_age = parseInt(field_age);
                            console.log("The numeric field age is: ");
                            console.log(numeric_field_age);
                          
                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                                returnResults = "Centers opened";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                                returnResults = "Unwanted suckers removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                                returnResults = "Dead branches removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "4"){

                                returnResults = "Branches touching the ground removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "5"){

                                returnResults = "Broken / unproductive stems and/or branches removed";

                            }

                            if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "0"){

                                returnResults = "No pruning methods used";

                            }
                            else if(numeric_field_age < 3) {
                                returnResults = 'N/A';
                            }

                            return returnResults;
                          
                        })
                    )
                )

            );

            beta.each(

              function(state) {

                  //incoming pruning data
                  var best_practice_results_data = dataValue("form.weeding.which_product_have_you_used")(state) || "";
                  var otherProduct = dataValue("form.weeding.ask_which_other_product_have_you_used")(state);
                  console.log("debug", otherProduct);
                  if (best_practice_results_data !== undefined) {

                      return best_practice_results_data.split(" ").map(
                        
                          function(resultId) {
                              return {
                                  result_data: resultId,
                                  best_result_submission:  "FVBPN-" + dataValue("id")(state) + "_weeding_" + resultId,
                                  farm_visit_submission: "FV-" + dataValue("id")(state),
                                  other_submission: otherProduct
                              };
                          }
                          
                      );

                  }
              },
              upsert("FV_Best_Practice_Results__c", "Best_Practice_Result_Submission_ID__c",
                  fields(
                      field("Best_Practice_Result_Submission_ID__c", dataValue("best_result_submission")), //best result submission ID
                      field("FV_Submission_ID__c", dataValue("farm_visit_submission")), //farm visit submission_id
                      relationship("FV_Best_Practices__r", "FV_Submission_ID__c", dataValue("farm_visit_submission")),
                      field("Best_Practice_Result_Type__c", "Weeding"), //this is the actual result type
                      field("Best_Practice_Result_Description__c", function(state){
                        
                          var returnResults = "";
                        
                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "1"){

                              returnResults = "Glyphosate (Eg Round Up)";

                          }

                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "2"){

                              returnResults = "Paraquat (Eg. Gramoxone)";

                          }

                          if(dataValue("result_data")(state) !== undefined && dataValue("result_data")(state) == "3"){

                              returnResults = dataValue("other_submission");
                              console.log("debug", dataValue("other_submission"));
                          }
                          return returnResults;
                        
                      })
                  )
              )

          );
            
              // Upsert Farm Data -- Households that haven't completed FIS
          // Upsert Farm Data -- Households that haven't completed FIS
          beta.each(
            substate=>{
              const itemsFromRepeatGroup = [];
              var createdObjects = [];
              
              var form = dataValue('form')(substate);

              // Check if the property exists and return early if not
              if (!form.hasOwnProperty("field_inventory_survey")) {
                console.log("No FIS to upsert");
                return itemsFromRepeatGroup; // Return an empty array to prevent further execution
              }
              
              var fis_list = dataValue('form.households_completed_fis')(substate);
              const hh_tns_id = dataValue('form.household_tns_id')(substate);

              // Proceed with the logic if the property exists
              if(fis_list.includes(hh_tns_id) === false){
                var fisTag = fis_list;
                console.log("This is the list of visited Households: " + fisTag);
                const householdId = hh_tns_id;
                console.log("This is the household ID: " + householdId);
                const numberOfPlots = dataValue('form.field_inventory_survey.number_of_plots')(substate);
                console.log("This is the number of plots: " + numberOfPlots);
                
                if(numberOfPlots > 1){
                  dataValue('form.field_inventory_survey.general_plot_information')(substate).forEach((plot)=>{
                    itemsFromRepeatGroup.push(plot);
                  });
                }
                else{
                  itemsFromRepeatGroup.push(dataValue('form.field_inventory_survey.general_plot_information')(substate));
                }
                
                console.log(itemsFromRepeatGroup);
                return itemsFromRepeatGroup;
              }
            }, 
            upsertIf(
              dataValue("current_index") !== undefined,
              "Farm__c", "TNS_Id__c",
              fields(
                field("TNS_Id__c", function(substate){
                  const current_index = dataValue("current_index")(substate);
                  var result = "F-0" + current_index + "-" + dataValue('form.household_tns_id')(state);
                  return result;
                }),
                field("Name",  function(substate){
                  const current_index = dataValue("current_index")(substate);
                  var result = "0" + current_index;
                  return result;
                }),
                field("Farm_Size_Coffee_Trees__c", dataValue("total_coffee")),
                field("Farm_Size_Land_Measurements__c", dataValue("farm_size_ha")),
                field("Main_Coffee_Field__c", function(state){
                  var result = false;
                  if(dataValue("current_index")(state) === "1"){
                    result = true;
                  }
                  return result;
                }),
                field("Planted_on_visit_date__c", function(substate){
                  var result = false;
                  if(dataValue("important_notes_planting_dates.planting_period_note_same_date_as_visit")(substate) === "yes"){
                    result = true;
                  }
                  return result;
                }),
                field("Planted_out_of_season__c", function(substate){
                  var result = false;
                  if(dataValue("important_notes_planting_dates.planting_period_note_out_of_season")(substate) === "yes"){
                    result = true;
                  }
                  return result;
                }),
                field("Planted_out_of_season_comments__c", dataValue("important_notes_planting_dates.planting_period_comment_out_of_season")),
                field("Planting_Month_and_Year__c", dataValue("date_planted")),
                field('Farm_GPS_Coordinates__Latitude__s', (substate) => {
                    const coords = dataValue("final_gps")(substate);
                    if (coords) {
                      return coords.split(" ")[0];
                    }
                    return '';
                }),
                field('Farm_GPS_Coordinates__Longitude__s', (substate) => {
                    const coords = dataValue("final_gps")(substate);
                    if (coords) {
                      return coords.split(" ")[1];
                    }
                    return '';
                }),
                field('Altitude__c', (substate) => {
                  const coords = dataValue("final_gps")(substate);
                  if (coords) {
                    return coords.split(" ")[2];
                  }
                  return '';
                }),
                field("Farm_Image_URL__c", function(substate) {
                    var plotPhotoUrl = '';
                    if (dataValue("plot_photo")(substate) !== undefined && dataValue("plot_photo")(substate) !== '') {
                        plotPhotoUrl = "https://www.commcarehq.org/a/" + dataValue('domain')(state) + "/api/form/attachment/" + dataValue('metadata.instanceID')(state) + "/" + dataValue("plot_photo")(substate);
                    }
                    return plotPhotoUrl;
                }),
                relationship("Household__r", "Household_ID__c",function(substate){
                  var result = dataValue('form.household_tns_id')(state);
                  return result;
                }),
                relationship("Latest_Farm_Visit_Record__r", "FV_Submission_ID__c", function(substate){
                  var result = "FV-" + dataValue('id')(state);
                  return result;
                })
              )
            )
          );

            
            //Upsert FIS Variety data -- FT Level Farm Visit
            
            beta.each(
            function(substate){
              var createdObjects = [];
              
              var form = dataValue('form')(substate);
              
              // Check if the property exists and return early if not
              if (!form.hasOwnProperty("field_inventory_survey")) {
                console.log("No FIS to upsert");
                return createdObjects; // Return an empty array to prevent further execution
              }
              
              var fis_list = dataValue('form.households_completed_fis')(substate);
              const hh_tns_id = dataValue('form.household_tns_id')(substate);

              // Proceed with the logic if the property exists
              if (fis_list.includes(hh_tns_id) === false) {
                var fisTag = fis_list;
                console.log("This is the list of visited Households: " + fisTag);
                const householdId = hh_tns_id;
                console.log("This is the household ID: " + householdId);
                const numberOfPlots = dataValue('form.field_inventory_survey.number_of_plots')(substate);
                console.log("This is the number of plots: " + numberOfPlots);
                
                if (fisTag.includes(householdId) === false) {
                  if (numberOfPlots > 1) {
                    dataValue('form.field_inventory_survey.general_plot_information')(substate).forEach((item) => {
                      var varietiesList = item.varieties.split(" ");
                      varietiesList.forEach((variety) => {
                        var varietyQuantity = item[`variety_${variety}`];
                        var createdObject = {
                          id: variety,
                          quantity: varietyQuantity,
                          plot: item.current_index,
                          other_variety: item.other_variety
                        };
                        createdObjects.push(createdObject);
                      });
                    });
                  } else {
                    const item = dataValue('form.field_inventory_survey.general_plot_information')(substate);
                    var varietiesList = item.varieties.split(" ");
                    varietiesList.forEach((variety) => {
                      var varietyQuantity = item[`variety_${variety}`];
                      var createdObject = {
                        id: variety,
                        quantity: varietyQuantity,
                        plot: item.current_index,
                        other_variety: item.other_variety
                      };
                      createdObjects.push(createdObject);
                    });
                  }
                }
                console.log("Created Objects:");
                console.log(createdObjects);
                return createdObjects;
              }
            },
            upsertIf(dataValue("quantity")!==undefined,
            "Coffee_Variety__c", "Name",
              fields(
                field("Name", function(substate){
                  console.log("Variety Number:");
                  console.log(dataValue("id")(substate));
                  console.log(dataValue("id"));
                  const variety = dataValue("id")(substate);
                  const plot = dataValue("plot")(substate);
                  return "CV-0" + variety + "-F-0" + plot + "-" + dataValue('form.household_tns_id')(state);
                }),
                field("Variety_Type_Name__c", function(substate){
                  var result = "";
                  if(dataValue("id")(substate) == "1"){
                    result = "Costa Rica 95";
                  }
                  else if(dataValue("id")(substate) == "2"){
                    result = "SL28 or 34";
                  }
                  else if(dataValue("id")(substate) == "3"){
                    result = "K7";
                  }
                  else if(dataValue("id")(substate) == "4"){
                    result = "Catimor 129";
                  }
                  else if(dataValue("id")(substate) == "5"){
                    result = "Catuai";
                  }
                  else if(dataValue("id")(substate) == "6"){
                    result = "Yellow Catuai";
                  }
                  else if(dataValue("id")(substate) == "7"){
                    result = "F6";
                  }
                  else if(dataValue("id")(substate) == "8"){
                    result = "Caturra";
                  }
                  else if(dataValue("id")(substate) == "9"){
                    result = dataValue("other_variety")(substate);
                  }
                  return result;
                }),
                field("Variety_Number_of_Trees__c", dataValue("quantity")),
                relationship("Farm__r", "TNS_Id__c", function(substate){
                  var result = "F-0" + dataValue("plot")(substate) + "-" + dataValue('form.household_tns_id')(state);
                  return result;
                })
              )
            )
          );

            
            // Upsert Latest Visit with FIS
              beta.each(substate=>{
                
                var createdObject = [];
                
                var form = dataValue('form')(substate);
              
                // Check if the property exists and return early if not
                if (!form.hasOwnProperty("field_inventory_survey")) {
                  console.log("No FIS to upsert");
                  return createdObject; // Return an empty array to prevent further execution
                }
                
                var fis_list = dataValue('form.households_completed_fis')(substate);
                const hh_tns_id = dataValue('form.household_tns_id')(substate);
                  
                if(fis_list.includes(hh_tns_id) === false){
                  createdObject.push(substate);
                  return createdObject;
                }
              }, 
              upsert(
                "Household__c", "Household_ID__c",
                fields(
                  field("Household_ID__c", dataValue('form.household_tns_id')(state)),
                  field("FIS_Completed__c", true),
                  relationship(
                    "Lastest_Visit_with_FIS__r",
                    "FV_Submission_ID__c",
                    substate=>{
                      var result = "FV-" + dataValue("id")(state);
                      return result;
                    }
                    )
                  )
                )
            );


            //upsert training session
          /*    each(
                "$.data",
                upsert("Training_Session__c", "CommCare_Case_Id__c",
                    fields(
                        field("CommCare_Case_Id__c", dataValue("form.training_session")),
                        field("Updated_from_CommCare__c", true)
                    )
                )
            );
          */

          //}

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Production---Farm-Visit---ZW---CommCare----Salesforce:
        source_trigger: webhook
        target_job: Production---Farm-Visit---ZW---CommCare----Salesforce
        condition_type: js_expression
        condition_label: Production - Farm Visit ZM 2022 CommCare  Salesforce
        condition_expression: |
          state.data.form["survey_type"] == "Farm Visit Full - ZM"
        enabled: true
  Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Project-Roles:
    name: Coffee - ZW Nespresso -Ag- - c2 - SalesForce -- CommCare - Project Roles
    jobs:
      Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Project-Roles:
        name: Coffee - ZW Nespresso -Ag- - c2 - SalesForce -- CommCare - Project Roles
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Coffee - ZW Nespresso (Ag) - c2 | SalesForce --> CommCare | Project Roles
          //coffee_zim_c2_agronomy
          //{"uniqueProjectKey":"coffee_zim_c2_agronomy","source":"SF","jobType":"Project Role"}

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/332E700A-B5AC-4A20-8A8B-82CFD6DED9A7",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zim_c2_ag_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state),
                      "n0:FFGs_Observed": null
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Project-Roles:
        source_trigger: webhook
        target_job: Coffee---ZW-Nespresso--Ag----c2---SalesForce----CommCare---Project-Roles
        condition_type: js_expression
        condition_label: Coffee ZW Nespresso Ag c2 SalesForce CommCare Project Roles
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zim_c2_ag"
        enabled: true
  Production---Participants---KE-Nespresso-2024BC---SalesForce----CommCare:
    name: Production - Participants - KE Nespresso 2024BC - SalesForce -- CommCare
    jobs:
      Production---Participants---KE-Nespresso-2024BC---SalesForce----CommCare:
        name: Production - Participants - KE Nespresso 2024BC - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee KE - Nespresso 2024BC
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - KE Nespresso 2024BC
          // JOB NAME :: Production | Participants - KE Nespresso 2024BC | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Participant","source":"SF","uniqueProjectKey":"coffee_ke_2023c"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org
          // EDITED :: Emmanuel Mwaka | emwaka@tns.org

          each(
              "$.data.participants[*]",
              submit(
                fields(
                  field("@", function(state) {
                    return {
                      "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                      "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                      "uiVersion": "1",
                      "version": "325",
                      "name": "New Participant",
                    };
                  }),
                  field("Name", function(state){
                    var name = '';
                    if(dataValue("participantName")(state) !== null) {
                      name = dataValue("participantName")(state);
                    }
                    if(dataValue("participantMiddleName")(state) !== null) {
                      name = name+' '+dataValue("participantMiddleName")(state);
                    }
                    if(dataValue("participantLastName")(state) !== null) {
                      name = name+' '+dataValue("participantLastName")(state);
                    }
                    return name;
                  }),
                  field("First_Name", dataValue("participantName")),
                  field("Middle_Name", dataValue("participantMiddleName")),
                  field("Last_Name", dataValue("participantLastName")),
                  field("Age", dataValue("participantAge")),
                  field("Gender", dataValue("participantGender")),
                  field("Phone_Number", dataValue("participantPhoneNumber")),
                  field("Farmer_Id", dataValue("tnsId")),
                  field("Farmer_Number", function(state){
                    var tnsId = dataValue("tnsId")(state);
                    var farmerNumber = "0" + tnsId.substr(tnsId.length-1,1);
                    return farmerNumber;
                  }),
                  field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                  field("Household_Id", dataValue("householdId")),
                  field("Household_Number", dataValue("HHID")),
                  field("Number_of_Trees", dataValue("householdFarmSize")),
                  field("Parent_Id", dataValue("trainingGroupId")),
                  field("Status", dataValue("status")),
                  field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                  field("Case_Id", dataValue("commCareCaseId")),
                  field("Name_Household_Concat", function(state){
                    var name = '';
                    var tnsId = dataValue("tnsId")(state);
                    var hhNumber = dataValue("HHID")(state);
                    var farmerNumber = "0" + tnsId.substr(tnsId.length-1,1);
                    
                    if(dataValue("participantName")(state) !== null) {
                      name = dataValue("participantName")(state);
                    }
                    if(dataValue("participantMiddleName")(state) !== null) {
                      name = name+' '+dataValue("participantMiddleName")(state);
                    }
                    if(dataValue("participantLastName")(state) !== null) {
                      name = name+' '+dataValue("participantLastName")(state);
                    }
                    return name+' '+hhNumber+'-'+farmerNumber;
                  }),
                  
                  field("n0:case", function(state) {
                    return {
                      "@": {
                        "case_id": dataValue("commCareCaseId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": function(){
                          var name = '';
                          if(dataValue("participantName")(state) !== null) {
                            name = dataValue("participantName")(state);
                          }
                          if(dataValue("participantMiddleName")(state) !== null) {
                            name = name+' '+dataValue("participantMiddleName")(state);
                          }
                          if(dataValue("participantLastName")(state) !== null) {
                            name = name+' '+dataValue("participantLastName")(state);
                          }
                          return name;
                        },
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_ke_2024bc_participant"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("commCareCaseId")(state),
                        "n0:First_Name": dataValue("participantName")(state),
                        "n0:Middle_Name": dataValue("participantMiddleName")(state),
                        "n0:Last_Name": dataValue("participantLastName")(state),
                        "n0:Age": dataValue("participantAge")(state),
                        "n0:Gender": dataValue("participantGender")(state),
                        "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                        "n0:Farmer_Id": dataValue("tnsId")(state),
                        "n0:Farmer_Number": function(){
                          var tnsId = dataValue("tnsId")(state);
                          var farmerNumber = tnsId.substr(tnsId.length-1,1);
                          return farmerNumber;
                        },
                        "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                        "n0:Household_Id": dataValue("householdId")(state),
                        "n0:Household_Number": dataValue("HHID")(state),
                        "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                        "n0:Status": dataValue("status")(state),
                        "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                        "n0:Name_Household_Concat": function(){
                          var name = '';
                          var tnsId = dataValue("tnsId")(state);
                          var hhNumber = dataValue("HHID")(state);
                          var farmerNumber = tnsId.substr(tnsId.length-1,1);
                          
                          if(dataValue("participantName")(state) !== null) {
                            name = dataValue("participantName")(state);
                          }
                          if(dataValue("participantMiddleName")(state) !== null) {
                            name = name+' '+dataValue("participantMiddleName")(state);
                          }
                          if(dataValue("participantLastName")(state) !== null) {
                            name = name+' '+dataValue("participantLastName")(state);
                          }
                          return name+' '+hhNumber+'-'+farmerNumber;
                        },
                        "n0:TNS_Id": dataValue("tnsId")(state),
                        "n0:Parent_Id": dataValue("trainingGroupId")(state)
                      },
                      "n0:index": {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_ke_2024bc_training_group"
                          },
                          "#": dataValue("trainingGroupId")(state)
                        }
                      }
                    };
                  }),
                  field("n1:meta", function(state) {
                    return {
                      "@": {
                        "xmlns:n1": "http://openrosa.org/jr/xforms"
                      },
                      "n1:deviceID": "867066029216796",
                      "n1:timeStart": new Date().toISOString(),
                      "n1:timeEnd": new Date().toISOString(),
                      "n1:username": "api",
                      "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                    };
                  })
                )
              )
            );
            
            //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---KE-Nespresso-2024BC---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---KE-Nespresso-2024BC---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Coffee KE 2024BC SalesForce CommCare Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_ke_2024bc"
        enabled: true
  Production---Training-Observation---CommCare----Salesforce---Agronomy-Projects:
    name: Production - Training Observation - CommCare -- Salesforce - Agronomy
      Projects
    jobs:
      Production---Training-Observation---CommCare----Salesforce---Agronomy-Projects:
        name: Production - Training Observation - CommCare -- Salesforce - Agronomy
          Projects
        adaptor: '@openfn/language-salesforce@v1.3.2'
        credential: null
        body: |
          //TRAINING OBSERVATION JOB FOR ALL AGRONOMY PROJECTS


          //Ethiopia Nespresso, Regrow and HWG (Agronomy) Training Observation
          if(state.data.app_id == "f079b0daae1d4d34a89e331dc5a72fbd"|| 
              state.data.app_id == "ff36e62b9fcc46628ec1be58d50abb5f"||
              state.data.app_id=="87d0e772c7164d1c8f5aad2bda9a9892" || 
              state.data.app_id =="0f123c9b44e04a8f93f94049c01ce6b3" || 
              state.data.app_id == "e226fd89f1ff41debde611a81daa9970" || 
              state.data.app_id == "e9fb922a1526447b9485b26c4a1b8eb5" || 
              state.data.app_id == "8f77f25440e5412ba0820a39271374f0" || 
              state.data.app_id == "d63cdcf6b9d849548413ca356871cd3a" ||
              state.data.app_id == "dd10fc19040d40f0be48a447e1d2727c"
              ){
          	
          	//Create the observation record first prior
          	//to creating the observation result records.
            console.log("SHOULD WORK HERE");
          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),
          	      
          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      // field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan__c", 
          	      function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0]; 
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1]; 
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2]; 
          	        }
          	      })
          	      
          	      
          	    )
          	  )),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_prepare_and_implement_agronomy_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_prepare_and_implement_agronomy_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_prepare_and_implement_agronomy_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_teaching_clarity_and_effectiveness-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_teaching_clarity_and_effectiveness-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_teaching_clarity_and_effectiveness-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_knowledge_of_trainer_on_agronomy-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_knowledge_of_trainer_on_agronomy-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_knowledge_of_trainer_on_agronomy-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",   
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeet_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeet_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));
          	
          }

          //Majang Forest Training Observation
          else if(state.data.app_id == "da5e5dd32b6a4a68b8c6e0f80fe42650"){
          	
          	//Create the observation record first prior
          	//to creating the observation result records.
            console.log("SHOULD NOT WORK HERE");
          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),

          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),

          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),

          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);
          	        }
          	        return observerSignatureUrl;
          	      }),

          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0];
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1];
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2];
          	        }
          	      })


          	    )
          	  )),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_prepare_and_implement_agronomy_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_prepare_and_implement_agronomy_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_prepare_and_implement_agronomy_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_teaching_clarity_and_effectiveness-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_teaching_clarity_and_effectiveness-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_teaching_clarity_and_effectiveness-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_knowledge_of_trainer_on_agronomy-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_knowledge_of_trainer_on_agronomy-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_knowledge_of_trainer_on_agronomy-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeemf_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeemf_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));

          }

          //Uganda Agronomy Training Observation
          else if(state.data.app_id == "bca69b9caad5441bb9c782e91d829e4b" || state.data.app_id == "03a969f33e9648cb88c36114896f3cbe"){
          	
          	//Create the observation record first prior
          	//to creating the observation result records.

          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.training_group")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.record_type")),
          	      field("Date__c", dataValue("form.date")),
          	      field("Observation_Type__c", dataValue("form.type_of_training_observation")),
          	      
          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      /**
          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      */

          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	  		    if(dataValue("form.gps_information.gps_coordinates")(state) !== undefined && dataValue("form.gps_information.gps_coordinates")(state) !== '') {
          	  		        var coordinates = dataValue("form.gps_information.gps_coordinates")(state).split(' ');
          	  		        return coordinates[0]; 
          	  
          	  		  	} else if(dataValue("form.gps_information_retry.gps_coordinates")(state) !== undefined && dataValue("form.gps_information_retry.gps_coordinates")(state) !== ''){
          	  		        var coordinates = dataValue("form.gps_information_retry.gps_coordinates")(state).split(' ');
          	  		        return coordinates[0];
          	  		    }
          	  		}),
          	  		field("Observation_Location__Longitude__s", function(state) {
          	  		    if(dataValue("form.gps_information.gps_coordinates")(state) !== undefined && dataValue("form.gps_information.gps_coordinates")(state) !== '') {
          	  		        var coordinates = dataValue("form.gps_information.gps_coordinates")(state).split(' ');
          	  		        return coordinates[1]; 
          	  
          	  		  	} else if(dataValue("form.gps_information_retry.gps_coordinates")(state) !== undefined && dataValue("form.gps_information_retry.gps_coordinates")(state) !== ''){
          	  		        var coordinates = dataValue("form.gps_information_retry.gps_coordinates")(state).split(' ');
          	  		        return coordinates[1];
          	  		    }
          	  		}),
          	  		field("Altitude__c", function(state) {
          	  		    if(dataValue("form.gps_information.gps_coordinates")(state) !== undefined && dataValue("form.gps_information.gps_coordinates")(state) !== '') {
          	  		        var coordinates = dataValue("form.gps_information.gps_coordinates")(state).split(' ');
          	  		        return coordinates[2]; 
          	  
          	  		  	} else if(dataValue("form.gps_information_retry.gps_coordinates")(state) !== undefined && dataValue("form.gps_information_retry.gps_coordinates")(state) !== ''){
          	  		        var coordinates = dataValue("form.gps_information_retry.gps_coordinates")(state).split(' ');
          	  		        return coordinates[2];
          	  		    }
          	  		})
          	      
          	      
          	    )
          	  )),


          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT BUSINESS PRACTICE

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_knowledge_of_trainer_on_business_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_knowledge_of_trainer_on_business_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Business_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_knowledge_of_trainer_on_business_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_knowledge_of_trainer_on_business_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Business_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_knowledge_of_trainer_on_business_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_knowledge_of_trainer_on_business_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Business_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",   
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeug_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeug_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));

          }

          //DRC Agronomy Training Observation
          else if(state.data.app_id == "eeddc901b4aa4652b7252240152b20d5" || state.data.app_id == "5372957f094346659170e319aa0ed456" || state.data.app_id == "163fe0239f924d18aaf70e6292a48677"){
          	//Training Observations
          	//Production - Coffee DRC | CommCare --> SalesForce | Training Observations

          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),
          	      field("Observation_Type__c", dataValue("form.type_of_training_observation")),
          	      
          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0]; 
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1]; 
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2]; 
          	        }
          	      })
          	      
          	      
          	    )
          	  )),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
          	 
          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_prepare_and_implement_agronomy_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_prepare_and_implement_agronomy_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_prepare_and_implement_agronomy_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_teaching_clarity_and_effectiveness-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_teaching_clarity_and_effectiveness-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_teaching_clarity_and_effectiveness-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_knowledge_of_trainer_on_agronomy-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_knowledge_of_trainer_on_agronomy-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_knowledge_of_trainer_on_agronomy-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",   
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_drc_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_drc_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));
          	  
          }

          //Zimbabwe Agronomy Training Observation
          else if(state.data.app_id == "b75286e874c74eb09b8da436709d7f3c" || state.data.app_id == "c14d231df6e142deb9bdd44319287437" || state.data.app_id == "2b0b8dc3eff145889eaa3d085bfaadaf"){
          	
          	//Training Observation
          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),
          	      field("Observation_Type__c", dataValue("form.type_of_training_observation")),
          	      
          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0]; 
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1]; 
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2]; 
          	        }
          	      })
          	      
          	      
          	    )
          	  )),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_prepare_and_implement_agronomy_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_prepare_and_implement_agronomy_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_prepare_and_implement_agronomy_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_teaching_clarity_and_effectiveness-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_teaching_clarity_and_effectiveness-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_teaching_clarity_and_effectiveness-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_knowledge_of_trainer_on_agronomy-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_knowledge_of_trainer_on_agronomy-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_knowledge_of_trainer_on_agronomy-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",   
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c",  "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_zim_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_zim_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));

          }

          //Kenya Nespresso Training Observation
          else if(state.data.app_id == "30cee26f064e403388e334ae7b0c403b" || state.data.app_id == "4302942f5eb84ab6b73fc1fd607cda1f" || state.data.app_id == "ae6ad2d1fb104da5be0dbb1d431db8b4"){

          	//Create the observation record first prior
          	//to creating the observation result records.

          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),
          	      
          	      field("Male_Participants__c", function(state){
          	        console.log("Male PARTICIPANT")
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0]; 
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1]; 
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2]; 
          	        }
          	      })
          	      
          	      
          	    )
          	  )),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
          	  console.log("Last Last by Burna Boy 2!");
          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      console.log("Observation_Result__c");
          	      return dataValue("id")(state) + "coffeeke_prepare_and_implement_agronomy_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_prepare_and_implement_agronomy_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_prepare_and_implement_agronomy_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_teaching_clarity_and_effectiveness-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_teaching_clarity_and_effectiveness-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_teaching_clarity_and_effectiveness-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_knowledge_of_trainer_on_agronomy-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_knowledge_of_trainer_on_agronomy-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_knowledge_of_trainer_on_agronomy-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",   
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffeeke_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffeeke_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));
          	
          }

          //ET Herz Training Observation
          else if(state.data.app_id == "22d766b8c673413eab2d9042dfc904e0" || state.data.app_id == "7f47bffde10d46598276b14748298190"){

          	//Create the observation record first prior
          	//to creating the observation result records.

          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),
          	      field("Observation_Type__c", dataValue("form.type_of_training_observation")),
          	      
          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0]; 
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1]; 
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2]; 
          	        }
          	      })
          	      
          	      
          	    )
          	  )),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
          	  
          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_prepare_and_implement_agronomy_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_prepare_and_implement_agronomy_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_prepare_and_implement_agronomy_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_teaching_clarity_and_effectiveness-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_teaching_clarity_and_effectiveness-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_teaching_clarity_and_effectiveness-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_knowledge_of_trainer_on_agronomy-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_knowledge_of_trainer_on_agronomy-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_knowledge_of_trainer_on_agronomy-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",   
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_herz_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_herz_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));
          	
          }

          //ET JDE Training Observation
          else if(state.data.app_id == "30714a65ecab4d2da5aa78ca91cefcf5"){

          	//Create the observation record first prior
          	//to creating the observation result records.

          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),
          	      field("Observation_Type__c", dataValue("form.type_of_training_observation")),
          	      
          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0]; 
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1]; 
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2]; 
          	        }
          	      })
          	      
          	      
          	    )
          	  )),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
          	  
          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_prepare_and_implement_agronomy_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_prepare_and_implement_agronomy_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_prepare_and_implement_agronomy_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_teaching_clarity_and_effectiveness-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_teaching_clarity_and_effectiveness-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_teaching_clarity_and_effectiveness-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_knowledge_of_trainer_on_agronomy-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_knowledge_of_trainer_on_agronomy-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_knowledge_of_trainer_on_agronomy-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",   
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_jde_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_jde_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));
          	
          }

          //ET UNIDO Training Observation
          else if(state.data.app_id == "4fd02c3be0104da29cba1844053b9301"){

          	//Create the observation record first prior
          	//to creating the observation result records.

          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),
          	      field("Observation_Type__c", dataValue("form.type_of_training_observation")),
          	      
          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0]; 
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1]; 
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2]; 
          	        }
          	      })
          	      
          	      
          	    )
          	  )),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
          	  
          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_prepare_and_implement_agronomy_practice-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_prepare_and_implement_agronomy_practice-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_prepare_and_implement_agronomy_practice-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_prepare_and_implement_agronomy_practice"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_teaching_clarity_and_effectiveness-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_teaching_clarity_and_effectiveness-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_teaching_clarity_and_effectiveness-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_teaching_clarity_and_effectiveness"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_knowledge_of_trainer_on_agronomy-p1";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_knowledge_of_trainer_on_agronomy-p2";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          	    ))),

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_knowledge_of_trainer_on_agronomy-p3";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe6AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_knowledge_of_trainer_on_agronomy"),
          	    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          	    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          	    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          	    ))),

          	//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA

          	each(
          	  "$.data",
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_shows_professionalism";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_shows_professionalism"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_is_prepared_and_organized";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_is_prepared_and_organized"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          	  ))),

          	each(
          	  "$.data",   
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_engages_participants";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_engages_participants"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_facilitates_openings_and_closings";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_facilitates_openings_and_closings"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_leads_activities";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_leads_activities"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_leads_discussions";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_leads_discussions"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_follows_lesson_plans";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_follows_lesson_plans"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          	  ))),

          	each(
          	  "$.data",  
          	  upsert("Observation_Result__c", "Submission_ID__c",
          	    fields(
          	    field("Submission_ID__c", function(state) {
          	      return dataValue("id")(state) + "coffee_ag_unido_manages_time";
          	    }),
          	    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          	      return state.references[state.references.length-1].id;
          	    }),*/
          	    field("RecordTypeId", "01224000000gQe7AAE"),
          	    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_ag_unido_manages_time"),
          	    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          	    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          	  )));
          	
          }

          //Coffee PR-C2019 | PR-C2020 Training Observation
          else if(state.data.app_id == "4484e9ef07a9474fb092d1f1bd1f4826" || state.data.app_id == "32433b61b5a040b19c4c1ab8102d590d"){
          	
          	//Create the observation record first prior
          	//to creating the observation result records.
          	each(
          	  "$.data",
          	  upsert("Observation__c", "Submission_ID__c",
          	    fields(
          	      field("Submission_ID__c", dataValue("id")),
          	      field("Observer__c", dataValue("form.Observer")),
          	      field("Trainer__c", dataValue("form.trainer_salesforce_id")),
          	      field("Training_Group__c", dataValue("form.Which_Group_Is_Farmer_Trainer_Teaching")),
          	      field("Training_Session__c", dataValue("form.selected_session")),
          	      field("RecordTypeId", dataValue("form.Record_Type")),
          	      field("Date__c", dataValue("form.Date")),
          	      
          	      field("Male_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Male_Participants_In_Attendance")(state));
          	      }),
          	      field("Female_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Female_Participants_In_Attendance")(state));
          	      }),
          	      field("Number_of_Participants__c", function(state){
          	        return parseInt(dataValue("form.Current_session_participants.Total_Participants_In_Attendance")(state));
          	      }),
          	      
          	      field("Shared_Action_Plan__c", dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan")),
          	      field("Shared_Action_Plan_Comments__c", function(state){
          	        if(dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state) !== undefined) {
          	          return dataValue("form.Feedback_And_Coaching_With_The_Farmer_Trainer.Share_Action_Plan_Comments")(state);
          	        } else {
          	          return '';
          	        }
          	      }),
          	      field("Did_Well__c", dataValue("form.Current_Session_Review.Did_Well")),
          	      field("To_Improve__c", dataValue("form.Current_Session_Review.To_Improve")),
          	      
          	      field("Photo_of_Facilitator_URL__c", function(state) {
          	        var photoUrl = '';
          	        if(dataValue("form.Photo")(state) !== undefined && dataValue("form.Photo")(state) !== '') {
          	          photoUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Photo")(state);  
          	        }
          	        return photoUrl;
          	      }),
          	      field("Farmer_Trainer_Signature__c", function(state) {
          	        var trainerSignatureUrl = '';
          	        if(dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== undefined && dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state) !== '') {
          	          trainerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Farmer_Trainer_Signature_Section.Farmer_Trainer_Signature")(state);  
          	        }
          	        return trainerSignatureUrl;
          	      }),
          	      field("Observer_Signature__c", function(state) {
          	        var observerSignatureUrl = '';
          	        if(dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== undefined && dataValue("form.Observer_Signature_Section.Observer_Signature")(state) !== '') {
          	          observerSignatureUrl = "https://www.commcarehq.org/a/"+dataValue("domain")(state)+"/api/form/attachment/"+dataValue("form.meta.instanceID")(state)+"/"+dataValue("form.Observer_Signature_Section.Observer_Signature")(state);  
          	        }
          	        return observerSignatureUrl;
          	      }),
          	      
          	      field("Observation_Location__Latitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[0]; 
          	        }
          	      }),
          	      field("Observation_Location__Longitude__s", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[1]; 
          	        }
          	      }),
          	      field("Altitude__c", function(state) {
          	        if(dataValue("form.meta.location.#text")(state) !== undefined) {
          	          var coordinates = dataValue("form.meta.location.#text")(state).split(' ');
          	          return coordinates[2]; 
          	        }
          	      })
          	      
          	      
          	    )
          	  ));

          	//process for PR C2019
          	if(state.data.app_id == "4484e9ef07a9474fb092d1f1bd1f4826"){

          		//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_prepare_and_implement_agronomy_practice-p1";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_prepare_and_implement_agronomy_practice"),
          		    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          		    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_prepare_and_implement_agronomy_practice-p2";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_prepare_and_implement_agronomy_practice"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          		    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_prepare_and_implement_agronomy_practice-p3";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_prepare_and_implement_agronomy_practice"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          		    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          		    ))),

          		//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS
          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_teaching_clarity_and_effectiveness-p1";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_teaching_clarity_and_effectiveness"),
          		    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          		    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_teaching_clarity_and_effectiveness-p2";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_teaching_clarity_and_effectiveness"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          		    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_teaching_clarity_and_effectiveness-p3";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_teaching_clarity_and_effectiveness"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          		    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          		    ))),

          		//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY
          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_knowledge_of_trainer_on_agronomy-p1";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_knowledge_of_trainer_on_agronomy"),
          		    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          		    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_knowledge_of_trainer_on_agronomy-p2";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_knowledge_of_trainer_on_agronomy"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          		    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_knowledge_of_trainer_on_agronomy-p3";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_knowledge_of_trainer_on_agronomy"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          		    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          		    ))),

          		//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA
          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_shows_professionalism";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_shows_professionalism"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_is_prepared_and_organized";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_is_prepared_and_organized"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          		  ))),

          		each(
          		  "$.data",   
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_engages_participants";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_engages_participants"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_facilitates_openings_and_closings";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_facilitates_openings_and_closings"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_leads_activities";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_leads_activities"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_leads_discussions";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_leads_discussions"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_follows_lesson_plans";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_follows_lesson_plans"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2019_manages_time";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2019_manages_time"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          		  )));
          	
          	}


          	//process for PR C2020
          	else if(state.data.app_id == "32433b61b5a040b19c4c1ab8102d590d"){

          		//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- PREPARE AND IMPLEMENT AGRONOMY PRACTICE
          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_prepare_and_implement_agronomy_practice-p1";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_prepare_and_implement_agronomy_practice"),
          		    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_One_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          		    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_prepare_and_implement_agronomy_practice-p2";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_prepare_and_implement_agronomy_practice"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Two_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          		    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_prepare_and_implement_agronomy_practice-p3";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_prepare_and_implement_agronomy_practice"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Three_Feedback.Prepare_And_Implement_Agronomy_Practice")),
          		    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          		    ))),

          		//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- TEACHING CLARITY AND EFFECTIVENESS
          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_teaching_clarity_and_effectiveness-p1";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_teaching_clarity_and_effectiveness"),
          		    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_One_Feedback.Teaching_Clarity_And_Effectiveness")),
          		    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_teaching_clarity_and_effectiveness-p2";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_teaching_clarity_and_effectiveness"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Two_Feedback.Teaching_Clarity_And_Effectiveness")),
          		    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_teaching_clarity_and_effectiveness-p3";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_teaching_clarity_and_effectiveness"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Three_Feedback.Teaching_Clarity_And_Effectiveness")),
          		    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          		    ))),

          		//CREATE OBSERVATION RESULTS FOR EACH PARTICIPANT -- KNOWLEDGE OF TRAINER ON AGRONOMY
          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_knowledge_of_trainer_on_agronomy-p1";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_knowledge_of_trainer_on_agronomy"),
          		    field("Participant_Sex__c", dataValue("form.Participant_One_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_One_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          		    field("Comments__c", dataValue("form.Participant_One_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_knowledge_of_trainer_on_agronomy-p2";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_knowledge_of_trainer_on_agronomy"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Two_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Two_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          		    field("Comments__c", dataValue("form.Participant_Two_Feedback.participant_comments"))
          		    ))),

          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_knowledge_of_trainer_on_agronomy-p3";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe6AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_knowledge_of_trainer_on_agronomy"),
          		    field("Participant_Sex__c", dataValue("form.Participant_Three_Feedback.Participant_Gender")),
          		    field("Result__c", dataValue("form.Participant_Three_Feedback.Knowledge_Of_Trainer_On_Agronomy")),
          		    field("Comments__c", dataValue("form.Participant_Three_Feedback.participant_comments"))
          		    ))),

          		//CREATE OBSERVATION RESULTS FOR EACH TRAINING OBSERVATION CRITERIA
          		each(
          		  "$.data",
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_shows_professionalism";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_shows_professionalism"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Shows_Professionalism_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_is_prepared_and_organized";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_is_prepared_and_organized"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Is_Prepared_and_Organized_Comments"))
          		  ))),

          		each(
          		  "$.data",   
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_engages_participants";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_engages_participants"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Engages_Participants")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Engages_Participants_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_facilitates_openings_and_closings";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_facilitates_openings_and_closings"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Facilitates_Openings_and_Closings_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_leads_activities";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_leads_activities"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Activities")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Activities_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_leads_discussions";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_leads_discussions"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Leads_Discussions")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Leads_Discussions_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_follows_lesson_plans";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_follows_lesson_plans"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Follows_Lesson_Plans_Comments"))
          		  ))),

          		each(
          		  "$.data",  
          		  upsert("Observation_Result__c", "Submission_ID__c",
          		    fields(
          		    field("Submission_ID__c", function(state) {
          		      return dataValue("id")(state) + "coffee_pr_2020_manages_time";
          		    }),
          		    relationship("Observation__r", "Submission_ID__c", dataValue("id")),/*function(state){
          		      return state.references[state.references.length-1].id;
          		    }),*/
          		    field("RecordTypeId", "01224000000gQe7AAE"),
          		    relationship("Observation_Criterion__r", "Unique_Name__c", "coffee_pr_2020_manages_time"),
          		    field("Result__c", dataValue("form.Ratings_and_Comments.Manages_Time")),
          		    field("Comments__c", dataValue("form.Ratings_and_Comments.Manages_Time_Comments"))
          		  )));

          	}
          	
          }

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Observation---CommCare----Salesforce---Agronomy-Projects:
        source_trigger: webhook
        target_job: Production---Training-Observation---CommCare----Salesforce---Agronomy-Projects
        condition_type: js_expression
        condition_label: Production - Training Observation CommCare Salesforce Agronomy Projects
        condition_expression: |
          state.data.form["survey_type"] == "Training Observation - Agronomy"
        enabled: true
  Production---Coffee-ZW-Nespresso-C2021---Demo-Plot-Observations---CommCare----SalesForce:
    name: Production - Coffee ZW Nespresso C2021 - Demo Plot Observations - CommCare
      -- SalesForce
    jobs:
      DPO---ZIM-Nespresso-C2021---CommCare---SalesForce:
        name: DPO - ZIM Nespresso C2021 - CommCare - SalesForce
        adaptor: '@openfn/language-salesforce@4.6.5'
        credential: ymugenga@tns.org-Salesforce-Integration
        body: |
          //Demo Plot Observations
          //Production - Coffee ZW NN 2021C | Demo Plot Observations | CommCare --> SalesForce

          each(
            "$.data",
            upsert(
              "Observation__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("id")),
                field("Observer__c", dataValue("form.observer")),
                field("Trainer__c", dataValue("form.trainer")),
                field("Training_Group__c", dataValue("form.training_group")),
                field("RecordTypeId", dataValue("form.record_type")),
                field("Date__c", dataValue("form.date")),
                field("Comments_1__c", dataValue("form.visit_comments")),
                field("Demo_Plot_Photo__c", function (state) {
                  var demoPlotPhotoUrl = "";
                  if (
                    dataValue("form.Demo_Plot_Photo")(state) !== undefined &&
                    dataValue("form.Demo_Plot_Photo")(state) !== ""
                  ) {
                    demoPlotPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.Demo_Plot_Photo")(state);
                  }
                  return demoPlotPhotoUrl;
                }),

                field("Observer_Signature__c", function (state) {
                  var observerSignatureUrl = "";
                  if (
                    dataValue("form.agronomy_advisor_signature")(state) !== undefined &&
                    dataValue("form.agronomy_advisor_signature")(state) !== ""
                  ) {
                    observerSignatureUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue("form.agronomy_advisor_signature")(state);
                  }
                  return observerSignatureUrl;
                }),

                field("Observation_Location__Latitude__s", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[0];
                  }
                }),
                field("Observation_Location__Longitude__s", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[1];
                  }
                }),
                field("Altitude__c", function (state) {
                  if (dataValue("form.meta.location.#text")(state) !== undefined) {
                    var coordinates = dataValue("form.meta.location.#text")(state).split(
                      " "
                    );
                    return coordinates[2];
                  }
                })
              )
            )
          );

          // Cover Crop Data Handler
          beta.each(
            function (state) {
              //incoming Covercrop
              var covercropping_data = dataValue(
                "form.best_practice_questions.covercropping.covercrop_present"
              )(state);

              if (covercropping_data !== undefined) {
                return covercropping_data.split(" ").map(function (resultId) {
                  return {
                    result_data: resultId,
                    dpo_submission: dataValue("id")(state) + "coffee_global__covercrop_planted" + resultId,
                  };
                });
              }
            },
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", dataValue("dpo_submission")),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__covercrop_planted"
                ),
                field("Result__c", function (state) {
                  var returnResults = "";

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "1"
                  ) {
                    returnResults = "Arachis";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "2"
                  ) {
                    returnResults = "Beans";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "3"
                  ) {
                    returnResults = "Mulch";
                  }

                  if (
                    dataValue("result_data")(state) !== undefined &&
                    dataValue("result_data")(state) == "0"
                  ) {
                    returnResults = "No Covercropping Practice";
                  }

                  return returnResults;
                })
              )
            )
          );

          // Create results for Compost Heap
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__compost_heap";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__compost_heap"
                ),
                field("Result__c", function (state) {
                  var returnCompost = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) !== undefined
                  ) {
                    returnCompost = "Yes, compost or manure heap seen";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.present_compost_heap"
                    )(state) !== undefined
                  ) {
                    returnCompost = "No compost or manure heap seen";
                  }
                  return returnCompost;
                }),
                field("Compost_Photo__c", function (state) {
                  var compostPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.compost_heap.compost_heap_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.compost_heap.compost_heap_photo"
                    )(state) !== ""
                  ) {
                    compostPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.compost_heap.compost_heap_photo"
                      )(state);
                  }
                  return compostPhotoUrl;
                })
              )
            )
          );

          // Create results for Weed Management
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__weed_management";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__weed_management"
                ),

                //Q1
                field("Result__c", function (state) {
                  var returnWeeds = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) !== undefined
                  ) {
                    returnWeeds = "Yes, field dug";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.has_the_demo_plot_been_dug"
                    )(state) !== undefined
                  ) {
                    returnWeeds = "No sign of digging";
                  }
                  return returnWeeds;
                }),

                //Q2
                field("Result_Text__c", function (state) {
                  var returnWeeds2 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "0" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "No weeds under the tree canopy";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "1" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "Few weeds under the tree canopy";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) == "2" &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_many_weeds_are_under_the_tree_canopy"
                    )(state) !== undefined
                  ) {
                    returnWeeds2 = "Many weeds under the tree canopy";
                  }

                  return returnWeeds2;
                }),

                //Q3
                field("Result_Text_Two__c", function (state) {
                  var returnWeeds3 = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) == "1"
                  ) {
                    returnWeeds3 =
                      "Weeds are less than 30cm tall or 30cm spread for grasses";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.how_big_are_the_weeds"
                    )(state) == "2"
                  ) {
                    returnWeeds3 =
                      "Weeds are more than 30cm tall or 30cm spread for grasses";
                  }
                  return returnWeeds3;
                }),

                field("Weed_Management_Photo__c", function (state) {
                  var weedsPhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.weed_management.weed_management_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.weed_management.weed_management_photo"
                    )(state) !== ""
                  ) {
                    weedsPhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.weed_management.weed_management_photo"
                      )(state);
                  }
                  return weedsPhotoUrl;
                })
              )
            )
          );

          // Create results for Shade Management
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__shade_management";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__shade_management"
                ),
                field("Result__c", function (state) {
                  var returnShade = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "0"
                  ) {
                    returnShade = "NO shade, less than 5%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "1"
                  ) {
                    returnShade = "Light shade, 5 to 20%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "2"
                  ) {
                    returnShade = "Medium shade, 20 to 40%";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.level_of_shade_present"
                    )(state) == "3"
                  ) {
                    returnShade = "Heavy shade, over 40%";
                  }
                  return returnShade;
                }),
                field("Shade_Management_Photo__c", function (state) {
                  var shadePhotoUrl = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.shade_management.shade_management_photo"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.shade_management.shade_management_photo"
                    )(state) !== ""
                  ) {
                    shadePhotoUrl =
                      "https://www.commcarehq.org/a/" +
                      dataValue("domain")(state) +
                      "/api/form/attachment/" +
                      dataValue("form.meta.instanceID")(state) +
                      "/" +
                      dataValue(
                        "form.best_practice_questions.shade_management.shade_management_photo"
                      )(state);
                  }
                  return shadePhotoUrl;
                })
              )
            )
          );

          // Create results for Mulch
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__mulch";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__mulch"
                ),
                field("Result__c", function (state) {
                  var returnMulch = "";
                  if (
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) == "1"
                  ) {
                    returnMulch = "Yes, Some mulch seen";
                  } else if (
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) !== undefined &&
                    dataValue(
                      "form.best_practice_questions.mulch.mulch_under_the_canopy"
                    )(state) == "0"
                  ) {
                    returnMulch = "No mulch seen";
                  }
                  return returnMulch;
                }),
                field("Result_Text__c", function (state) {
                  var returnMulch2 = "";
                  if (
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) == "1"
                  ) {
                    returnMulch2 = "Soil can be seen clearly, less than 2cm of mulch";
                  } else if (
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.mulch.thickness_of_mulch")(
                      state
                    ) == "2"
                  ) {
                    returnMulch2 = "Soil can not be seen, more than 2cm of mulch";
                  }
                  return returnMulch2;
                })
              )
            )
          );

          // Create results for Vetiver Planted
          each(
            "$.data",
            upsert(
              "Observation_Result__c",
              "Submission_ID__c",
              fields(
                field("Submission_ID__c", function (state) {
                  return dataValue("id")(state) + "coffee_global__vetiver_planted";
                }),
                field("Observation__c", function (state) {
                  return state.references[state.references.length - 1].id;
                }),
                field("RecordTypeId", "01224000000gQe5AAE"),
                relationship(
                  "Observation_Criterion__r",
                  "Unique_Name__c",
                  "coffee_global__vetiver_planted"
                ),
                field("Result__c", function (state) {
                  var returnVetiver = "";
                  if (
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) == "1"
                  ) {
                    returnVetiver = "Yes. Row of vetiver planted";
                  } else if (
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) !== undefined &&
                    dataValue("form.best_practice_questions.vetiver.vetiver_planted")(
                      state
                    ) == "0"
                  ) {
                    returnVetiver = "No. Vetiver not planted";
                  }
                  return returnVetiver;
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->DPO---ZIM-Nespresso-C2021---CommCare---SalesForce:
        source_trigger: webhook
        target_job: DPO---ZIM-Nespresso-C2021---CommCare---SalesForce
        condition_type: js_expression
        condition_label: Coffee ZW Nespresso C2021 Demo Plot Observations CommCare SalesForce
        condition_expression: |
          state.data.form["survey_type"] == "Demo Plot Observation" && state.data["app_id"] == "2b0b8dc3eff145889eaa3d085bfaadaf"
        enabled: true
  Production---Coffee-ZIM---SalesForce----CommCare---Training-Groups:
    name: Production - Coffee ZIM - SalesForce -- CommCare - Training Groups
    jobs:
      Production---Coffee-ZIM---SalesForce----CommCare---Training-Groups:
        name: Production - Coffee ZIM - SalesForce -- CommCare - Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Training Group = CUG.
          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      // This is hard-coded remember to set it up well.
                      "n0:owner_id": "ef4ee01d5ea94392b96618dca8ff7d45",
                      // "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_zim_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_zim_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-ZIM---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Production---Coffee-ZIM---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Production Coffee ZIM SalesForce CommCare Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_zim"
        enabled: true
  Production---Project-Role---ET-HWG-JCP-C2023---SalesForce----CommCare:
    name: Production - Project Role - ET HWG JCP C2023 - SalesForce -- CommCare
    jobs:
      Production---Project-Role---ET-HWG-JCP-C2023---SalesForce----CommCare:
        name: Production - Project Role - ET HWG JCP C2023 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending project roles for Coffee Herz Cohort 2023
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET HWG JCP coffee_et_hwg_jcp_c2023_staff
          // JOB NAME :: Production | Project Role - ET HWG JCP C2023 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_c2023"}
          // AUTHOR ::  Yves Mugenga| ymugenga@tns.org

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_c2023_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:FFGs_Observed": null,
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Project-Role---ET-HWG-JCP-C2023---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Project-Role---ET-HWG-JCP-C2023---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Project Role ET HWG JCP C2023 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_c2023"
        enabled: true
  Production---Training-Groups---ET-GAC-CREW-C2025---SalesForce----CommCare:
    name: Production - Training Groups - ET GAC CREW C2025 - SalesForce -- CommCare
    jobs:
      Production---Training-Groups---ET-GAC-CREW-C2025---SalesForce----CommCare:
        name: Production - Training Groups - ET GAC CREW C2025 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending training groups for Coffee - ET GAC CREW C2025
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET GAC CREW C2025
          // JOB NAME :: Production | Training Groups - ET HWG GAC C2025 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_crew_c2025"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/3FA54AF1-A35E-4163-BDB0-5094F709753C",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_crew_c2025_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_hwg_jcp_crew_c2025_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Training-Groups---ET-GAC-CREW-C2025---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Training-Groups---ET-GAC-CREW-C2025---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Training Groups ET GAC CREW C2025 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_crew_c2025"
        enabled: true
  Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Sessions:
    name: Production - Coffee BDI TNS 2024C - SalesForce -- CommCare - Training
      Sessions
    jobs:
      Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Sessions:
        name: Production - Coffee BDI TNS 2024C - SalesForce -- CommCare - Training
          Sessions
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Your job goes here.
          each(
            "$.data.trainingSessions[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Session",
                    "uiVersion": "1",
                    "version": "148",
                    "xmlns": "http://openrosa.org/formdesigner/1a91006be1e0b81d4cc2ceaf84188e3db80bd955",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Session_1_Date", dataValue("sessionOneDate")),
                field("Session_2_Date", dataValue("sessionTwoDate")),
                field("Training_Group_Name", dataValue("trainingGroupName")),
                field("Secondary_Parent_Id", dataValue("trainingGroupResponsibleStaff")),
                field("Module_Name", dataValue("trainingModuleName")),
                field("Module_Number", dataValue("trainingModuleNumber")),
                field("Current_Previous_Name", function(state){
                  return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                }),
                field("Training_Session_Name", function(state) {
                  return (
                    dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state)
                  );
                }),
                field("Current_Previous", dataValue("currentPrevious")),
                field("Case_Id", dataValue("sessionId")),
                field("Parent_Id", dataValue("trainingGroupCommCareId")),
                field("subcase_0", function(state) {
                  return {
                    "n0:case": {
                      "@": {
                        "case_id": dataValue("sessionId")(state),
                        "date_modified": new Date().toISOString(),
                        "user_id": "e926526fc13b126fffdb6d001f25b269",
                        "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                      },
                      "n0:create": {
                        "n0:case_name": dataValue("trainingModuleNumber")(state)+' '+dataValue("trainingModuleName")(state),
                        "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                        "n0:case_type": "coffee_bdi_tns_2024c_training_session"
                      },
                      "n0:update": {
                        "n0:Case_Id": dataValue("sessionId")(state),
                        "n0:Date": new Date().toISOString(),
                        "n0:Module_Name": dataValue("trainingModuleName")(state),
                        "n0:Module_Number": dataValue("trainingModuleNumber")(state),
                        "n0:Current_Previous": dataValue("currentPrevious")(state),
                        "n0:Current_Previous_Name": function(){
                          return '('+dataValue("currentPrevious")(state)+') '+dataValue("trainingModuleName")(state);
                        },
                        "n0:Parent_Id": dataValue("trainingGroupCommCareId")(state),
                        "n0:Session_1_Date": dataValue("sessionOneDate")(state),
                        "n0:Session_2_Date": dataValue("sessionTwoDate")(state),
                        "n0:Training_Group_Name": dataValue("trainingGroupName")(state),
                        "n0:Secondary_Parent_Id": dataValue("trainingGroupResponsibleStaff")(state)
                      },
                      "n0:index":  {
                        "n0:parent" : {
                          "@": {
                            "case_type": "coffee_bdi_tns_2024c_training_group"
                          },
                          "#": dataValue("trainingGroupCommCareId")(state)
                        }
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("sessionId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "867066029216796",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Sessions:
        source_trigger: webhook
        target_job: Production---Coffee-BDI-TNS-2024C---SalesForce----CommCare---Training-Sessions
        condition_type: js_expression
        condition_label: Coffee BDI TNS 2024C SalesForce CommCare Training Sessions
        condition_expression: |
          state.data.jobType == "Training Session" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_bdi_tns_2024c"
        enabled: true
  Production---Project-Role---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
    name: Production - Project Role - ET HWG JCP CREW C2024 - SalesForce -- CommCare
    jobs:
      Production---Project-Role---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
        name: Production - Project Role - ET HWG JCP CREW C2024 - SalesForce -- CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending project roles for Coffee Herz Cohort 2022
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET HWG JCP CREW C2024
          // JOB NAME :: Production | Project Role - ET HWG JCP CREW C2024 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Project Role","source":"SF","uniqueProjectKey":"coffee_et_hwg_jcp_crew_c2024"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.projectRoles[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Project Role",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/CBD34B15-1442-4548-9B2D-C9937E3CB347",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  return name;
                }),
                field("TNS_Id", dataValue("tnsId")),
                field("City", dataValue("locationName")),
                field("Role", dataValue("roleForCommCare")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Current_Module", dataValue("currentModule")),
                field("Current_Module_Name", dataValue("currentModuleName")),
                field("Previous_Module", dataValue("previousModule")),
                field("Previous_Module_Name", dataValue("previousModuleName")),
                field("FFGs_Observed", null),
                field("Name_id_concat", function(state){
                  var name = '';
                  if(dataValue("staffName")(state) !== null) {
                    name = dataValue("staffName")(state);
                  }
                  if(dataValue("tnsId")(state) !== null) {
                    name = name+' '+dataValue("tnsId")(state);
                  }
                  return name;
                }),
                field("Salesforce_Staff_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_hwg_jcp_crew_c2024_staff"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:Name_Id_Concat": function() {
                        var name = '';
                        if(dataValue("staffName")(state) !== null) {
                          name = dataValue("staffName")(state);
                        }
                        if(dataValue("tnsId")(state) !== null) {
                          name = name+' '+dataValue("tnsId")(state);
                        }
                        return name;
                      },
                      "n0:Role": dataValue("roleForCommCare")(state),
                      "n0:City": dataValue("locationName")(state),
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Current_Module": dataValue("currentModule")(state),
                      "n0:Current_Module_Name": dataValue("currentModuleName")(state),
                      "n0:Previous_Module": dataValue("previousModule")(state),
                      "n0:Previous_Module_Name": dataValue("previousModuleName")(state),
                      "n0:FFGs_Observed": null,
                      "n0:Salesforce_Staff_Id": dataValue("staffId")(state)
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {"xmlns:n1": "http://openrosa.org/jr/xforms"},
                    "n1:deviceID": "tiny_little_openfn_robots_with_impeccable_moustaches",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Project-Role---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Project-Role---ET-HWG-JCP-CREW-C2024---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Project Role ET HWG CREW JCP C2024 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Project Role" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_hwg_jcp_crew_c2024"
        enabled: true
  Production---Coffee-DRC-GCA-Kalehe-C2023---SalesForce----CommCare---Training-Groups:
    name: Production - Coffee DRC GCA Kalehe C2023 - SalesForce -- CommCare -
      Training Groups
    jobs:
      Production---Coffee-DRC-GCA-Kalehe-C2023---SalesForce----CommCare---Training-Groups:
        name: Production - Coffee DRC GCA Kalehe C2023 - SalesForce -- CommCare -
          Training Groups
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // Training Group = CUG.
          each(
            "$.data.trainingGroups[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "name": "New Training Group",
                    "uiVersion": "1",
                    "version": "1",
                    "xmlns": "http://openrosa.org/formdesigner/B9AE4CBF-B571-4038-9C90-3D5D47DFDB90",
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms"
                  };
                }),
                field("Name", dataValue("trainingGroupName")),
                field("FFG_Number", dataValue("tnsId")),
                field("Location", dataValue("locationName")),
                field("Measurement_Group", dataValue("measurementGroup")),
                field("Cooperative_ID", dataValue("cooperative")),
                field("Household_Counter", dataValue("householdCounter")),
                field("Name_Id_Concat", function(state) {
                  return (
                    //dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state)
                    dataValue("trainingGroupName")(state)
                  );
                }),
                field("Parent_Id", dataValue("staffId")),
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": dataValue("trainingGroupName")(state),
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_drc_gca_kalehe_c2023_training_group"
                    },
                    "n0:update": {
                      "n0:Location": dataValue("locationName")(state),
                      "n0:Market": dataValue("market")(state),
                      "n0:Household_Counter": dataValue("householdCounter")(state),
                      "n0:Name_Id_Concat": function(){
                        //var name = dataValue("trainingGroupName")(state)+' '+dataValue("tnsId")(state);
                        var name = dataValue("trainingGroupName")(state);
                        return name;
                      },
                      "n0:Parent_Id": dataValue("staffId")(state),
                      "n0:FFG_Number": dataValue("tnsId")(state),
                      "n0:Measurement_Group": dataValue("measurementGroup")(state),
                      "n0:Cooperative_ID": dataValue("cooperative")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_drc_gca_kalehe_c2023_staff"
                        },
                        "#": dataValue("staffId")(state)
                      }
                    }
                  };
                }),
                field("n1:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("trainingGroupId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n1": "http://commcarehq.org/case/transaction/v2"
                    }
                  };
                }),
                field("n2:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n2": "http://openrosa.org/jr/xforms"
                    },
                    "n2:deviceID": "PIMA API",
                    "n2:timeStart": new Date().toISOString(),
                    "n2:timeEnd": new Date().toISOString(),
                    "n2:username": "api",
                    "n2:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-DRC-GCA-Kalehe-C2023---SalesForce----CommCare---Training-Groups:
        source_trigger: webhook
        target_job: Production---Coffee-DRC-GCA-Kalehe-C2023---SalesForce----CommCare---Training-Groups
        condition_type: js_expression
        condition_label: Production Coffee DRC GCA Kalehe C2023 SalesForce CommCare
          Training Groups
        condition_expression: |
          state.data.jobType == "Training Group" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_drc_gca_kalehe_c2023"
        enabled: true
  Production---Participants---ET-Regrow-TG--Ag--C2023---SalesForce----CommCare:
    name: Production - Participants - ET Regrow TG -Ag- C2023 - SalesForce --
      CommCare
    jobs:
      Production---Participants---ET-Regrow-TG--Ag--C2023---SalesForce----CommCare:
        name: Production - Participants - ET Regrow TG -Ag- C2023 - SalesForce --
          CommCare
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          // JOB PURPOSE :: This is a job for sending Participants for Coffee ET - Regrow Yirga Agronomy C2022
          // DATA FLOW :: Salesforce --> TO --> CommCare
          // TARGET APPS :: Coffee - ET Regrow Yirga (Ag) C2022
          // JOB NAME :: Production | Participants - ET Regrow YG (Ag) C2022 | SalesForce --> CommCare
          // JOB TRIGGER :: {"jobType":"Training Group","source":"SF","uniqueProjectKey":"coffee_et_regrow_ag"}
          // AUTHOR :: Mathew Juma | mjuma@tns.org

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/3E266629-AFD8-4A1C-8825-1DCDDF24E5A8",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("Cooperative_Membership_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("householdName")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("householdName")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_et_regrow_ag_c2_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:Cooperative_Membership_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("householdName")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("householdName")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_et_regrow_ag_c2_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Participants---ET-Regrow-TG--Ag--C2023---SalesForce----CommCare:
        source_trigger: webhook
        target_job: Production---Participants---ET-Regrow-TG--Ag--C2023---SalesForce----CommCare
        condition_type: js_expression
        condition_label: Production Participants Regrow Yirga C2023 SalesForce CommCare
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_et_regrow_ag_c2"
        enabled: true
  Production---Coffee-BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Participants:
    name: Production - Coffee BDI Kahawatu 2024C - SalesForce -- CommCare - Training
      Participants
    jobs:
      Production---Coffee-BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Participants:
        name: Production - Coffee BDI Kahawatu 2024C - SalesForce -- CommCare - Training
          Participants
        adaptor: '@openfn/language-commcare@latest'
        credential: null
        body: |
          //Training Participants
          //Coffee :: BDI Kahawatu 2024C | SalesForce --> CommCare | Training Participants
          //{"jobType":"Participant","source":"SF","uniqueProjectKey":"coffee_bdi_kahawatu_2024c"}

          each(
            "$.data.participants[*]",
            submit(
              fields(
                field("@", function(state) {
                  return {
                    "xmlns:jrm": "http://dev.commcarehq.org/jr/xforms",
                    "xmlns": "http://openrosa.org/formdesigner/1768D5C8-3EE4-4D7B-AE17-FE0AC9A0E60D",
                    "uiVersion": "1",
                    "version": "325",
                    "name": "New Participant",
                  };
                }),
                field("Name", function(state){
                  var name = '';
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name;
                }),
                field("First_Name", dataValue("participantName")),
                field("Middle_Name", dataValue("participantMiddleName")),
                field("Last_Name", dataValue("participantLastName")),
                field("Age", dataValue("participantAge")),
                field("Gender", dataValue("participantGender")),
                field("Phone_Number", dataValue("participantPhoneNumber")),
                field("Farmer_Id", dataValue("tnsId")),
                field("Farmer_Number", function(state){
                  var tnsId = dataValue("tnsId")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  return farmerNumber;
                }),
                field("National_ID_Number", dataValue("participantOtherIDNumber")),
                field("Household_Id", dataValue("householdId")),
                field("Household_Number", dataValue("HHID")),
                field("Number_of_Trees", dataValue("householdFarmSize")),
                field("Parent_Id", dataValue("trainingGroupId")),
                field("Status", dataValue("status")),
                field("Primary_Household_Member", dataValue("participantPrimaryHouseholdMember")),
                field("Case_Id", dataValue("commCareCaseId")),
                field("Name_Household_Concat", function(state){
                  var name = '';
                  var tnsId = dataValue("tnsId")(state);
                  var hhNumber = dataValue("HHID")(state);
                  var farmerNumber = tnsId.substr(tnsId.length-1,1);
                  
                  if(dataValue("participantName")(state) !== null) {
                    name = dataValue("participantName")(state);
                  }
                  if(dataValue("participantMiddleName")(state) !== null) {
                    name = name+' '+dataValue("participantMiddleName")(state);
                  }
                  if(dataValue("participantLastName")(state) !== null) {
                    name = name+' '+dataValue("participantLastName")(state);
                  }
                  return name+' '+hhNumber+'-'+farmerNumber;
                }),
                
                field("n0:case", function(state) {
                  return {
                    "@": {
                      "case_id": dataValue("commCareCaseId")(state),
                      "date_modified": new Date().toISOString(),
                      "user_id": "e926526fc13b126fffdb6d001f25b269",
                      "xmlns:n0": "http://commcarehq.org/case/transaction/v2"
                    },
                    "n0:create": {
                      "n0:case_name": function(){
                        var name = '';
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name;
                      },
                      "n0:owner_id": dataValue("ccMobileWorkerGroupId")(state),
                      "n0:case_type": "coffee_bdi_kahawatu_2024c_participant"
                    },
                    "n0:update": {
                      "n0:Case_Id": dataValue("commCareCaseId")(state),
                      "n0:First_Name": dataValue("participantName")(state),
                      "n0:Middle_Name": dataValue("participantMiddleName")(state),
                      "n0:Last_Name": dataValue("participantLastName")(state),
                      "n0:Age": dataValue("participantAge")(state),
                      "n0:Gender": dataValue("participantGender")(state),
                      "n0:Phone_Number": dataValue("participantPhoneNumber")(state),
                      "n0:Farmer_Id": dataValue("tnsId")(state),
                      "n0:Farmer_Number": function(){
                        var tnsId = dataValue("tnsId")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        return farmerNumber;
                      },
                      "n0:National_ID_Number": dataValue("participantOtherIDNumber")(state),
                      "n0:Household_Id": dataValue("householdId")(state),
                      "n0:Household_Number": dataValue("HHID")(state),
                      "n0:Number_of_Trees": dataValue("householdFarmSize")(state),
                      "n0:Status": dataValue("status")(state),
                      "n0:Primary_Household_Member": dataValue("participantPrimaryHouseholdMember")(state),
                      "n0:Name_Household_Concat": function(){
                        var name = '';
                        var tnsId = dataValue("tnsId")(state);
                        var hhNumber = dataValue("HHID")(state);
                        var farmerNumber = tnsId.substr(tnsId.length-1,1);
                        
                        if(dataValue("participantName")(state) !== null) {
                          name = dataValue("participantName")(state);
                        }
                        if(dataValue("participantMiddleName")(state) !== null) {
                          name = name+' '+dataValue("participantMiddleName")(state);
                        }
                        if(dataValue("participantLastName")(state) !== null) {
                          name = name+' '+dataValue("participantLastName")(state);
                        }
                        return name+' '+hhNumber+'-'+farmerNumber;
                      },
                      "n0:TNS_Id": dataValue("tnsId")(state),
                      "n0:Parent_Id": dataValue("trainingGroupId")(state)
                    },
                    "n0:index": {
                      "n0:parent" : {
                        "@": {
                          "case_type": "coffee_bdi_kahawatu_2024c_training_group"
                        },
                        "#": dataValue("trainingGroupId")(state)
                      }
                    }
                  };
                }),
                field("n1:meta", function(state) {
                  return {
                    "@": {
                      "xmlns:n1": "http://openrosa.org/jr/xforms"
                    },
                    "n1:deviceID": "867066029216796",
                    "n1:timeStart": new Date().toISOString(),
                    "n1:timeEnd": new Date().toISOString(),
                    "n1:username": "api",
                    "n1:userID": "e926526fc13b126fffdb6d001f25b269"
                  };
                })
              )
            )
          );

          //Version Control

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Production---Coffee-BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Participants:
        source_trigger: webhook
        target_job: Production---Coffee-BDI-Kahawatu-2024C---SalesForce----CommCare---Training-Participants
        condition_type: js_expression
        condition_label: Coffee BDI Kahawatu 2024C SalesForce CommCare Training Participants
        condition_expression: |
          state.data.jobType == "Participant" && state.data.source == "SF" && state.data.uniqueProjectKey == "coffee_bdi_kahawatu_2024c"
        enabled: true
